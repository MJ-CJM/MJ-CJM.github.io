{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.jpeg","path":"favicon.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/Thumbs.db","path":"medias/Thumbs.db","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"source/image/kubernetes架构图.jpg","path":"image/kubernetes架构图.jpg","modified":0,"renderable":0},{"_id":"source/image/gengo代码生成原理.jpg","path":"image/gengo代码生成原理.jpg","modified":0,"renderable":0},{"_id":"source/image/k8s代码生成过程图.jpg","path":"image/k8s代码生成过程图.jpg","modified":0,"renderable":0},{"_id":"source/image/kubernetes核心数据结构.jpg","path":"image/kubernetes核心数据结构.jpg","modified":0,"renderable":0},{"_id":"source/image/Converter转换器.jpg","path":"image/Converter转换器.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/friends.json","hash":"31f17997989cae65bb15c2ac59bcd247b39203d9","modified":1604928051999},{"_id":"source/_posts/Kubernetes源码架构.md","hash":"1d5a7cb429b59a5b1e5700e937ad8de90329b5d7","modified":1606137817980},{"_id":"source/404.md","hash":"00e4097646d4de29653eac829ce00926a55cf924","modified":1604927469658},{"_id":"source/about/index.md","hash":"d598292372f7b850c457f0134301b213be57f939","modified":1604926720843},{"_id":"source/categories/index.md","hash":"18a28507ee75130fe6eccd5a749c50655c1ddc73","modified":1604926653571},{"_id":"source/friends/index.md","hash":"f198eb78a15702415da190492e91b4c00b847731","modified":1604927140646},{"_id":"source/CNAME","hash":"62f732015af254e4f9f17815a66d09e34d4f9776","modified":1604908793029},{"_id":"source/contact/index.md","hash":"a03e33b5210055267539808a26ed45dd9fde2651","modified":1604926953571},{"_id":"source/tags/index.md","hash":"035c8e187693d284df9fde0c1e2bd274bc7d7680","modified":1604926690350},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1604899557946},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1604899557946},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"cca97ccc94f9c65a6acd9132ed5c4b53ab8b5bf9","modified":1605154648806},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"011ed6522859e600c27ea6dce9591fbc447db177","modified":1604899557947},{"_id":"themes/hexo-theme-matery/README.md","hash":"56299cf1fe60a11fef61b3948fe148f995df747e","modified":1604899557947},{"_id":"themes/hexo-theme-matery/.idea/modules.xml","hash":"92cb28ad9c629f1f7104bf18c9f6aef695962864","modified":1604905581641},{"_id":"themes/hexo-theme-matery/.idea/misc.xml","hash":"272fe3cdb0eb7e6f8d3fabe8dac46d659402c295","modified":1604973560531},{"_id":"themes/hexo-theme-matery/.idea/hexo-theme-matery.iml","hash":"980957b57c4f1eae5e85d664d8375f83d47d3e5a","modified":1604905581626},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1604899557947},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1604899557947},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1604899557948},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"60e4a9a6ed1cfe8d5e843377705df1768bdcb4d4","modified":1604974954610},{"_id":"themes/hexo-theme-matery/.idea/vcs.xml","hash":"6f94fc1df9e8721673d47588ac444667dc9ded06","modified":1604905581636},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1604899557954},{"_id":"themes/hexo-theme-matery/.idea/workspace.xml","hash":"8fbc15c37f258abff3ca6c6546e225a3937e19fb","modified":1604974931612},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1604899557955},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c7453d5b064d42529e8c9fdef52d0901d51acb9b","modified":1604899557955},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1604899557955},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1604899557954},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1604899557955},{"_id":"themes/hexo-theme-matery/source/favicon.jpeg","hash":"d358643ed5e3349ab08e70499a22f8f8bab409cd","modified":1604973554545},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1604899557948},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1604899557949},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1604899557950},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"a0de13cde718c7951cbf8eff809e76538e32e8e2","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"655ea63374186a1d5230648f70ab4d327bb663bb","modified":1604899557951},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"539cb3963b6a67d099ec2a258f0875d7a01bee01","modified":1604972585264},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1604899557956},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1604899557951},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"81eca110e533693a5369c0cc9106bf0f0432ee37","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1604899557952},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1604899557953},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1604899557954},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1604974494357},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1604899557956},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1604899557956},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1604899557956},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1604899557955},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1604899557955},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1604899557997},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1604899558005},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"34ad1940bc37fcc0c205ce943bfd5a63753972dd","modified":1604972575229},{"_id":"themes/hexo-theme-matery/source/medias/Thumbs.db","hash":"4f37201f0fd03a6d745e09f1508e7da0ae7e88b8","modified":1605014028033},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1604899557956},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1604899558019},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1604899557957},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1604899557957},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1604899557957},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1604899558019},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1604899557977},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1604899557978},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1604899557957},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1604899557979},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1604899557979},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1604899557985},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1604899557987},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1604899557988},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1604899557988},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1604899557991},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1604899557987},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1604899557993},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1604899557996},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1604899557996},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1604899557993},{"_id":"themes/hexo-theme-matery/source/medias/banner/.DS_Store","hash":"15f47dbef2b784f9fed3474b3518a0cabf4dc1a1","modified":1604972545817},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"8730d9759acf4ba668525afb1957d97a388a5324","modified":1604973554547},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1604899558008},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1604899558009},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1604899558010},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1604899558014},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1604899558011},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1604899558013},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1604899558014},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1604899558015},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1604899558015},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1604899558016},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1604899558017},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1604899558018},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1604899557966},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1604899557968},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1604899557968},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1604899557968},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1604899557989},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1604899557989},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1604899557989},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1604899557989},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1604899557990},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1604899557990},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1604899557990},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1604899557990},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1604899557990},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1604899557991},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1604899557995},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1604899557995},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1604899557994},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1604899557995},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1604899557987},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1604899557980},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1604899557989},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1604899557996},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1604899558001},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1604899557999},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1604899558000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1604899558007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1604899558009},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1604899558007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1604899558010},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1604899558009},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1604899558012},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1604899558011},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1604899558012},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1604899558013},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1604899558016},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1604899558017},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1604899557958},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1604899557966},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1604899558018},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1604899557960},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1604899557965},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1604899557966},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1604899557977},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1604899557977},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1604899558006},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1604899557992},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1604899557986},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1604899557997},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1604899558004},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1604899557967},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1604899557976},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1604899557993},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1604899557970},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1604899558003},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c0453bc67ea3174d558484deb12b6888876770e0","modified":1604973554546},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1604899557985},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1604899557963},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1604899557974},{"_id":"source/_posts/hello-world.md","hash":"e1a25f53d99799d6b857df2e75408569076f7f84","modified":1605065934266},{"_id":"source/.DS_Store","hash":"13753105b73d22772734c5f53c543f66063e1532","modified":1606120427374},{"_id":"source/image/kubernetes架构图.jpg","hash":"ff956847c0d7c20537b6f3fbfdfa2a2d3d87f3f5","modified":1605095553526},{"_id":"public/atom.xml","hash":"50d117717b3cba44d74f5c6322918a7af1317f84","modified":1606446881475},{"_id":"public/search.xml","hash":"63911a1104f2343f4357eaa0e4232e79e5146ed8","modified":1606446881475},{"_id":"public/404.html","hash":"fe40a5b5ce210079641c4718f82ced7671a4c3dd","modified":1605098803581},{"_id":"public/about/index.html","hash":"8fa704d7e6d62fdceeda46c3dea86d7b1b10f4b8","modified":1606446881475},{"_id":"public/categories/index.html","hash":"b69ab1574bf596b7b75bf1944bddda213fad8f9c","modified":1606446881475},{"_id":"public/contact/index.html","hash":"153f8fbbd46762e74ed6e78ebed1e8565cc87b95","modified":1605098803581},{"_id":"public/friends/index.html","hash":"3ae8afcb370284eaceb6d4e809e6b7721f2e2333","modified":1605098803581},{"_id":"public/tags/index.html","hash":"4cb01e544984dd9d5afe61235ec24446d9141ac8","modified":1606446881475},{"_id":"public/kubernetes-yuan-ma-jia-gou/index.html","hash":"12b621696970e8634cfe92b4d3c7a86b5ab72f86","modified":1606137986641},{"_id":"public/archives/index.html","hash":"bcf85dd2637c8d7be3987a60b47f106e6eebe2c5","modified":1606446881475},{"_id":"public/archives/2020/index.html","hash":"5ea59e52bcf45fc1617311f128fda84898df20f1","modified":1606446881475},{"_id":"public/archives/2020/11/index.html","hash":"b8e4085ebc387b0c0f7ad8773a03e23145372b67","modified":1606446881475},{"_id":"public/categories/Kubernetes源码解析/index.html","hash":"b2e189720f5f42cf894f9cc18d7cdecbe9aa2400","modified":1606446881475},{"_id":"public/index.html","hash":"8826eaa089308a1ad029290f77fff70fb4587519","modified":1606446881475},{"_id":"public/tags/Kubernetes/index.html","hash":"5403d41978921375deb32d577b2f6a943790dce8","modified":1606446881475},{"_id":"public/favicon.jpeg","hash":"d358643ed5e3349ab08e70499a22f8f8bab409cd","modified":1605098803581},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1605098803581},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1605098803581},{"_id":"public/medias/Thumbs.db","hash":"4f37201f0fd03a6d745e09f1508e7da0ae7e88b8","modified":1605098803581},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1605098803581},{"_id":"public/CNAME","hash":"62f732015af254e4f9f17815a66d09e34d4f9776","modified":1605098803581},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1605098803581},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1605098803581},{"_id":"public/medias/banner/6.jpg","hash":"8730d9759acf4ba668525afb1957d97a388a5324","modified":1605098803581},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1605098803581},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1605098803581},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1605098803581},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1605098803581},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1605098803581},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1605098803581},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1605098803581},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1605098803581},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1605098803581},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1605098803581},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1605098803581},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1605098803581},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1605098803581},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1605098803581},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1605098803581},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1605098803581},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1605098803581},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1605098803581},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1605098803581},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1605098803581},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1605098803581},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1605098803581},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1605098803581},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1605098803581},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1605098803581},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1605098803581},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1605098803581},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1605098803581},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1605098803581},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1605098803581},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1605098803581},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1605098803581},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1605098803581},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1605098803581},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1605098803581},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1605098803581},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1605098803581},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1605098803581},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1605098803581},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1605098803581},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1605098803581},{"_id":"public/image/kubernetes架构图.jpg","hash":"ff956847c0d7c20537b6f3fbfdfa2a2d3d87f3f5","modified":1605098803581},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1605098803581},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1605098803581},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1605098803581},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1605098803581},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1605098803581},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1605098803581},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1605098803581},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1605098803581},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1605098803581},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1605098803581},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1605098803581},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1605098803581},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1605098803581},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1605098803581},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1605098803581},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1605098803581},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1605098803581},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1605098803581},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1605098803581},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1605098803581},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1605098803581},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1605098803581},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1605098803581},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1605098803581},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1605098803581},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1605098803581},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1605098803581},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1605098803581},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1605098803581},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1605098803581},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1605098803581},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1605098803581},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1605098803581},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1605098803581},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1605098803581},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1605098803581},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1605098803581},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1605098803581},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1605098803581},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1605098803581},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1605098803581},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1605098803581},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1605098803581},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1605098803581},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1605098803581},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1605098803581},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1605098803581},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1605098803581},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1605098803581},{"_id":"public/medias/banner/1.jpg","hash":"c0453bc67ea3174d558484deb12b6888876770e0","modified":1605098803581},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1605098803581},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1605098803581},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1605098803581},{"_id":"source/_posts/Kubernetes构建过程.md","hash":"26d4e0f76f696c3287ff20ff887ab1e270dff59a","modified":1606137898171},{"_id":"public/kubernetes-gou-jian-guo-cheng/index.html","hash":"0317796f79583a7a3deb098d79c264f6eb6deadc","modified":1606137986641},{"_id":"source/image/gengo代码生成原理.jpg","hash":"1c36f7c564d457e1b31036492e4ba8ab19cb4622","modified":1605254440436},{"_id":"source/image/k8s代码生成过程图.jpg","hash":"f0bd98f857d2fd2f9eef49da3605bed30d651934","modified":1605251448014},{"_id":"public/image/gengo代码生成原理.jpg","hash":"1c36f7c564d457e1b31036492e4ba8ab19cb4622","modified":1605255094543},{"_id":"public/image/k8s代码生成过程图.jpg","hash":"f0bd98f857d2fd2f9eef49da3605bed30d651934","modified":1605255094543},{"_id":"source/_posts/Kubernetes核心数据结构1-0.md","hash":"f3a68edff07bd0b6e222986fdebecf9211bcb8fe","modified":1606137914158},{"_id":"source/image/kubernetes核心数据结构.jpg","hash":"6d26069df8bd0d9c612222d56bc536f5f0b7ec9c","modified":1605836802256},{"_id":"public/kubernetes-he-xin-shu-ju-jie-gou-1-0/index.html","hash":"0aacfce09f61de078bd5fe99f1e5170f0c3bb8fe","modified":1606137986641},{"_id":"public/image/kubernetes核心数据结构.jpg","hash":"6d26069df8bd0d9c612222d56bc536f5f0b7ec9c","modified":1605836917744},{"_id":"source/_posts/API接口文档格式.md","hash":"61675819c9b0edaddc357eeffef1087e0ea9ba84","modified":1605868217479},{"_id":"source/_posts/Kubernetes-data-structure-2.md","hash":"9f1c11273f1adda86ee989cb9311c5dd7383810e","modified":1606137924140},{"_id":"public/kubernetes-data-structure-2/index.html","hash":"9266327f22cfbafc5e65c4793d13c3883c9debd1","modified":1606296728762},{"_id":"source/image/Converter转换器.jpg","hash":"f30acb34e59c1ae54df7ec7ad0be541d33db727b","modified":1606120348501},{"_id":"public/image/Converter转换器.jpg","hash":"f30acb34e59c1ae54df7ec7ad0be541d33db727b","modified":1606137304290},{"_id":"public/tags/Kubernetes架构/index.html","hash":"1cc0b8205fb705986ed0bf21d24e545b9a89560b","modified":1606446881475},{"_id":"public/tags/Kubernetes构建/index.html","hash":"37bf22a76b85828f9775963b76507a3309d23cac","modified":1606446881475},{"_id":"public/tags/Kubernetes数据结构/index.html","hash":"f16780b0c262480b16bf600cb55c1c1374d3e529","modified":1606446881475},{"_id":"source/_posts/kubectl-commands.md","hash":"2a45c45a5e82cd5110b773fb67d28cd554a0e139","modified":1606446250629},{"_id":"public/kubectl-commands/index.html","hash":"7e6f7f84e0cebd0bdce99553b89ce42508e68231","modified":1606446881475},{"_id":"public/tags/kubectl-命令行交互/index.html","hash":"26ac3bc40dcbde585088822376e1b8c6a5a1c8a9","modified":1606446881475},{"_id":"source/_posts/client-go.md","hash":"3e4ea88bb5181923593ce435fff776a94a6562c3","modified":1606446754762},{"_id":"public/client-go/index.html","hash":"036070a9f7b94c2c8361363dd36993bdf64487f1","modified":1606446881475},{"_id":"public/tags/client-go/index.html","hash":"58886f1251486045bca5c2e1fee41773ef30f72e","modified":1606446881475}],"Category":[{"name":"HelloWorld","_id":"ckhcutdgc00014v8j68bi0sbs"},{"name":"Kubernetes源码解析","_id":"ckhd4yoff00005g8jccuw2ot0"}],"Data":[{"_id":"friends","data":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}],"Page":[{"title":"404","date":"2020-11-09T12:58:50.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-11-09 20:58:50\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-11-09T13:11:09.658Z","path":"404.html","comments":1,"_id":"ckhcun9kw0000wl8jgwqpdunq","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-11-09T12:58:15.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-11-09 20:58:15\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-11-09T12:58:40.843Z","path":"about/index.html","comments":1,"_id":"ckhcun9l20002wl8j65qmf174","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-11-09T12:54:05.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-09 20:54:05\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-11-09T12:57:33.571Z","path":"categories/index.html","comments":1,"_id":"ckhcun9l40003wl8j9nf87vf9","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-11-09T12:58:47.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-11-09 20:58:47\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-11-09T13:02:33.571Z","path":"contact/index.html","comments":1,"_id":"ckhcun9l40004wl8j461aae4k","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-11-09T13:04:44.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-11-09 21:04:44\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-11-09T13:05:40.646Z","path":"friends/index.html","comments":1,"_id":"ckhcun9l50005wl8j7m3o33uz","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-11-09T12:57:41.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-11-09 20:57:41\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-11-09T12:58:10.350Z","path":"tags/index.html","comments":1,"_id":"ckhcun9l50006wl8jddge0ika","content":"","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":""}],"Post":[{"title":"Kubernetes源码架构","date":"2020-11-11T02:48:44.000Z","_content":"\n## Kubernetes架构图\n![kubernetes架构图](../image/kubernetes架构图.jpg)\n\n## Kubernetes各组件功能\n\n### kube-apiserver\n* 集群的 HTTP REST API 接口，是集群控制的入口\n* 也是集群中唯一与 Etcd 集群进行交互的核心组件\n> Etcd 集群是分布式键值存储集群，提供了可靠的强一致性服务发现\n\n### kube-controller-manager\n* 集群中所有资源对象的自动化控制中心\n* 每个控制器通过 kube-apiserver 组件提供的接口实时监控整个集群每个资源对象的当前状态，当因发生各种故障而导致系统状态出现变化时，会尝试将系统状态修复到“期望状态”\n* Controller Manager 具备高可用性（多实例同时运行）\n> 即基于 Etcd 集群上的分布式锁实现领导者选举机制，多实例同时运行，通过 kube-apiserver 提供的资源锁进行选举竞争。抢先获取锁的实例被称为 Leader 节点（即领导者节点），并运行该组件的主逻辑，而未获取锁的实例被称为 Candidate 节点（即候选节点），运行时处于阻塞状态。在 Leader 节点因某些原因退出后，Candidate 节点则通过领导者选举机制参与竞选，成为 Leader 节点后接替该组件的工作\n\n### kube-scheduler \n* 集群中 Pod 资源对象的调度服务\n* kube-scheduler 具备高可用性（多实例同时运行）具体同上\n> 具体调度我会在后面仔细整理，里面其实很有趣好玩\n\n### kubelet\n* 负责管理节点上容器的创建、删除、启停等任务，与 Master 节点进行通信\n\n### kube-proxy\n* 负责 kubernetes 服务的通信及负载均衡服务\n* 通过 iptables/ipvs 等配置负载均衡器，为一组 pod 提供统一的 TCP/UDP 流量转发和负载均衡功能\n\n### container\n* 负责容器的基础管理服务，接受 kubelet 组件的指令\n\n### client-go\n* 是从 kubernetes 代码中单独抽离出来的包，并作为官方提供的 Go 语言客户端发挥作用\n* kubernetes 系统的其他组件与 kubernetes API Server 通信的方式也是基于 client-go 实现\n> 因此在基于 kubernetes 做二次开发的过程中，建议通过 client-go 来实现与 kubernetes API Server 的交互过程\n\n\n## Kubernetes Project Layout设计\n| 源码目录 | 说明 | \n| --- | --- |\n| cmd/ | 存放可执行文件的代码入口，每个可执行文件都会对应一个main函数 |\n| pkg/ | 存放核心库代码， 可被项目内外部直接饮用 |\n| vendor/ | 存放项目的依赖库代码，一般为第三方库代码 |\n| api/ | 存放 OpenAPI/Swagger 的 spec 文件，包括 Json, Protocol 的定义等 |\n| build/ | 存放构建相关的脚本 |\n| test/ | 存放测试工具以及测试数据 | \n| docs/ | 存放设计或用户使用文档 |\n| hack/ | 存放与构建和测试相关的脚本 |\n| third_party/ | 存放第三方工具、代码和组件 |\n| plugin/ | 存放 Kubernetes 插件代码目录，例如认证、授权等相关插件 |\n| staging/ | 存放部分核心库的暂存目录 |\n| translations/ | 存放用于支持不同语言的相关文件 |\n\n## Kube-apiserver的初始化过程\n1. **rand.Seed**: 组件中的全局随机数生成对象。\n2. **app.NewCommand**: 实例化命令行参数。通过 flags 对命令行参数进行解析并存储至 Options 对象中。\n3. **logs.InitLogs**: 实例化日志对象，用于日志管理。\n4. **command.Execute**: 组件进程运行的逻辑。运行前通过 Complete 函数填充默认参数，通过 Validate 函数验证所有参数，最后通过 Run 函数持久运行。只有当进程收到退出信号时，进程才会退出。\n> tips: Kubernetes 其他组件的 cmd 设计与之类似。","source":"_posts/Kubernetes源码架构.md","raw":"---\ntitle: Kubernetes源码架构\ndate: 2020-11-11 10:48:44\ntags: [Kubernetes, Kubernetes架构]\ncategories: Kubernetes源码解析\n---\n\n## Kubernetes架构图\n![kubernetes架构图](../image/kubernetes架构图.jpg)\n\n## Kubernetes各组件功能\n\n### kube-apiserver\n* 集群的 HTTP REST API 接口，是集群控制的入口\n* 也是集群中唯一与 Etcd 集群进行交互的核心组件\n> Etcd 集群是分布式键值存储集群，提供了可靠的强一致性服务发现\n\n### kube-controller-manager\n* 集群中所有资源对象的自动化控制中心\n* 每个控制器通过 kube-apiserver 组件提供的接口实时监控整个集群每个资源对象的当前状态，当因发生各种故障而导致系统状态出现变化时，会尝试将系统状态修复到“期望状态”\n* Controller Manager 具备高可用性（多实例同时运行）\n> 即基于 Etcd 集群上的分布式锁实现领导者选举机制，多实例同时运行，通过 kube-apiserver 提供的资源锁进行选举竞争。抢先获取锁的实例被称为 Leader 节点（即领导者节点），并运行该组件的主逻辑，而未获取锁的实例被称为 Candidate 节点（即候选节点），运行时处于阻塞状态。在 Leader 节点因某些原因退出后，Candidate 节点则通过领导者选举机制参与竞选，成为 Leader 节点后接替该组件的工作\n\n### kube-scheduler \n* 集群中 Pod 资源对象的调度服务\n* kube-scheduler 具备高可用性（多实例同时运行）具体同上\n> 具体调度我会在后面仔细整理，里面其实很有趣好玩\n\n### kubelet\n* 负责管理节点上容器的创建、删除、启停等任务，与 Master 节点进行通信\n\n### kube-proxy\n* 负责 kubernetes 服务的通信及负载均衡服务\n* 通过 iptables/ipvs 等配置负载均衡器，为一组 pod 提供统一的 TCP/UDP 流量转发和负载均衡功能\n\n### container\n* 负责容器的基础管理服务，接受 kubelet 组件的指令\n\n### client-go\n* 是从 kubernetes 代码中单独抽离出来的包，并作为官方提供的 Go 语言客户端发挥作用\n* kubernetes 系统的其他组件与 kubernetes API Server 通信的方式也是基于 client-go 实现\n> 因此在基于 kubernetes 做二次开发的过程中，建议通过 client-go 来实现与 kubernetes API Server 的交互过程\n\n\n## Kubernetes Project Layout设计\n| 源码目录 | 说明 | \n| --- | --- |\n| cmd/ | 存放可执行文件的代码入口，每个可执行文件都会对应一个main函数 |\n| pkg/ | 存放核心库代码， 可被项目内外部直接饮用 |\n| vendor/ | 存放项目的依赖库代码，一般为第三方库代码 |\n| api/ | 存放 OpenAPI/Swagger 的 spec 文件，包括 Json, Protocol 的定义等 |\n| build/ | 存放构建相关的脚本 |\n| test/ | 存放测试工具以及测试数据 | \n| docs/ | 存放设计或用户使用文档 |\n| hack/ | 存放与构建和测试相关的脚本 |\n| third_party/ | 存放第三方工具、代码和组件 |\n| plugin/ | 存放 Kubernetes 插件代码目录，例如认证、授权等相关插件 |\n| staging/ | 存放部分核心库的暂存目录 |\n| translations/ | 存放用于支持不同语言的相关文件 |\n\n## Kube-apiserver的初始化过程\n1. **rand.Seed**: 组件中的全局随机数生成对象。\n2. **app.NewCommand**: 实例化命令行参数。通过 flags 对命令行参数进行解析并存储至 Options 对象中。\n3. **logs.InitLogs**: 实例化日志对象，用于日志管理。\n4. **command.Execute**: 组件进程运行的逻辑。运行前通过 Complete 函数填充默认参数，通过 Validate 函数验证所有参数，最后通过 Run 函数持久运行。只有当进程收到退出信号时，进程才会退出。\n> tips: Kubernetes 其他组件的 cmd 设计与之类似。","slug":"Kubernetes源码架构","published":1,"updated":"2020-11-23T13:23:37.980Z","_id":"ckhcun9ky0001wl8j8t3j2smr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Kubernetes架构图\"><a href=\"#Kubernetes架构图\" class=\"headerlink\" title=\"Kubernetes架构图\"></a>Kubernetes架构图</h2><p><img src=\"../image/kubernetes%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg\" alt=\"kubernetes架构图\"></p>\n<h2 id=\"Kubernetes各组件功能\"><a href=\"#Kubernetes各组件功能\" class=\"headerlink\" title=\"Kubernetes各组件功能\"></a>Kubernetes各组件功能</h2><h3 id=\"kube-apiserver\"><a href=\"#kube-apiserver\" class=\"headerlink\" title=\"kube-apiserver\"></a>kube-apiserver</h3><ul>\n<li>集群的 HTTP REST API 接口，是集群控制的入口</li>\n<li>也是集群中唯一与 Etcd 集群进行交互的核心组件<blockquote>\n<p>Etcd 集群是分布式键值存储集群，提供了可靠的强一致性服务发现</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kube-controller-manager\"><a href=\"#kube-controller-manager\" class=\"headerlink\" title=\"kube-controller-manager\"></a>kube-controller-manager</h3><ul>\n<li>集群中所有资源对象的自动化控制中心</li>\n<li>每个控制器通过 kube-apiserver 组件提供的接口实时监控整个集群每个资源对象的当前状态，当因发生各种故障而导致系统状态出现变化时，会尝试将系统状态修复到“期望状态”</li>\n<li>Controller Manager 具备高可用性（多实例同时运行）<blockquote>\n<p>即基于 Etcd 集群上的分布式锁实现领导者选举机制，多实例同时运行，通过 kube-apiserver 提供的资源锁进行选举竞争。抢先获取锁的实例被称为 Leader 节点（即领导者节点），并运行该组件的主逻辑，而未获取锁的实例被称为 Candidate 节点（即候选节点），运行时处于阻塞状态。在 Leader 节点因某些原因退出后，Candidate 节点则通过领导者选举机制参与竞选，成为 Leader 节点后接替该组件的工作</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kube-scheduler\"><a href=\"#kube-scheduler\" class=\"headerlink\" title=\"kube-scheduler\"></a>kube-scheduler</h3><ul>\n<li>集群中 Pod 资源对象的调度服务</li>\n<li>kube-scheduler 具备高可用性（多实例同时运行）具体同上<blockquote>\n<p>具体调度我会在后面仔细整理，里面其实很有趣好玩</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h3><ul>\n<li>负责管理节点上容器的创建、删除、启停等任务，与 Master 节点进行通信</li>\n</ul>\n<h3 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h3><ul>\n<li>负责 kubernetes 服务的通信及负载均衡服务</li>\n<li>通过 iptables/ipvs 等配置负载均衡器，为一组 pod 提供统一的 TCP/UDP 流量转发和负载均衡功能</li>\n</ul>\n<h3 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h3><ul>\n<li>负责容器的基础管理服务，接受 kubelet 组件的指令</li>\n</ul>\n<h3 id=\"client-go\"><a href=\"#client-go\" class=\"headerlink\" title=\"client-go\"></a>client-go</h3><ul>\n<li>是从 kubernetes 代码中单独抽离出来的包，并作为官方提供的 Go 语言客户端发挥作用</li>\n<li>kubernetes 系统的其他组件与 kubernetes API Server 通信的方式也是基于 client-go 实现<blockquote>\n<p>因此在基于 kubernetes 做二次开发的过程中，建议通过 client-go 来实现与 kubernetes API Server 的交互过程</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Kubernetes-Project-Layout设计\"><a href=\"#Kubernetes-Project-Layout设计\" class=\"headerlink\" title=\"Kubernetes Project Layout设计\"></a>Kubernetes Project Layout设计</h2><table>\n<thead>\n<tr>\n<th>源码目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmd/</td>\n<td>存放可执行文件的代码入口，每个可执行文件都会对应一个main函数</td>\n</tr>\n<tr>\n<td>pkg/</td>\n<td>存放核心库代码， 可被项目内外部直接饮用</td>\n</tr>\n<tr>\n<td>vendor/</td>\n<td>存放项目的依赖库代码，一般为第三方库代码</td>\n</tr>\n<tr>\n<td>api/</td>\n<td>存放 OpenAPI/Swagger 的 spec 文件，包括 Json, Protocol 的定义等</td>\n</tr>\n<tr>\n<td>build/</td>\n<td>存放构建相关的脚本</td>\n</tr>\n<tr>\n<td>test/</td>\n<td>存放测试工具以及测试数据</td>\n</tr>\n<tr>\n<td>docs/</td>\n<td>存放设计或用户使用文档</td>\n</tr>\n<tr>\n<td>hack/</td>\n<td>存放与构建和测试相关的脚本</td>\n</tr>\n<tr>\n<td>third_party/</td>\n<td>存放第三方工具、代码和组件</td>\n</tr>\n<tr>\n<td>plugin/</td>\n<td>存放 Kubernetes 插件代码目录，例如认证、授权等相关插件</td>\n</tr>\n<tr>\n<td>staging/</td>\n<td>存放部分核心库的暂存目录</td>\n</tr>\n<tr>\n<td>translations/</td>\n<td>存放用于支持不同语言的相关文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"Kube-apiserver的初始化过程\"><a href=\"#Kube-apiserver的初始化过程\" class=\"headerlink\" title=\"Kube-apiserver的初始化过程\"></a>Kube-apiserver的初始化过程</h2><ol>\n<li><strong>rand.Seed</strong>: 组件中的全局随机数生成对象。</li>\n<li><strong>app.NewCommand</strong>: 实例化命令行参数。通过 flags 对命令行参数进行解析并存储至 Options 对象中。</li>\n<li><strong>logs.InitLogs</strong>: 实例化日志对象，用于日志管理。</li>\n<li><strong>command.Execute</strong>: 组件进程运行的逻辑。运行前通过 Complete 函数填充默认参数，通过 Validate 函数验证所有参数，最后通过 Run 函数持久运行。只有当进程收到退出信号时，进程才会退出。<blockquote>\n<p>tips: Kubernetes 其他组件的 cmd 设计与之类似。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<h2 id=\"Kubernetes架构图\"><a href=\"#Kubernetes架构图\" class=\"headerlink\" title=\"Kubernetes架构图\"></a>Kubernetes架构图</h2><p><img src=\"../image/kubernetes%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg\" alt=\"kubernetes架构图\"></p>\n<h2 id=\"Kubernetes各组件功能\"><a href=\"#Kubernetes各组件功能\" class=\"headerlink\" title=\"Kubernetes各组件功能\"></a>Kubernetes各组件功能</h2><h3 id=\"kube-apiserver\"><a href=\"#kube-apiserver\" class=\"headerlink\" title=\"kube-apiserver\"></a>kube-apiserver</h3><ul>\n<li>集群的 HTTP REST API 接口，是集群控制的入口</li>\n<li>也是集群中唯一与 Etcd 集群进行交互的核心组件<blockquote>\n<p>Etcd 集群是分布式键值存储集群，提供了可靠的强一致性服务发现</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kube-controller-manager\"><a href=\"#kube-controller-manager\" class=\"headerlink\" title=\"kube-controller-manager\"></a>kube-controller-manager</h3><ul>\n<li>集群中所有资源对象的自动化控制中心</li>\n<li>每个控制器通过 kube-apiserver 组件提供的接口实时监控整个集群每个资源对象的当前状态，当因发生各种故障而导致系统状态出现变化时，会尝试将系统状态修复到“期望状态”</li>\n<li>Controller Manager 具备高可用性（多实例同时运行）<blockquote>\n<p>即基于 Etcd 集群上的分布式锁实现领导者选举机制，多实例同时运行，通过 kube-apiserver 提供的资源锁进行选举竞争。抢先获取锁的实例被称为 Leader 节点（即领导者节点），并运行该组件的主逻辑，而未获取锁的实例被称为 Candidate 节点（即候选节点），运行时处于阻塞状态。在 Leader 节点因某些原因退出后，Candidate 节点则通过领导者选举机制参与竞选，成为 Leader 节点后接替该组件的工作</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kube-scheduler\"><a href=\"#kube-scheduler\" class=\"headerlink\" title=\"kube-scheduler\"></a>kube-scheduler</h3><ul>\n<li>集群中 Pod 资源对象的调度服务</li>\n<li>kube-scheduler 具备高可用性（多实例同时运行）具体同上<blockquote>\n<p>具体调度我会在后面仔细整理，里面其实很有趣好玩</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"kubelet\"><a href=\"#kubelet\" class=\"headerlink\" title=\"kubelet\"></a>kubelet</h3><ul>\n<li>负责管理节点上容器的创建、删除、启停等任务，与 Master 节点进行通信</li>\n</ul>\n<h3 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h3><ul>\n<li>负责 kubernetes 服务的通信及负载均衡服务</li>\n<li>通过 iptables/ipvs 等配置负载均衡器，为一组 pod 提供统一的 TCP/UDP 流量转发和负载均衡功能</li>\n</ul>\n<h3 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h3><ul>\n<li>负责容器的基础管理服务，接受 kubelet 组件的指令</li>\n</ul>\n<h3 id=\"client-go\"><a href=\"#client-go\" class=\"headerlink\" title=\"client-go\"></a>client-go</h3><ul>\n<li>是从 kubernetes 代码中单独抽离出来的包，并作为官方提供的 Go 语言客户端发挥作用</li>\n<li>kubernetes 系统的其他组件与 kubernetes API Server 通信的方式也是基于 client-go 实现<blockquote>\n<p>因此在基于 kubernetes 做二次开发的过程中，建议通过 client-go 来实现与 kubernetes API Server 的交互过程</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Kubernetes-Project-Layout设计\"><a href=\"#Kubernetes-Project-Layout设计\" class=\"headerlink\" title=\"Kubernetes Project Layout设计\"></a>Kubernetes Project Layout设计</h2><table>\n<thead>\n<tr>\n<th>源码目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmd/</td>\n<td>存放可执行文件的代码入口，每个可执行文件都会对应一个main函数</td>\n</tr>\n<tr>\n<td>pkg/</td>\n<td>存放核心库代码， 可被项目内外部直接饮用</td>\n</tr>\n<tr>\n<td>vendor/</td>\n<td>存放项目的依赖库代码，一般为第三方库代码</td>\n</tr>\n<tr>\n<td>api/</td>\n<td>存放 OpenAPI/Swagger 的 spec 文件，包括 Json, Protocol 的定义等</td>\n</tr>\n<tr>\n<td>build/</td>\n<td>存放构建相关的脚本</td>\n</tr>\n<tr>\n<td>test/</td>\n<td>存放测试工具以及测试数据</td>\n</tr>\n<tr>\n<td>docs/</td>\n<td>存放设计或用户使用文档</td>\n</tr>\n<tr>\n<td>hack/</td>\n<td>存放与构建和测试相关的脚本</td>\n</tr>\n<tr>\n<td>third_party/</td>\n<td>存放第三方工具、代码和组件</td>\n</tr>\n<tr>\n<td>plugin/</td>\n<td>存放 Kubernetes 插件代码目录，例如认证、授权等相关插件</td>\n</tr>\n<tr>\n<td>staging/</td>\n<td>存放部分核心库的暂存目录</td>\n</tr>\n<tr>\n<td>translations/</td>\n<td>存放用于支持不同语言的相关文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"Kube-apiserver的初始化过程\"><a href=\"#Kube-apiserver的初始化过程\" class=\"headerlink\" title=\"Kube-apiserver的初始化过程\"></a>Kube-apiserver的初始化过程</h2><ol>\n<li><strong>rand.Seed</strong>: 组件中的全局随机数生成对象。</li>\n<li><strong>app.NewCommand</strong>: 实例化命令行参数。通过 flags 对命令行参数进行解析并存储至 Options 对象中。</li>\n<li><strong>logs.InitLogs</strong>: 实例化日志对象，用于日志管理。</li>\n<li><strong>command.Execute</strong>: 组件进程运行的逻辑。运行前通过 Complete 函数填充默认参数，通过 Validate 函数验证所有参数，最后通过 Run 函数持久运行。只有当进程收到退出信号时，进程才会退出。<blockquote>\n<p>tips: Kubernetes 其他组件的 cmd 设计与之类似。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Kubernetes构建过程","date":"2020-11-12T02:34:42.000Z","_content":"\n## 代码生成器\n\n### 举例5个代码生成器\n\n代码生成器 | 说明 \n--- | ---\nconversion-gen | 自动生成 Convert 函数的代码生成器，用于资源对象的版本转换函数\ndeepcopy-gen | 自动生成 DeepCopy 函数的代码生成器，用于资源对象的深复制函数\ndefaulter-gen | 自动生成 Defaulter 函数的代码生成器，用于资源对象的默认值函数\ngo-bindata | 是一个第三方工具，它能够将静态资源文件嵌入 Go 语言中\nopenapi-gen | 自动生成 OpenAPI 定义文件的代码生成器\n\n### Tags \n\n代码生成器通过 Tags(标签)来识别一个包是否需要生成代码及确定生成代码的方式，Kubernetes 提供的 Tags 可以分为如下两种，Tags 被定义在注释中。\n\n#### 全局 Tags\n\n* 定义在每个包的 doc.go文件中，对整个包中的类型自动生成代码\n* 代码示例如下：\n\n```\n// +k8s:deepcopy-gen=package\n// +groupName=example.com\n```\n\n该示例表示为包中的每个类型自动生成 DeepCopy 函数，其中// +groupName定义了资源组名称，资源组名称一般用域名形式表示\n\n#### 局部 Tags\n\n* 定义在 Go 语言的类型声明上方，只对指定的类型自动生成代码\n* 代码示例如下：\n\n```\n// +genclient\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n\n// Pod...\n```\n\n该代码示例局部 Tags 定义在 Pod 资源类型的上方，定义并执行两个代码生成器。\n> Kubernetes 的 API 文档生成器会根据类型声明的注释信息生成文档，为了避免 Tags 信息出现在文档中，所以将 Tags 定义在注释的上方并空一行\n\n#### deepcopy-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 DeepCopy 相关函数，这些函数可以有效地执行每种类型的深复制操作。\n\n有如下几种 Tags 形式：\n* 为整个包生成 DeepCopy 相关函数：\n```\n// +k8s:deepcopy-gen=package\n```\n* 为单个类型生成 DeepCopy 相关函数：\n```\n// +k8s:deepcopy-gen=true\n```\n* 为整个包生成 DeepCopy 相关函数时，可以忽略单个类型：\n```\n// +k8s:deepcopy-gen=false\n```\n\n* deepcopy-gen 会遍历包中所有类型，若类型为 types.Struct,则会为该类型生成深复制函数。\n\n#### defaulter-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 Defaulter 相关函数，这些函数可以为资源对象生成默认值。\n\n* 为拥有不同属性的类型生成不同的 Defaulter 相关函数，其 Tags 形式如下：\n\n```\n// +k8s:defaulter-gen=TypeMeta/ListMeta/ObjectMeta\n```\n\n* defaulter-gen-input 说明当前包会依赖于指定的路径包，代码示例如下：\n\n```\n// +k8s:defaulter-gen-input=../../../vendor/k8s.io/api/rbac/v1\n```\n\n* defaulter-gen 会遍历包中所有类型，若类型属性拥有以上三种特定类型，则为该类型生成 Defaulter 函数，并为其生成 RegisterDefaults 注册函数。\n\n#### conversion-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 Convert 相关函数，这些函数可以为对象在内部和外部类型之间提供转换函数。\n\n其 Tags 形式如下：\n\n* 为整个包生成 Convert 相关函数\n\n```\n// +k8s:conversion-gen=<peer-pkg>\n# <peer-pkg> 用于定义包的导入路径\n```\n\n* 为整个包生成 Convert 相关函数且依赖其他包时\n\n```\n// +k8s:conversion-gen-external-types=<type-pkg>\n# <type-pkg> 用于定义其他包的路径\n```\n\n* 在排除某个属性后生成 Convert 相关函数\n\n```\n// +k8s:conversion-gen=false\n```\n\n* conversion-gen 会遍历包中所有类型，若类型为 types.Struct 且过滤掉了私有 Struct 类型，则为该类型生成 Convert 函数，并为该类型同时生成 RegisterConversions 注册函数\n\n#### openapi-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 OpenAPI 定义文件，该文件用于 kube-apiserver 服务上的 OpenAPI 规范的生成。\n\n* 为特定类型或包生成 OpenAPI 定义文件时\n\n```\n// +k8s:openapi-gen=true\n```\n\n* 排除为特定类型或包生成 OpenAPI 定义时\n\n```\n// +k8s:openapi-gen=false\n```\n\n* openapi-gen 会遍历包中所有类型，若类型为 types.Struct 并忽略其他类型，则为 types.Struct 类型生成 OpenAPI 定义文件\n\n#### go-bindata 代码生成器\n\n给定一个静态资源目录路径作为输入源，go-bindata 可以为其生成 go 文件\n\n## 代码生成过程\n\n前面所提到的五种代码生成过程如下图所示\n\n![代码生成过程](../image/k8s代码生成过程图.jpg)\n\n* .todo 文件相当于临时文件，用来存放被 Tags 标记过的包。通过 shell 的 grep 命令可以将所有代码包中被 Tags 标记过的包目录记录在 .todo 文件中，这样可以方便记录哪些包需要使用代码生成功能。\n\n## gengo 代码生成核心实现\n\nKubernetes 的代码生成器都是在 k8s.io/gengo 包的基础上实现的，代码生成器都会通过一个输入包路径（--input-dirs）参数，根据 gengo 的词法分析、抽象语法树等操作，最终生成代码并输出（--output-file-base），gengo 代码目录结构说明如下：\n\n* args: 代码生成器的通用 flags 参数。\n\n* examples: 包含 deepcopy-gen、defaulter-gen、import-boss、set-gen等代码生成器的生成逻辑。\n\n* generator: 代码生成器通用接口 Generator。\n\n* namer: 命名管理，支持创建不同类型的名称。例如，根据类型生成名称，定义 type foo string，能够生成 func FooPrinter(f *foo){Print(string(*f))}\n\n* parser: 代码解析器，用来构造抽象语法树。\n\n* types: 类型系统，用于数据类型的定义及类型检查算法的实现。\n\n### 代码生成逻辑与编译器原理\n\n![gengo代码生成原理](../image/gengo代码生成原理.jpg)\n\n* Gather The Info: 收集 Go 语言源码文件信息及内容\n\n* Lexer/Parser: 通过 Lexer 词法分析器进行一系列词法分析\n\n* AST Generator: 生成抽象语法树\n\n* Type Checker: 对抽象语法树进行类型检查\n\n* Code Generation: 生成代码，将抽象语法树转换为机器代码\n\n### 收集 Go 包信息\n\n* 采用 go/build 工具，构建标签机制来构建约束条件，例如看代码时常看到类似于//+build linux darwin 的包注释信息，这就是 Go 语言编译时的约束条件，其也被称为条件编译。\n\n> Go 语言的条件编译有两种定义方法：\n> * 构建标签：在源码里添加注释信息，比如// +build linux,该标签决定了源码文件只能在 Linux 平台上才会被编译\n> * 文件后缀：改变 Go 语言代码文件的后缀，比如 foo_linux.go，该后缀决定了源码文件只在 Linux 平台上才会被编译\n\n* gengo 收集 Go 包信息可分为两步：第一步，为生成的代码文件设置构建标签；第二步，收集 Go 包信息并读取源码内容。\n\n### 代码解析\n\n代码解析流程分为三步：\n\n1. 通过标准库 go/tokens 提供的 Lexer 词法分析器对代码文本进行词法分析，最终得到 Tokens;\n\n2. 通过标准库 go/parser 和 go/ast 将 Tokens 构建为抽象语法树（AST）；\n\n3. 通过标准库 go/types 下的 Check 方法进行抽象语法树类型检查，完成代码解析过程；\n\n### 类型系统\n\ngengo 的类型系统在 Go 语言本身的类型系统之上归类并添加了几种类型。在 Go 语言标准库 go/types 的基础上进行封装。所有的类型都通过 vendor/k8s.io/gengo/parser/parse.go 的 walkType 方法进行识别。gengo 类型系统中的 Struct、Map、Pointer、Interface等，与 Go 语言提供的类型并无差别。也有 gengo 与 Go 语言不同的类型，例如 Builtin、Alias、DeclarationOf、Unknown、Unsupported及Protobuf。另外，Signature并非是一个类型，它依赖于 Func 函数类型，用来描述 Func 函数的接收参数信息和返回值信息等。\n\n如下举例：\n#### Builtin（内置类型）\n\nBuiltin 将多种 Base 类型归类成一种类型，以下几种类型在 gengo 中统称为 Builtin 类型。\n\n* 内置字符串类型——string\n* 内置布尔类型——bool\n* 内置数字类型——int、float、complex64等\n\n#### Alias（别名类型）\n\n举例如下：\n\n```\ntype T1 struct{}\ntype T2 = T1\n```\n\n这里的 T2 相当于 T1 的别名，但在 Go 语言标准库的 reflect（反射）包识别 T2 的原始类型时，会将它识别为 Struct 类型，而无法将它识别为 Alias 类型，原因是，Alias 类型在运行时是不可见的。由于 gengo 依赖于 go/types 的 Named 类型，所以要让 Alias 类型在运行时可被识别，在声明时将 TypeName 对象绑定到 Named 类型即可。\n\n#### DeclarationOf（声明类型）\n\n它并不是严格意义上的类型，它是声明过的函数、全局变量、或常量，但未被引用过。\n\n#### Unknown（未知类型）\n\n当对象匹配不到以上所有类型的时候，它就是 Unknwn 类型的。\n\n#### Unsupported（未支持类型）\n\n当对象属于 Unkonwn 类型时，则会设置对象为 Unsupported 类型，并在其使用过程中报错。\n\n#### Protobuf（Protobuf 类型）\n\n由 go-to-protobuf 代码生成器单独处理的类型。\n\n### 代码生成\n\nKubernetes 代码生成器生成的是 Go 语言代码。\n\nGenerator 接口字段说明如下：\n> 位于 vendor/k8s.io/gengo/generator/generator.go 中\n\n* Name: 代码生成器的名称，返回值为生成的目标代码文件名的前缀，例如 deepcopy-gen 的前缀为 zz_generated.deepcopy\n* Filter: 类型过滤器，过滤掉不符合当前代码生成器所需的类型\n* Namers: 命名管理器，支出创建不同类型的名称。例如，根据类型生成名称\n* Init: 代码生成器生成代码之前的初始化操作\n* Finalize: 代码生成器生成代码之后的收尾操作\n* PackageVars: 生成全局变量代码块，例如 var...\n* PackageConsts: 生成常量代码块，例如 consts...\n* GenerateType: 生成代码块，根据传入的类型生成代码\n* Imports: 获得需要生成的 import 代码块\n* Filename: 生成目标代码文件的全名，例如 deepcopy-gen 的 zz_generated.deepcopy.go\n* FileType: 生成代码文件的类型\n> 如果代码生成器没有实现某些方法，则继承默认代码生成器(DefaultGen)的方法\n\n下面以 deepcopy-gen 代码生成器为例，其代码生成原理如下：\n\n首先通过 build.sh 脚本，手动构建 deepcopy-gen 代码生成器二进制文件，然后将需要生成的包 k8s.io/kubernetes/pkg/apis/abac/v1beta1 作为 deepcopy-gen 的输入源，并在内部进行一系列解析，最终通过 -O 参数生成名为 zz_generated.deepcopy.go 的代码文件,以下分步详解：\n\n1. 实例化 generator.Packages 对象\n\n* deepcopy-gen 代码生成器根据输入的包的目录路径（即输入源），实例化 generator.Packages 对象，根据 generator.Packages 结构生成代码；\n* 最主要的是 GeneratorFunc 定义了 Generator 接口的实现，\n\n2. 执行代码生成\n\n在 gengo 中，generator 定义代码生成器通用接口 Generator。通过 ExecutePackage 函数，调用不同代码生成器的 Generator 接口方法，并生成代码。\n\nExecutePackage 代码生成执行流程：生成 Header 代码块 -> 生成 Imports 代码块 -> 生成 Vars 全局变量代码块 -> 生成 Consts 常量代码块 -> 生成 Body 代码块。最后，调用 assembler.AssembleFile 函数，将生成的代码块信息写入 zz_generated.deepcopy.go 文件，生成 pkg/apis/abac/v1beta1/zz_generated.deepcopy.go 代码结构。\n","source":"_posts/Kubernetes构建过程.md","raw":"---\ntitle: Kubernetes构建过程\ndate: 2020-11-12 10:34:42\ntags: [Kubernetes, Kubernetes构建]\ncategories: Kubernetes源码解析\n---\n\n## 代码生成器\n\n### 举例5个代码生成器\n\n代码生成器 | 说明 \n--- | ---\nconversion-gen | 自动生成 Convert 函数的代码生成器，用于资源对象的版本转换函数\ndeepcopy-gen | 自动生成 DeepCopy 函数的代码生成器，用于资源对象的深复制函数\ndefaulter-gen | 自动生成 Defaulter 函数的代码生成器，用于资源对象的默认值函数\ngo-bindata | 是一个第三方工具，它能够将静态资源文件嵌入 Go 语言中\nopenapi-gen | 自动生成 OpenAPI 定义文件的代码生成器\n\n### Tags \n\n代码生成器通过 Tags(标签)来识别一个包是否需要生成代码及确定生成代码的方式，Kubernetes 提供的 Tags 可以分为如下两种，Tags 被定义在注释中。\n\n#### 全局 Tags\n\n* 定义在每个包的 doc.go文件中，对整个包中的类型自动生成代码\n* 代码示例如下：\n\n```\n// +k8s:deepcopy-gen=package\n// +groupName=example.com\n```\n\n该示例表示为包中的每个类型自动生成 DeepCopy 函数，其中// +groupName定义了资源组名称，资源组名称一般用域名形式表示\n\n#### 局部 Tags\n\n* 定义在 Go 语言的类型声明上方，只对指定的类型自动生成代码\n* 代码示例如下：\n\n```\n// +genclient\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n\n// Pod...\n```\n\n该代码示例局部 Tags 定义在 Pod 资源类型的上方，定义并执行两个代码生成器。\n> Kubernetes 的 API 文档生成器会根据类型声明的注释信息生成文档，为了避免 Tags 信息出现在文档中，所以将 Tags 定义在注释的上方并空一行\n\n#### deepcopy-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 DeepCopy 相关函数，这些函数可以有效地执行每种类型的深复制操作。\n\n有如下几种 Tags 形式：\n* 为整个包生成 DeepCopy 相关函数：\n```\n// +k8s:deepcopy-gen=package\n```\n* 为单个类型生成 DeepCopy 相关函数：\n```\n// +k8s:deepcopy-gen=true\n```\n* 为整个包生成 DeepCopy 相关函数时，可以忽略单个类型：\n```\n// +k8s:deepcopy-gen=false\n```\n\n* deepcopy-gen 会遍历包中所有类型，若类型为 types.Struct,则会为该类型生成深复制函数。\n\n#### defaulter-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 Defaulter 相关函数，这些函数可以为资源对象生成默认值。\n\n* 为拥有不同属性的类型生成不同的 Defaulter 相关函数，其 Tags 形式如下：\n\n```\n// +k8s:defaulter-gen=TypeMeta/ListMeta/ObjectMeta\n```\n\n* defaulter-gen-input 说明当前包会依赖于指定的路径包，代码示例如下：\n\n```\n// +k8s:defaulter-gen-input=../../../vendor/k8s.io/api/rbac/v1\n```\n\n* defaulter-gen 会遍历包中所有类型，若类型属性拥有以上三种特定类型，则为该类型生成 Defaulter 函数，并为其生成 RegisterDefaults 注册函数。\n\n#### conversion-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 Convert 相关函数，这些函数可以为对象在内部和外部类型之间提供转换函数。\n\n其 Tags 形式如下：\n\n* 为整个包生成 Convert 相关函数\n\n```\n// +k8s:conversion-gen=<peer-pkg>\n# <peer-pkg> 用于定义包的导入路径\n```\n\n* 为整个包生成 Convert 相关函数且依赖其他包时\n\n```\n// +k8s:conversion-gen-external-types=<type-pkg>\n# <type-pkg> 用于定义其他包的路径\n```\n\n* 在排除某个属性后生成 Convert 相关函数\n\n```\n// +k8s:conversion-gen=false\n```\n\n* conversion-gen 会遍历包中所有类型，若类型为 types.Struct 且过滤掉了私有 Struct 类型，则为该类型生成 Convert 函数，并为该类型同时生成 RegisterConversions 注册函数\n\n#### openapi-gen 代码生成器\n\n给定一个包的目录路径作为输入源，它可以为其生成 OpenAPI 定义文件，该文件用于 kube-apiserver 服务上的 OpenAPI 规范的生成。\n\n* 为特定类型或包生成 OpenAPI 定义文件时\n\n```\n// +k8s:openapi-gen=true\n```\n\n* 排除为特定类型或包生成 OpenAPI 定义时\n\n```\n// +k8s:openapi-gen=false\n```\n\n* openapi-gen 会遍历包中所有类型，若类型为 types.Struct 并忽略其他类型，则为 types.Struct 类型生成 OpenAPI 定义文件\n\n#### go-bindata 代码生成器\n\n给定一个静态资源目录路径作为输入源，go-bindata 可以为其生成 go 文件\n\n## 代码生成过程\n\n前面所提到的五种代码生成过程如下图所示\n\n![代码生成过程](../image/k8s代码生成过程图.jpg)\n\n* .todo 文件相当于临时文件，用来存放被 Tags 标记过的包。通过 shell 的 grep 命令可以将所有代码包中被 Tags 标记过的包目录记录在 .todo 文件中，这样可以方便记录哪些包需要使用代码生成功能。\n\n## gengo 代码生成核心实现\n\nKubernetes 的代码生成器都是在 k8s.io/gengo 包的基础上实现的，代码生成器都会通过一个输入包路径（--input-dirs）参数，根据 gengo 的词法分析、抽象语法树等操作，最终生成代码并输出（--output-file-base），gengo 代码目录结构说明如下：\n\n* args: 代码生成器的通用 flags 参数。\n\n* examples: 包含 deepcopy-gen、defaulter-gen、import-boss、set-gen等代码生成器的生成逻辑。\n\n* generator: 代码生成器通用接口 Generator。\n\n* namer: 命名管理，支持创建不同类型的名称。例如，根据类型生成名称，定义 type foo string，能够生成 func FooPrinter(f *foo){Print(string(*f))}\n\n* parser: 代码解析器，用来构造抽象语法树。\n\n* types: 类型系统，用于数据类型的定义及类型检查算法的实现。\n\n### 代码生成逻辑与编译器原理\n\n![gengo代码生成原理](../image/gengo代码生成原理.jpg)\n\n* Gather The Info: 收集 Go 语言源码文件信息及内容\n\n* Lexer/Parser: 通过 Lexer 词法分析器进行一系列词法分析\n\n* AST Generator: 生成抽象语法树\n\n* Type Checker: 对抽象语法树进行类型检查\n\n* Code Generation: 生成代码，将抽象语法树转换为机器代码\n\n### 收集 Go 包信息\n\n* 采用 go/build 工具，构建标签机制来构建约束条件，例如看代码时常看到类似于//+build linux darwin 的包注释信息，这就是 Go 语言编译时的约束条件，其也被称为条件编译。\n\n> Go 语言的条件编译有两种定义方法：\n> * 构建标签：在源码里添加注释信息，比如// +build linux,该标签决定了源码文件只能在 Linux 平台上才会被编译\n> * 文件后缀：改变 Go 语言代码文件的后缀，比如 foo_linux.go，该后缀决定了源码文件只在 Linux 平台上才会被编译\n\n* gengo 收集 Go 包信息可分为两步：第一步，为生成的代码文件设置构建标签；第二步，收集 Go 包信息并读取源码内容。\n\n### 代码解析\n\n代码解析流程分为三步：\n\n1. 通过标准库 go/tokens 提供的 Lexer 词法分析器对代码文本进行词法分析，最终得到 Tokens;\n\n2. 通过标准库 go/parser 和 go/ast 将 Tokens 构建为抽象语法树（AST）；\n\n3. 通过标准库 go/types 下的 Check 方法进行抽象语法树类型检查，完成代码解析过程；\n\n### 类型系统\n\ngengo 的类型系统在 Go 语言本身的类型系统之上归类并添加了几种类型。在 Go 语言标准库 go/types 的基础上进行封装。所有的类型都通过 vendor/k8s.io/gengo/parser/parse.go 的 walkType 方法进行识别。gengo 类型系统中的 Struct、Map、Pointer、Interface等，与 Go 语言提供的类型并无差别。也有 gengo 与 Go 语言不同的类型，例如 Builtin、Alias、DeclarationOf、Unknown、Unsupported及Protobuf。另外，Signature并非是一个类型，它依赖于 Func 函数类型，用来描述 Func 函数的接收参数信息和返回值信息等。\n\n如下举例：\n#### Builtin（内置类型）\n\nBuiltin 将多种 Base 类型归类成一种类型，以下几种类型在 gengo 中统称为 Builtin 类型。\n\n* 内置字符串类型——string\n* 内置布尔类型——bool\n* 内置数字类型——int、float、complex64等\n\n#### Alias（别名类型）\n\n举例如下：\n\n```\ntype T1 struct{}\ntype T2 = T1\n```\n\n这里的 T2 相当于 T1 的别名，但在 Go 语言标准库的 reflect（反射）包识别 T2 的原始类型时，会将它识别为 Struct 类型，而无法将它识别为 Alias 类型，原因是，Alias 类型在运行时是不可见的。由于 gengo 依赖于 go/types 的 Named 类型，所以要让 Alias 类型在运行时可被识别，在声明时将 TypeName 对象绑定到 Named 类型即可。\n\n#### DeclarationOf（声明类型）\n\n它并不是严格意义上的类型，它是声明过的函数、全局变量、或常量，但未被引用过。\n\n#### Unknown（未知类型）\n\n当对象匹配不到以上所有类型的时候，它就是 Unknwn 类型的。\n\n#### Unsupported（未支持类型）\n\n当对象属于 Unkonwn 类型时，则会设置对象为 Unsupported 类型，并在其使用过程中报错。\n\n#### Protobuf（Protobuf 类型）\n\n由 go-to-protobuf 代码生成器单独处理的类型。\n\n### 代码生成\n\nKubernetes 代码生成器生成的是 Go 语言代码。\n\nGenerator 接口字段说明如下：\n> 位于 vendor/k8s.io/gengo/generator/generator.go 中\n\n* Name: 代码生成器的名称，返回值为生成的目标代码文件名的前缀，例如 deepcopy-gen 的前缀为 zz_generated.deepcopy\n* Filter: 类型过滤器，过滤掉不符合当前代码生成器所需的类型\n* Namers: 命名管理器，支出创建不同类型的名称。例如，根据类型生成名称\n* Init: 代码生成器生成代码之前的初始化操作\n* Finalize: 代码生成器生成代码之后的收尾操作\n* PackageVars: 生成全局变量代码块，例如 var...\n* PackageConsts: 生成常量代码块，例如 consts...\n* GenerateType: 生成代码块，根据传入的类型生成代码\n* Imports: 获得需要生成的 import 代码块\n* Filename: 生成目标代码文件的全名，例如 deepcopy-gen 的 zz_generated.deepcopy.go\n* FileType: 生成代码文件的类型\n> 如果代码生成器没有实现某些方法，则继承默认代码生成器(DefaultGen)的方法\n\n下面以 deepcopy-gen 代码生成器为例，其代码生成原理如下：\n\n首先通过 build.sh 脚本，手动构建 deepcopy-gen 代码生成器二进制文件，然后将需要生成的包 k8s.io/kubernetes/pkg/apis/abac/v1beta1 作为 deepcopy-gen 的输入源，并在内部进行一系列解析，最终通过 -O 参数生成名为 zz_generated.deepcopy.go 的代码文件,以下分步详解：\n\n1. 实例化 generator.Packages 对象\n\n* deepcopy-gen 代码生成器根据输入的包的目录路径（即输入源），实例化 generator.Packages 对象，根据 generator.Packages 结构生成代码；\n* 最主要的是 GeneratorFunc 定义了 Generator 接口的实现，\n\n2. 执行代码生成\n\n在 gengo 中，generator 定义代码生成器通用接口 Generator。通过 ExecutePackage 函数，调用不同代码生成器的 Generator 接口方法，并生成代码。\n\nExecutePackage 代码生成执行流程：生成 Header 代码块 -> 生成 Imports 代码块 -> 生成 Vars 全局变量代码块 -> 生成 Consts 常量代码块 -> 生成 Body 代码块。最后，调用 assembler.AssembleFile 函数，将生成的代码块信息写入 zz_generated.deepcopy.go 文件，生成 pkg/apis/abac/v1beta1/zz_generated.deepcopy.go 代码结构。\n","slug":"Kubernetes构建过程","published":1,"updated":"2020-11-23T13:24:58.171Z","_id":"ckheaj9wc0000u88j48xngtfx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"代码生成器\"><a href=\"#代码生成器\" class=\"headerlink\" title=\"代码生成器\"></a>代码生成器</h2><h3 id=\"举例5个代码生成器\"><a href=\"#举例5个代码生成器\" class=\"headerlink\" title=\"举例5个代码生成器\"></a>举例5个代码生成器</h3><table>\n<thead>\n<tr>\n<th>代码生成器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conversion-gen</td>\n<td>自动生成 Convert 函数的代码生成器，用于资源对象的版本转换函数</td>\n</tr>\n<tr>\n<td>deepcopy-gen</td>\n<td>自动生成 DeepCopy 函数的代码生成器，用于资源对象的深复制函数</td>\n</tr>\n<tr>\n<td>defaulter-gen</td>\n<td>自动生成 Defaulter 函数的代码生成器，用于资源对象的默认值函数</td>\n</tr>\n<tr>\n<td>go-bindata</td>\n<td>是一个第三方工具，它能够将静态资源文件嵌入 Go 语言中</td>\n</tr>\n<tr>\n<td>openapi-gen</td>\n<td>自动生成 OpenAPI 定义文件的代码生成器</td>\n</tr>\n</tbody></table>\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><p>代码生成器通过 Tags(标签)来识别一个包是否需要生成代码及确定生成代码的方式，Kubernetes 提供的 Tags 可以分为如下两种，Tags 被定义在注释中。</p>\n<h4 id=\"全局-Tags\"><a href=\"#全局-Tags\" class=\"headerlink\" title=\"全局 Tags\"></a>全局 Tags</h4><ul>\n<li>定义在每个包的 doc.go文件中，对整个包中的类型自动生成代码</li>\n<li>代码示例如下：</li>\n</ul>\n<pre><code>// +k8s:deepcopy-gen=package\n// +groupName=example.com</code></pre>\n<p>该示例表示为包中的每个类型自动生成 DeepCopy 函数，其中// +groupName定义了资源组名称，资源组名称一般用域名形式表示</p>\n<h4 id=\"局部-Tags\"><a href=\"#局部-Tags\" class=\"headerlink\" title=\"局部 Tags\"></a>局部 Tags</h4><ul>\n<li>定义在 Go 语言的类型声明上方，只对指定的类型自动生成代码</li>\n<li>代码示例如下：</li>\n</ul>\n<pre><code>// +genclient\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n\n// Pod...</code></pre>\n<p>该代码示例局部 Tags 定义在 Pod 资源类型的上方，定义并执行两个代码生成器。</p>\n<blockquote>\n<p>Kubernetes 的 API 文档生成器会根据类型声明的注释信息生成文档，为了避免 Tags 信息出现在文档中，所以将 Tags 定义在注释的上方并空一行</p>\n</blockquote>\n<h4 id=\"deepcopy-gen-代码生成器\"><a href=\"#deepcopy-gen-代码生成器\" class=\"headerlink\" title=\"deepcopy-gen 代码生成器\"></a>deepcopy-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 DeepCopy 相关函数，这些函数可以有效地执行每种类型的深复制操作。</p>\n<p>有如下几种 Tags 形式：</p>\n<ul>\n<li><p>为整个包生成 DeepCopy 相关函数：</p>\n<pre><code>// +k8s:deepcopy-gen=package</code></pre>\n</li>\n<li><p>为单个类型生成 DeepCopy 相关函数：</p>\n<pre><code>// +k8s:deepcopy-gen=true</code></pre>\n</li>\n<li><p>为整个包生成 DeepCopy 相关函数时，可以忽略单个类型：</p>\n<pre><code>// +k8s:deepcopy-gen=false</code></pre>\n</li>\n<li><p>deepcopy-gen 会遍历包中所有类型，若类型为 types.Struct,则会为该类型生成深复制函数。</p>\n</li>\n</ul>\n<h4 id=\"defaulter-gen-代码生成器\"><a href=\"#defaulter-gen-代码生成器\" class=\"headerlink\" title=\"defaulter-gen 代码生成器\"></a>defaulter-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 Defaulter 相关函数，这些函数可以为资源对象生成默认值。</p>\n<ul>\n<li>为拥有不同属性的类型生成不同的 Defaulter 相关函数，其 Tags 形式如下：</li>\n</ul>\n<pre><code>// +k8s:defaulter-gen=TypeMeta/ListMeta/ObjectMeta</code></pre>\n<ul>\n<li>defaulter-gen-input 说明当前包会依赖于指定的路径包，代码示例如下：</li>\n</ul>\n<pre><code>// +k8s:defaulter-gen-input=../../../vendor/k8s.io/api/rbac/v1</code></pre>\n<ul>\n<li>defaulter-gen 会遍历包中所有类型，若类型属性拥有以上三种特定类型，则为该类型生成 Defaulter 函数，并为其生成 RegisterDefaults 注册函数。</li>\n</ul>\n<h4 id=\"conversion-gen-代码生成器\"><a href=\"#conversion-gen-代码生成器\" class=\"headerlink\" title=\"conversion-gen 代码生成器\"></a>conversion-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 Convert 相关函数，这些函数可以为对象在内部和外部类型之间提供转换函数。</p>\n<p>其 Tags 形式如下：</p>\n<ul>\n<li>为整个包生成 Convert 相关函数</li>\n</ul>\n<pre><code>// +k8s:conversion-gen=&lt;peer-pkg&gt;\n# &lt;peer-pkg&gt; 用于定义包的导入路径</code></pre>\n<ul>\n<li>为整个包生成 Convert 相关函数且依赖其他包时</li>\n</ul>\n<pre><code>// +k8s:conversion-gen-external-types=&lt;type-pkg&gt;\n# &lt;type-pkg&gt; 用于定义其他包的路径</code></pre>\n<ul>\n<li>在排除某个属性后生成 Convert 相关函数</li>\n</ul>\n<pre><code>// +k8s:conversion-gen=false</code></pre>\n<ul>\n<li>conversion-gen 会遍历包中所有类型，若类型为 types.Struct 且过滤掉了私有 Struct 类型，则为该类型生成 Convert 函数，并为该类型同时生成 RegisterConversions 注册函数</li>\n</ul>\n<h4 id=\"openapi-gen-代码生成器\"><a href=\"#openapi-gen-代码生成器\" class=\"headerlink\" title=\"openapi-gen 代码生成器\"></a>openapi-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 OpenAPI 定义文件，该文件用于 kube-apiserver 服务上的 OpenAPI 规范的生成。</p>\n<ul>\n<li>为特定类型或包生成 OpenAPI 定义文件时</li>\n</ul>\n<pre><code>// +k8s:openapi-gen=true</code></pre>\n<ul>\n<li>排除为特定类型或包生成 OpenAPI 定义时</li>\n</ul>\n<pre><code>// +k8s:openapi-gen=false</code></pre>\n<ul>\n<li>openapi-gen 会遍历包中所有类型，若类型为 types.Struct 并忽略其他类型，则为 types.Struct 类型生成 OpenAPI 定义文件</li>\n</ul>\n<h4 id=\"go-bindata-代码生成器\"><a href=\"#go-bindata-代码生成器\" class=\"headerlink\" title=\"go-bindata 代码生成器\"></a>go-bindata 代码生成器</h4><p>给定一个静态资源目录路径作为输入源，go-bindata 可以为其生成 go 文件</p>\n<h2 id=\"代码生成过程\"><a href=\"#代码生成过程\" class=\"headerlink\" title=\"代码生成过程\"></a>代码生成过程</h2><p>前面所提到的五种代码生成过程如下图所示</p>\n<p><img src=\"../image/k8s%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg\" alt=\"代码生成过程\"></p>\n<ul>\n<li>.todo 文件相当于临时文件，用来存放被 Tags 标记过的包。通过 shell 的 grep 命令可以将所有代码包中被 Tags 标记过的包目录记录在 .todo 文件中，这样可以方便记录哪些包需要使用代码生成功能。</li>\n</ul>\n<h2 id=\"gengo-代码生成核心实现\"><a href=\"#gengo-代码生成核心实现\" class=\"headerlink\" title=\"gengo 代码生成核心实现\"></a>gengo 代码生成核心实现</h2><p>Kubernetes 的代码生成器都是在 k8s.io/gengo 包的基础上实现的，代码生成器都会通过一个输入包路径（–input-dirs）参数，根据 gengo 的词法分析、抽象语法树等操作，最终生成代码并输出（–output-file-base），gengo 代码目录结构说明如下：</p>\n<ul>\n<li><p>args: 代码生成器的通用 flags 参数。</p>\n</li>\n<li><p>examples: 包含 deepcopy-gen、defaulter-gen、import-boss、set-gen等代码生成器的生成逻辑。</p>\n</li>\n<li><p>generator: 代码生成器通用接口 Generator。</p>\n</li>\n<li><p>namer: 命名管理，支持创建不同类型的名称。例如，根据类型生成名称，定义 type foo string，能够生成 func FooPrinter(f *foo){Print(string(*f))}</p>\n</li>\n<li><p>parser: 代码解析器，用来构造抽象语法树。</p>\n</li>\n<li><p>types: 类型系统，用于数据类型的定义及类型检查算法的实现。</p>\n</li>\n</ul>\n<h3 id=\"代码生成逻辑与编译器原理\"><a href=\"#代码生成逻辑与编译器原理\" class=\"headerlink\" title=\"代码生成逻辑与编译器原理\"></a>代码生成逻辑与编译器原理</h3><p><img src=\"../image/gengo%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8E%9F%E7%90%86.jpg\" alt=\"gengo代码生成原理\"></p>\n<ul>\n<li><p>Gather The Info: 收集 Go 语言源码文件信息及内容</p>\n</li>\n<li><p>Lexer/Parser: 通过 Lexer 词法分析器进行一系列词法分析</p>\n</li>\n<li><p>AST Generator: 生成抽象语法树</p>\n</li>\n<li><p>Type Checker: 对抽象语法树进行类型检查</p>\n</li>\n<li><p>Code Generation: 生成代码，将抽象语法树转换为机器代码</p>\n</li>\n</ul>\n<h3 id=\"收集-Go-包信息\"><a href=\"#收集-Go-包信息\" class=\"headerlink\" title=\"收集 Go 包信息\"></a>收集 Go 包信息</h3><ul>\n<li>采用 go/build 工具，构建标签机制来构建约束条件，例如看代码时常看到类似于//+build linux darwin 的包注释信息，这就是 Go 语言编译时的约束条件，其也被称为条件编译。</li>\n</ul>\n<blockquote>\n<p>Go 语言的条件编译有两种定义方法：</p>\n<ul>\n<li>构建标签：在源码里添加注释信息，比如// +build linux,该标签决定了源码文件只能在 Linux 平台上才会被编译</li>\n<li>文件后缀：改变 Go 语言代码文件的后缀，比如 foo_linux.go，该后缀决定了源码文件只在 Linux 平台上才会被编译</li>\n</ul>\n</blockquote>\n<ul>\n<li>gengo 收集 Go 包信息可分为两步：第一步，为生成的代码文件设置构建标签；第二步，收集 Go 包信息并读取源码内容。</li>\n</ul>\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3><p>代码解析流程分为三步：</p>\n<ol>\n<li><p>通过标准库 go/tokens 提供的 Lexer 词法分析器对代码文本进行词法分析，最终得到 Tokens;</p>\n</li>\n<li><p>通过标准库 go/parser 和 go/ast 将 Tokens 构建为抽象语法树（AST）；</p>\n</li>\n<li><p>通过标准库 go/types 下的 Check 方法进行抽象语法树类型检查，完成代码解析过程；</p>\n</li>\n</ol>\n<h3 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h3><p>gengo 的类型系统在 Go 语言本身的类型系统之上归类并添加了几种类型。在 Go 语言标准库 go/types 的基础上进行封装。所有的类型都通过 vendor/k8s.io/gengo/parser/parse.go 的 walkType 方法进行识别。gengo 类型系统中的 Struct、Map、Pointer、Interface等，与 Go 语言提供的类型并无差别。也有 gengo 与 Go 语言不同的类型，例如 Builtin、Alias、DeclarationOf、Unknown、Unsupported及Protobuf。另外，Signature并非是一个类型，它依赖于 Func 函数类型，用来描述 Func 函数的接收参数信息和返回值信息等。</p>\n<p>如下举例：</p>\n<h4 id=\"Builtin（内置类型）\"><a href=\"#Builtin（内置类型）\" class=\"headerlink\" title=\"Builtin（内置类型）\"></a>Builtin（内置类型）</h4><p>Builtin 将多种 Base 类型归类成一种类型，以下几种类型在 gengo 中统称为 Builtin 类型。</p>\n<ul>\n<li>内置字符串类型——string</li>\n<li>内置布尔类型——bool</li>\n<li>内置数字类型——int、float、complex64等</li>\n</ul>\n<h4 id=\"Alias（别名类型）\"><a href=\"#Alias（别名类型）\" class=\"headerlink\" title=\"Alias（别名类型）\"></a>Alias（别名类型）</h4><p>举例如下：</p>\n<pre><code>type T1 struct{}\ntype T2 = T1</code></pre>\n<p>这里的 T2 相当于 T1 的别名，但在 Go 语言标准库的 reflect（反射）包识别 T2 的原始类型时，会将它识别为 Struct 类型，而无法将它识别为 Alias 类型，原因是，Alias 类型在运行时是不可见的。由于 gengo 依赖于 go/types 的 Named 类型，所以要让 Alias 类型在运行时可被识别，在声明时将 TypeName 对象绑定到 Named 类型即可。</p>\n<h4 id=\"DeclarationOf（声明类型）\"><a href=\"#DeclarationOf（声明类型）\" class=\"headerlink\" title=\"DeclarationOf（声明类型）\"></a>DeclarationOf（声明类型）</h4><p>它并不是严格意义上的类型，它是声明过的函数、全局变量、或常量，但未被引用过。</p>\n<h4 id=\"Unknown（未知类型）\"><a href=\"#Unknown（未知类型）\" class=\"headerlink\" title=\"Unknown（未知类型）\"></a>Unknown（未知类型）</h4><p>当对象匹配不到以上所有类型的时候，它就是 Unknwn 类型的。</p>\n<h4 id=\"Unsupported（未支持类型）\"><a href=\"#Unsupported（未支持类型）\" class=\"headerlink\" title=\"Unsupported（未支持类型）\"></a>Unsupported（未支持类型）</h4><p>当对象属于 Unkonwn 类型时，则会设置对象为 Unsupported 类型，并在其使用过程中报错。</p>\n<h4 id=\"Protobuf（Protobuf-类型）\"><a href=\"#Protobuf（Protobuf-类型）\" class=\"headerlink\" title=\"Protobuf（Protobuf 类型）\"></a>Protobuf（Protobuf 类型）</h4><p>由 go-to-protobuf 代码生成器单独处理的类型。</p>\n<h3 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h3><p>Kubernetes 代码生成器生成的是 Go 语言代码。</p>\n<p>Generator 接口字段说明如下：</p>\n<blockquote>\n<p>位于 vendor/k8s.io/gengo/generator/generator.go 中</p>\n</blockquote>\n<ul>\n<li>Name: 代码生成器的名称，返回值为生成的目标代码文件名的前缀，例如 deepcopy-gen 的前缀为 zz_generated.deepcopy</li>\n<li>Filter: 类型过滤器，过滤掉不符合当前代码生成器所需的类型</li>\n<li>Namers: 命名管理器，支出创建不同类型的名称。例如，根据类型生成名称</li>\n<li>Init: 代码生成器生成代码之前的初始化操作</li>\n<li>Finalize: 代码生成器生成代码之后的收尾操作</li>\n<li>PackageVars: 生成全局变量代码块，例如 var…</li>\n<li>PackageConsts: 生成常量代码块，例如 consts…</li>\n<li>GenerateType: 生成代码块，根据传入的类型生成代码</li>\n<li>Imports: 获得需要生成的 import 代码块</li>\n<li>Filename: 生成目标代码文件的全名，例如 deepcopy-gen 的 zz_generated.deepcopy.go</li>\n<li>FileType: 生成代码文件的类型<blockquote>\n<p>如果代码生成器没有实现某些方法，则继承默认代码生成器(DefaultGen)的方法</p>\n</blockquote>\n</li>\n</ul>\n<p>下面以 deepcopy-gen 代码生成器为例，其代码生成原理如下：</p>\n<p>首先通过 build.sh 脚本，手动构建 deepcopy-gen 代码生成器二进制文件，然后将需要生成的包 k8s.io/kubernetes/pkg/apis/abac/v1beta1 作为 deepcopy-gen 的输入源，并在内部进行一系列解析，最终通过 -O 参数生成名为 zz_generated.deepcopy.go 的代码文件,以下分步详解：</p>\n<ol>\n<li>实例化 generator.Packages 对象</li>\n</ol>\n<ul>\n<li>deepcopy-gen 代码生成器根据输入的包的目录路径（即输入源），实例化 generator.Packages 对象，根据 generator.Packages 结构生成代码；</li>\n<li>最主要的是 GeneratorFunc 定义了 Generator 接口的实现，</li>\n</ul>\n<ol start=\"2\">\n<li>执行代码生成</li>\n</ol>\n<p>在 gengo 中，generator 定义代码生成器通用接口 Generator。通过 ExecutePackage 函数，调用不同代码生成器的 Generator 接口方法，并生成代码。</p>\n<p>ExecutePackage 代码生成执行流程：生成 Header 代码块 -&gt; 生成 Imports 代码块 -&gt; 生成 Vars 全局变量代码块 -&gt; 生成 Consts 常量代码块 -&gt; 生成 Body 代码块。最后，调用 assembler.AssembleFile 函数，将生成的代码块信息写入 zz_generated.deepcopy.go 文件，生成 pkg/apis/abac/v1beta1/zz_generated.deepcopy.go 代码结构。</p>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<h2 id=\"代码生成器\"><a href=\"#代码生成器\" class=\"headerlink\" title=\"代码生成器\"></a>代码生成器</h2><h3 id=\"举例5个代码生成器\"><a href=\"#举例5个代码生成器\" class=\"headerlink\" title=\"举例5个代码生成器\"></a>举例5个代码生成器</h3><table>\n<thead>\n<tr>\n<th>代码生成器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conversion-gen</td>\n<td>自动生成 Convert 函数的代码生成器，用于资源对象的版本转换函数</td>\n</tr>\n<tr>\n<td>deepcopy-gen</td>\n<td>自动生成 DeepCopy 函数的代码生成器，用于资源对象的深复制函数</td>\n</tr>\n<tr>\n<td>defaulter-gen</td>\n<td>自动生成 Defaulter 函数的代码生成器，用于资源对象的默认值函数</td>\n</tr>\n<tr>\n<td>go-bindata</td>\n<td>是一个第三方工具，它能够将静态资源文件嵌入 Go 语言中</td>\n</tr>\n<tr>\n<td>openapi-gen</td>\n<td>自动生成 OpenAPI 定义文件的代码生成器</td>\n</tr>\n</tbody></table>\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><p>代码生成器通过 Tags(标签)来识别一个包是否需要生成代码及确定生成代码的方式，Kubernetes 提供的 Tags 可以分为如下两种，Tags 被定义在注释中。</p>\n<h4 id=\"全局-Tags\"><a href=\"#全局-Tags\" class=\"headerlink\" title=\"全局 Tags\"></a>全局 Tags</h4><ul>\n<li>定义在每个包的 doc.go文件中，对整个包中的类型自动生成代码</li>\n<li>代码示例如下：</li>\n</ul>\n<pre><code>// +k8s:deepcopy-gen=package\n// +groupName=example.com</code></pre>\n<p>该示例表示为包中的每个类型自动生成 DeepCopy 函数，其中// +groupName定义了资源组名称，资源组名称一般用域名形式表示</p>\n<h4 id=\"局部-Tags\"><a href=\"#局部-Tags\" class=\"headerlink\" title=\"局部 Tags\"></a>局部 Tags</h4><ul>\n<li>定义在 Go 语言的类型声明上方，只对指定的类型自动生成代码</li>\n<li>代码示例如下：</li>\n</ul>\n<pre><code>// +genclient\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n\n// Pod...</code></pre>\n<p>该代码示例局部 Tags 定义在 Pod 资源类型的上方，定义并执行两个代码生成器。</p>\n<blockquote>\n<p>Kubernetes 的 API 文档生成器会根据类型声明的注释信息生成文档，为了避免 Tags 信息出现在文档中，所以将 Tags 定义在注释的上方并空一行</p>\n</blockquote>\n<h4 id=\"deepcopy-gen-代码生成器\"><a href=\"#deepcopy-gen-代码生成器\" class=\"headerlink\" title=\"deepcopy-gen 代码生成器\"></a>deepcopy-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 DeepCopy 相关函数，这些函数可以有效地执行每种类型的深复制操作。</p>\n<p>有如下几种 Tags 形式：</p>\n<ul>\n<li><p>为整个包生成 DeepCopy 相关函数：</p>\n<pre><code>// +k8s:deepcopy-gen=package</code></pre>\n</li>\n<li><p>为单个类型生成 DeepCopy 相关函数：</p>\n<pre><code>// +k8s:deepcopy-gen=true</code></pre>\n</li>\n<li><p>为整个包生成 DeepCopy 相关函数时，可以忽略单个类型：</p>\n<pre><code>// +k8s:deepcopy-gen=false</code></pre>\n</li>\n<li><p>deepcopy-gen 会遍历包中所有类型，若类型为 types.Struct,则会为该类型生成深复制函数。</p>\n</li>\n</ul>\n<h4 id=\"defaulter-gen-代码生成器\"><a href=\"#defaulter-gen-代码生成器\" class=\"headerlink\" title=\"defaulter-gen 代码生成器\"></a>defaulter-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 Defaulter 相关函数，这些函数可以为资源对象生成默认值。</p>\n<ul>\n<li>为拥有不同属性的类型生成不同的 Defaulter 相关函数，其 Tags 形式如下：</li>\n</ul>\n<pre><code>// +k8s:defaulter-gen=TypeMeta/ListMeta/ObjectMeta</code></pre>\n<ul>\n<li>defaulter-gen-input 说明当前包会依赖于指定的路径包，代码示例如下：</li>\n</ul>\n<pre><code>// +k8s:defaulter-gen-input=../../../vendor/k8s.io/api/rbac/v1</code></pre>\n<ul>\n<li>defaulter-gen 会遍历包中所有类型，若类型属性拥有以上三种特定类型，则为该类型生成 Defaulter 函数，并为其生成 RegisterDefaults 注册函数。</li>\n</ul>\n<h4 id=\"conversion-gen-代码生成器\"><a href=\"#conversion-gen-代码生成器\" class=\"headerlink\" title=\"conversion-gen 代码生成器\"></a>conversion-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 Convert 相关函数，这些函数可以为对象在内部和外部类型之间提供转换函数。</p>\n<p>其 Tags 形式如下：</p>\n<ul>\n<li>为整个包生成 Convert 相关函数</li>\n</ul>\n<pre><code>// +k8s:conversion-gen=&lt;peer-pkg&gt;\n# &lt;peer-pkg&gt; 用于定义包的导入路径</code></pre>\n<ul>\n<li>为整个包生成 Convert 相关函数且依赖其他包时</li>\n</ul>\n<pre><code>// +k8s:conversion-gen-external-types=&lt;type-pkg&gt;\n# &lt;type-pkg&gt; 用于定义其他包的路径</code></pre>\n<ul>\n<li>在排除某个属性后生成 Convert 相关函数</li>\n</ul>\n<pre><code>// +k8s:conversion-gen=false</code></pre>\n<ul>\n<li>conversion-gen 会遍历包中所有类型，若类型为 types.Struct 且过滤掉了私有 Struct 类型，则为该类型生成 Convert 函数，并为该类型同时生成 RegisterConversions 注册函数</li>\n</ul>\n<h4 id=\"openapi-gen-代码生成器\"><a href=\"#openapi-gen-代码生成器\" class=\"headerlink\" title=\"openapi-gen 代码生成器\"></a>openapi-gen 代码生成器</h4><p>给定一个包的目录路径作为输入源，它可以为其生成 OpenAPI 定义文件，该文件用于 kube-apiserver 服务上的 OpenAPI 规范的生成。</p>\n<ul>\n<li>为特定类型或包生成 OpenAPI 定义文件时</li>\n</ul>\n<pre><code>// +k8s:openapi-gen=true</code></pre>\n<ul>\n<li>排除为特定类型或包生成 OpenAPI 定义时</li>\n</ul>\n<pre><code>// +k8s:openapi-gen=false</code></pre>\n<ul>\n<li>openapi-gen 会遍历包中所有类型，若类型为 types.Struct 并忽略其他类型，则为 types.Struct 类型生成 OpenAPI 定义文件</li>\n</ul>\n<h4 id=\"go-bindata-代码生成器\"><a href=\"#go-bindata-代码生成器\" class=\"headerlink\" title=\"go-bindata 代码生成器\"></a>go-bindata 代码生成器</h4><p>给定一个静态资源目录路径作为输入源，go-bindata 可以为其生成 go 文件</p>\n<h2 id=\"代码生成过程\"><a href=\"#代码生成过程\" class=\"headerlink\" title=\"代码生成过程\"></a>代码生成过程</h2><p>前面所提到的五种代码生成过程如下图所示</p>\n<p><img src=\"../image/k8s%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg\" alt=\"代码生成过程\"></p>\n<ul>\n<li>.todo 文件相当于临时文件，用来存放被 Tags 标记过的包。通过 shell 的 grep 命令可以将所有代码包中被 Tags 标记过的包目录记录在 .todo 文件中，这样可以方便记录哪些包需要使用代码生成功能。</li>\n</ul>\n<h2 id=\"gengo-代码生成核心实现\"><a href=\"#gengo-代码生成核心实现\" class=\"headerlink\" title=\"gengo 代码生成核心实现\"></a>gengo 代码生成核心实现</h2><p>Kubernetes 的代码生成器都是在 k8s.io/gengo 包的基础上实现的，代码生成器都会通过一个输入包路径（–input-dirs）参数，根据 gengo 的词法分析、抽象语法树等操作，最终生成代码并输出（–output-file-base），gengo 代码目录结构说明如下：</p>\n<ul>\n<li><p>args: 代码生成器的通用 flags 参数。</p>\n</li>\n<li><p>examples: 包含 deepcopy-gen、defaulter-gen、import-boss、set-gen等代码生成器的生成逻辑。</p>\n</li>\n<li><p>generator: 代码生成器通用接口 Generator。</p>\n</li>\n<li><p>namer: 命名管理，支持创建不同类型的名称。例如，根据类型生成名称，定义 type foo string，能够生成 func FooPrinter(f *foo){Print(string(*f))}</p>\n</li>\n<li><p>parser: 代码解析器，用来构造抽象语法树。</p>\n</li>\n<li><p>types: 类型系统，用于数据类型的定义及类型检查算法的实现。</p>\n</li>\n</ul>\n<h3 id=\"代码生成逻辑与编译器原理\"><a href=\"#代码生成逻辑与编译器原理\" class=\"headerlink\" title=\"代码生成逻辑与编译器原理\"></a>代码生成逻辑与编译器原理</h3><p><img src=\"../image/gengo%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8E%9F%E7%90%86.jpg\" alt=\"gengo代码生成原理\"></p>\n<ul>\n<li><p>Gather The Info: 收集 Go 语言源码文件信息及内容</p>\n</li>\n<li><p>Lexer/Parser: 通过 Lexer 词法分析器进行一系列词法分析</p>\n</li>\n<li><p>AST Generator: 生成抽象语法树</p>\n</li>\n<li><p>Type Checker: 对抽象语法树进行类型检查</p>\n</li>\n<li><p>Code Generation: 生成代码，将抽象语法树转换为机器代码</p>\n</li>\n</ul>\n<h3 id=\"收集-Go-包信息\"><a href=\"#收集-Go-包信息\" class=\"headerlink\" title=\"收集 Go 包信息\"></a>收集 Go 包信息</h3><ul>\n<li>采用 go/build 工具，构建标签机制来构建约束条件，例如看代码时常看到类似于//+build linux darwin 的包注释信息，这就是 Go 语言编译时的约束条件，其也被称为条件编译。</li>\n</ul>\n<blockquote>\n<p>Go 语言的条件编译有两种定义方法：</p>\n<ul>\n<li>构建标签：在源码里添加注释信息，比如// +build linux,该标签决定了源码文件只能在 Linux 平台上才会被编译</li>\n<li>文件后缀：改变 Go 语言代码文件的后缀，比如 foo_linux.go，该后缀决定了源码文件只在 Linux 平台上才会被编译</li>\n</ul>\n</blockquote>\n<ul>\n<li>gengo 收集 Go 包信息可分为两步：第一步，为生成的代码文件设置构建标签；第二步，收集 Go 包信息并读取源码内容。</li>\n</ul>\n<h3 id=\"代码解析\"><a href=\"#代码解析\" class=\"headerlink\" title=\"代码解析\"></a>代码解析</h3><p>代码解析流程分为三步：</p>\n<ol>\n<li><p>通过标准库 go/tokens 提供的 Lexer 词法分析器对代码文本进行词法分析，最终得到 Tokens;</p>\n</li>\n<li><p>通过标准库 go/parser 和 go/ast 将 Tokens 构建为抽象语法树（AST）；</p>\n</li>\n<li><p>通过标准库 go/types 下的 Check 方法进行抽象语法树类型检查，完成代码解析过程；</p>\n</li>\n</ol>\n<h3 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h3><p>gengo 的类型系统在 Go 语言本身的类型系统之上归类并添加了几种类型。在 Go 语言标准库 go/types 的基础上进行封装。所有的类型都通过 vendor/k8s.io/gengo/parser/parse.go 的 walkType 方法进行识别。gengo 类型系统中的 Struct、Map、Pointer、Interface等，与 Go 语言提供的类型并无差别。也有 gengo 与 Go 语言不同的类型，例如 Builtin、Alias、DeclarationOf、Unknown、Unsupported及Protobuf。另外，Signature并非是一个类型，它依赖于 Func 函数类型，用来描述 Func 函数的接收参数信息和返回值信息等。</p>\n<p>如下举例：</p>\n<h4 id=\"Builtin（内置类型）\"><a href=\"#Builtin（内置类型）\" class=\"headerlink\" title=\"Builtin（内置类型）\"></a>Builtin（内置类型）</h4><p>Builtin 将多种 Base 类型归类成一种类型，以下几种类型在 gengo 中统称为 Builtin 类型。</p>\n<ul>\n<li>内置字符串类型——string</li>\n<li>内置布尔类型——bool</li>\n<li>内置数字类型——int、float、complex64等</li>\n</ul>\n<h4 id=\"Alias（别名类型）\"><a href=\"#Alias（别名类型）\" class=\"headerlink\" title=\"Alias（别名类型）\"></a>Alias（别名类型）</h4><p>举例如下：</p>\n<pre><code>type T1 struct&#123;&#125;\ntype T2 = T1</code></pre>\n<p>这里的 T2 相当于 T1 的别名，但在 Go 语言标准库的 reflect（反射）包识别 T2 的原始类型时，会将它识别为 Struct 类型，而无法将它识别为 Alias 类型，原因是，Alias 类型在运行时是不可见的。由于 gengo 依赖于 go/types 的 Named 类型，所以要让 Alias 类型在运行时可被识别，在声明时将 TypeName 对象绑定到 Named 类型即可。</p>\n<h4 id=\"DeclarationOf（声明类型）\"><a href=\"#DeclarationOf（声明类型）\" class=\"headerlink\" title=\"DeclarationOf（声明类型）\"></a>DeclarationOf（声明类型）</h4><p>它并不是严格意义上的类型，它是声明过的函数、全局变量、或常量，但未被引用过。</p>\n<h4 id=\"Unknown（未知类型）\"><a href=\"#Unknown（未知类型）\" class=\"headerlink\" title=\"Unknown（未知类型）\"></a>Unknown（未知类型）</h4><p>当对象匹配不到以上所有类型的时候，它就是 Unknwn 类型的。</p>\n<h4 id=\"Unsupported（未支持类型）\"><a href=\"#Unsupported（未支持类型）\" class=\"headerlink\" title=\"Unsupported（未支持类型）\"></a>Unsupported（未支持类型）</h4><p>当对象属于 Unkonwn 类型时，则会设置对象为 Unsupported 类型，并在其使用过程中报错。</p>\n<h4 id=\"Protobuf（Protobuf-类型）\"><a href=\"#Protobuf（Protobuf-类型）\" class=\"headerlink\" title=\"Protobuf（Protobuf 类型）\"></a>Protobuf（Protobuf 类型）</h4><p>由 go-to-protobuf 代码生成器单独处理的类型。</p>\n<h3 id=\"代码生成\"><a href=\"#代码生成\" class=\"headerlink\" title=\"代码生成\"></a>代码生成</h3><p>Kubernetes 代码生成器生成的是 Go 语言代码。</p>\n<p>Generator 接口字段说明如下：</p>\n<blockquote>\n<p>位于 vendor/k8s.io/gengo/generator/generator.go 中</p>\n</blockquote>\n<ul>\n<li>Name: 代码生成器的名称，返回值为生成的目标代码文件名的前缀，例如 deepcopy-gen 的前缀为 zz_generated.deepcopy</li>\n<li>Filter: 类型过滤器，过滤掉不符合当前代码生成器所需的类型</li>\n<li>Namers: 命名管理器，支出创建不同类型的名称。例如，根据类型生成名称</li>\n<li>Init: 代码生成器生成代码之前的初始化操作</li>\n<li>Finalize: 代码生成器生成代码之后的收尾操作</li>\n<li>PackageVars: 生成全局变量代码块，例如 var…</li>\n<li>PackageConsts: 生成常量代码块，例如 consts…</li>\n<li>GenerateType: 生成代码块，根据传入的类型生成代码</li>\n<li>Imports: 获得需要生成的 import 代码块</li>\n<li>Filename: 生成目标代码文件的全名，例如 deepcopy-gen 的 zz_generated.deepcopy.go</li>\n<li>FileType: 生成代码文件的类型<blockquote>\n<p>如果代码生成器没有实现某些方法，则继承默认代码生成器(DefaultGen)的方法</p>\n</blockquote>\n</li>\n</ul>\n<p>下面以 deepcopy-gen 代码生成器为例，其代码生成原理如下：</p>\n<p>首先通过 build.sh 脚本，手动构建 deepcopy-gen 代码生成器二进制文件，然后将需要生成的包 k8s.io/kubernetes/pkg/apis/abac/v1beta1 作为 deepcopy-gen 的输入源，并在内部进行一系列解析，最终通过 -O 参数生成名为 zz_generated.deepcopy.go 的代码文件,以下分步详解：</p>\n<ol>\n<li>实例化 generator.Packages 对象</li>\n</ol>\n<ul>\n<li>deepcopy-gen 代码生成器根据输入的包的目录路径（即输入源），实例化 generator.Packages 对象，根据 generator.Packages 结构生成代码；</li>\n<li>最主要的是 GeneratorFunc 定义了 Generator 接口的实现，</li>\n</ul>\n<ol start=\"2\">\n<li>执行代码生成</li>\n</ol>\n<p>在 gengo 中，generator 定义代码生成器通用接口 Generator。通过 ExecutePackage 函数，调用不同代码生成器的 Generator 接口方法，并生成代码。</p>\n<p>ExecutePackage 代码生成执行流程：生成 Header 代码块 -&gt; 生成 Imports 代码块 -&gt; 生成 Vars 全局变量代码块 -&gt; 生成 Consts 常量代码块 -&gt; 生成 Body 代码块。最后，调用 assembler.AssembleFile 函数，将生成的代码块信息写入 zz_generated.deepcopy.go 文件，生成 pkg/apis/abac/v1beta1/zz_generated.deepcopy.go 代码结构。</p>\n"},{"title":"Kubernetes核心数据结构1.0","date":"2020-11-14T05:38:35.000Z","_content":"\n## Group、Version、Resource核心数据结构\n\n在整个 Kubernetes 体系架构中，资源是 Kubernetes 最重要的概念，它本质上是一个资源控制系统————注册、管理、调度资源并维护资源的状态。\n\nKubernetes 将资源进行分组和版本化，形成 Group、Version、Resource。具体机构图如下：\n\n![kubernetes核心数据结构图](../image/kubernetes核心数据结构.jpg)\n\n* 部分资源同时会拥有自己的子资源，例如，Deployment 资源拥有 Status 子资源。\n\n* 完整的表现形式为 <group>/<version>/<resource>/<subresource>\n\n* 外部版本用于对外暴露给用户请求的接口所使用的资源对象。\n\n* 内部版本不对外暴露，仅在 kubernetes api server 内部使用。\n\n* kubernetes 的每个资源可使用 metav1.APIResource 结构进行描述，它描述资源的基本信息，例如资源名称，资源所属 命名空间，资源种类，资源可操作的方法列表。\n\n\n```\nresourceList := []*metav1.APIResourceList{\n    {\n        GroupVersion: \"v1\",\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"pods\", # 资源不存在资源组时\n                Namespaced: true,\n                Kind: \"Pod\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n            {\n                Name: \"services\",\n                Namespaced: true,\n                Kind: \"Service\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    },\n    {\n        GroupVersion: \"apps/v1\", # 同时存在资源组和版本\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"deployments\",\n                Namespaced: true,\n                Kind: \"Deployment\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    }\n}\n```\n\n> 可以通过 Group、Version、Resource 结构来明确标识一个资源的资源组名称，资源版本及资源名称。简称 GVR。\n> 常见的资源结构如下： GVR, GV, GR, GVK, GV, GK, GVS。\n\n## Group\n\n```\ntype APIGroup struct {\n    Name string\n    // 资源组名称\n    Versions []GroupVersionForDiscovery\n    // 资源组下所支持的资源组版本\n    PreferredVersion GroupVersionForDiscovery\n    // 首选版本\n}\n```\n\n* 拥有组名的资源组：其表现形式为 <group>/<version>/<resouce>\n> 拥有组名的资源组的 HTTP PATH 以 /apis 为前缀，其表现形式为 /apis/<group>/<version>/<resource> \n\n* 没有组名的资源组：被称为 Core Groups（即核心资源组）或 Legacy Groups，也可能被称为 GroupLess （即无组），其表现形式为 <version>/<resouce>\n> 没有组名的资源组的 HTTP PATH 以 /api 为前缀，其表现形式为 /api/<version>/<resource>\n\n## Version\n\n分为三种版本，依次迭代顺序为 Alpha -> Beta -> Stable\n\n```\ntype APIVersions struct {\n    Versions []string\n}\n// Versions: 所支持的资源版本列表\n```\n\n## Resource\n\n一个资源被实例化后会表达为一个资源对象（即 Resource Object），所有资源对象都是 Entity（实体）。\n\nKubernetes 目前支持的两种实体：\n* 持久性实体（Persistent Entity）:在资源对象被创建够， Kubernetes 会持久确保该资源对象存在。大部分对象属于持久性实体，例如 Deployment 资源对象。\n* 短暂性实体（Ephemeral Entity）:在资源对象被创建后，如果出现故障或调度失败，不会重新创建该资源对象，例如 Pod 资源对象。\n\n```\ntype APIResource struct {\n    Name string\n    // 资源名称\n    SingularName string\n    // 资源的单数名称，它必须由小写字母组成，默认使用资源种类的小写形式进行命名。\n    Namespaced bool\n    // 资源是否拥有所属命名空间\n    Group string\n    Version string\n    Kind string\n    Verbs Verbs\n    ShortNames []string\n    // 资源的简称\n}\n```\n\n### 资源外部版本和内部版本\n\n* External Object: 外部版本用于对外暴露给用户请求的接口所使用的资源对象，用户通过 YAML/JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象，外部版本的资源对象通过资源版本（Alpha, Beta, Stable）进行标识。\n\n* Internal Object: 内部版本不对外暴露，仅在 kubernetes api server 内部使用，内部版本用于多资源版本的转换。内部版本资源对象通过 runtime.APIVersionInternal (即_internal)进行标识。\n> 资源版本（如 v1beta1,v1等）与外部版本/内部版本概念不同，拥有资源版本的资源属于外部资源，拥有 runtime.APIVersionInternal 标识的资源属于内部版本\n\n* 资源的外部版本和内部版本是需要相互转换的，而用于转换的函数需要事先初始化到资源注册表（Scheme）中，多个外部版本之间的资源进行相互转换，都需要通过内部版本进行中转。**这也是 Kubernetes 能实现多资源版本转换的关键**\n\n* 资源的外部版本和内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接口，所以资源代码定义了 JSON/Proto Tags，而内部版本的资源不对外暴露，所以没有任何 Tags 定义。\n\n### 资源代码定义\n\nKubernetes 内部版本和外部版本的资源代码结构并不相同。\n\n* 资源的内部版本定义了所支持的资源类型（types.go）、资源验证方法（validation.go）、资源注册至资源注册表的方法（install/install.go）等。\n* 资源的外部版本定义了资源的转换方法（conversion.go）、资源的默认值（defaults.go）等。\n* 外部版本与内部版本资源类型相同，都通过 register.go 代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本（Alpha、Beta、Stable）标识。\n\n### 将资源注册到资源注册表中\n\n在每一个 Kubernetes 资源组目录中，都拥有一个 install/install.go 代码文件，它负责将资源信息注册到资源注册表（Scheme）中。\n\n* legancyschema.Scheme 是 kube-apiserver 组件的全局资源注册表，kubernetes 的所有资源信息都交给资源注册表统一管理。\n\n* core.AddToScheme: 函数注册 core 资源组内部版本的资源。\n\n* v1.AddToScheme: 函数注册 core 资源组外部版本的资源。\n\n* scheme.SetVersionPriority: 函数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。\n\n### 资源操作方法\n\n在 kubernetes 系统中，针对每一个资源都有一定的操作方法（即 Verbs）。\n\n* 目前支持8中操作：create, delete, deletecollection, get, list, patch, update, watch，这些操作可以分为四大类，分别属于对资源进行创建、删除、更新和查询。\n\n* 要了解一个资源对象拥有哪些可操作的方法，需要查看与存储相关联的源码包 registry。\n\n### 资源与命名空间\n\nkubernetes 系统中默认内置了4个命名空间，分别如下：\n* default: 默认的命名空间\n* kube-system: 所有由 kubernetes 系统创建的资源对象都会被分配给该命名空间\n* kube-public: 此命名空间下的资源对象可以被所有人访问\n* kube-node-lease: 此命名空间下存放来自节点的心跳记录\n* 决定资源对象属于哪个命名空间，可通过资源对象的 ObjectMeta.Namespace 描述。\n\n### 自定义资源\n\n开发者通过 CustomResourceDefinitions（CRD）可以实现自定义资源，并将之添加到 Kubernetes 系统中。\n\nkubernetes 资源可分为内置资源和自定义资源，它们都通过资源对象描述文件（Manifest File）进行定义。一个资源对象需要用5个字段来描述，这些字段定义在 YAML 或 JSON 文件中。\n\n* apiVersion: 指定创建资源对象的资源组和资源版本\n* kind: 指定创建资源对象的种类\n* metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等。\n* spec: 包含有关资源对象的核心信息，包括资源状态、副本数量、环境变量、卷等信息。\n* status: 包含有关正在运行的资源对象的信息。\n\n## runtime.Object 类型基石\n\nkubernetes 上的所有资源对象实际上就是一种 Go 语言的 Struct 类型，相当于一种数据结构，它们都有一个共同的结构叫 runtime.Object。runtime.Object 被设计为 Interface 接口类型，作为资源对象的通用资源对象。\n> 例如： Pod 资源对象可以转换为 runtime.Object 通用资源对象，runtime.Object 通用资源对象也可以转换为 Pod 资源对象。\n\n * runtime.object 提供了两个方法，分别是 GetObjectKind 和 DeepCopyObject。\n 1. GetObjectKind: 设置并返回 GroupVersionKind\n 2. DeepCopyObject: 用于深复制当前资源对象并返回\n\n* Kubernetes 的每一个资源对象都嵌入了 metav1.TypeMeta 类型，该类型实现了 GetObjectKind 方法\n\n ```\nfunc main(){\n    pod := &core.Pod{\n        TypeMeta: metav1.TypeMeta{\n            Kind: \"Pod\",\n        },\n        ObjectMeta: metav1.ObjectMeta{\n            Labels: map[string]string{\"name\": \"foo\"}\n        },\n    }\n    // 首先实例化 pod 资源\n     \n     obj := runtime.Object(pod)\n     // 通过 runtime.Object 将 Pod 资源对象转换成通用资源对象\n     \n     pod2, ok := obj.(*core.Pod)\n     // 通过断言的方式，将 obj 通用资源转换成 Pod 资源对象\n     if !ok {\n         panic(\"unexpected\")\n     }\n\n     if !reflect.DeepEqual(pod, pod2) {\n         panic(\"unexpected\")\n     }\n     // 最终通过反射来验证转换前和转换后的资源对象是否相等\n}\n ```\n","source":"_posts/Kubernetes核心数据结构1-0.md","raw":"---\ntitle: Kubernetes核心数据结构1.0\ndate: 2020-11-14 13:38:35\ntags: [Kubernetes, Kubernetes数据结构]\ncategories: Kubernetes源码解析\n---\n\n## Group、Version、Resource核心数据结构\n\n在整个 Kubernetes 体系架构中，资源是 Kubernetes 最重要的概念，它本质上是一个资源控制系统————注册、管理、调度资源并维护资源的状态。\n\nKubernetes 将资源进行分组和版本化，形成 Group、Version、Resource。具体机构图如下：\n\n![kubernetes核心数据结构图](../image/kubernetes核心数据结构.jpg)\n\n* 部分资源同时会拥有自己的子资源，例如，Deployment 资源拥有 Status 子资源。\n\n* 完整的表现形式为 <group>/<version>/<resource>/<subresource>\n\n* 外部版本用于对外暴露给用户请求的接口所使用的资源对象。\n\n* 内部版本不对外暴露，仅在 kubernetes api server 内部使用。\n\n* kubernetes 的每个资源可使用 metav1.APIResource 结构进行描述，它描述资源的基本信息，例如资源名称，资源所属 命名空间，资源种类，资源可操作的方法列表。\n\n\n```\nresourceList := []*metav1.APIResourceList{\n    {\n        GroupVersion: \"v1\",\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"pods\", # 资源不存在资源组时\n                Namespaced: true,\n                Kind: \"Pod\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n            {\n                Name: \"services\",\n                Namespaced: true,\n                Kind: \"Service\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    },\n    {\n        GroupVersion: \"apps/v1\", # 同时存在资源组和版本\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"deployments\",\n                Namespaced: true,\n                Kind: \"Deployment\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    }\n}\n```\n\n> 可以通过 Group、Version、Resource 结构来明确标识一个资源的资源组名称，资源版本及资源名称。简称 GVR。\n> 常见的资源结构如下： GVR, GV, GR, GVK, GV, GK, GVS。\n\n## Group\n\n```\ntype APIGroup struct {\n    Name string\n    // 资源组名称\n    Versions []GroupVersionForDiscovery\n    // 资源组下所支持的资源组版本\n    PreferredVersion GroupVersionForDiscovery\n    // 首选版本\n}\n```\n\n* 拥有组名的资源组：其表现形式为 <group>/<version>/<resouce>\n> 拥有组名的资源组的 HTTP PATH 以 /apis 为前缀，其表现形式为 /apis/<group>/<version>/<resource> \n\n* 没有组名的资源组：被称为 Core Groups（即核心资源组）或 Legacy Groups，也可能被称为 GroupLess （即无组），其表现形式为 <version>/<resouce>\n> 没有组名的资源组的 HTTP PATH 以 /api 为前缀，其表现形式为 /api/<version>/<resource>\n\n## Version\n\n分为三种版本，依次迭代顺序为 Alpha -> Beta -> Stable\n\n```\ntype APIVersions struct {\n    Versions []string\n}\n// Versions: 所支持的资源版本列表\n```\n\n## Resource\n\n一个资源被实例化后会表达为一个资源对象（即 Resource Object），所有资源对象都是 Entity（实体）。\n\nKubernetes 目前支持的两种实体：\n* 持久性实体（Persistent Entity）:在资源对象被创建够， Kubernetes 会持久确保该资源对象存在。大部分对象属于持久性实体，例如 Deployment 资源对象。\n* 短暂性实体（Ephemeral Entity）:在资源对象被创建后，如果出现故障或调度失败，不会重新创建该资源对象，例如 Pod 资源对象。\n\n```\ntype APIResource struct {\n    Name string\n    // 资源名称\n    SingularName string\n    // 资源的单数名称，它必须由小写字母组成，默认使用资源种类的小写形式进行命名。\n    Namespaced bool\n    // 资源是否拥有所属命名空间\n    Group string\n    Version string\n    Kind string\n    Verbs Verbs\n    ShortNames []string\n    // 资源的简称\n}\n```\n\n### 资源外部版本和内部版本\n\n* External Object: 外部版本用于对外暴露给用户请求的接口所使用的资源对象，用户通过 YAML/JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象，外部版本的资源对象通过资源版本（Alpha, Beta, Stable）进行标识。\n\n* Internal Object: 内部版本不对外暴露，仅在 kubernetes api server 内部使用，内部版本用于多资源版本的转换。内部版本资源对象通过 runtime.APIVersionInternal (即_internal)进行标识。\n> 资源版本（如 v1beta1,v1等）与外部版本/内部版本概念不同，拥有资源版本的资源属于外部资源，拥有 runtime.APIVersionInternal 标识的资源属于内部版本\n\n* 资源的外部版本和内部版本是需要相互转换的，而用于转换的函数需要事先初始化到资源注册表（Scheme）中，多个外部版本之间的资源进行相互转换，都需要通过内部版本进行中转。**这也是 Kubernetes 能实现多资源版本转换的关键**\n\n* 资源的外部版本和内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接口，所以资源代码定义了 JSON/Proto Tags，而内部版本的资源不对外暴露，所以没有任何 Tags 定义。\n\n### 资源代码定义\n\nKubernetes 内部版本和外部版本的资源代码结构并不相同。\n\n* 资源的内部版本定义了所支持的资源类型（types.go）、资源验证方法（validation.go）、资源注册至资源注册表的方法（install/install.go）等。\n* 资源的外部版本定义了资源的转换方法（conversion.go）、资源的默认值（defaults.go）等。\n* 外部版本与内部版本资源类型相同，都通过 register.go 代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本（Alpha、Beta、Stable）标识。\n\n### 将资源注册到资源注册表中\n\n在每一个 Kubernetes 资源组目录中，都拥有一个 install/install.go 代码文件，它负责将资源信息注册到资源注册表（Scheme）中。\n\n* legancyschema.Scheme 是 kube-apiserver 组件的全局资源注册表，kubernetes 的所有资源信息都交给资源注册表统一管理。\n\n* core.AddToScheme: 函数注册 core 资源组内部版本的资源。\n\n* v1.AddToScheme: 函数注册 core 资源组外部版本的资源。\n\n* scheme.SetVersionPriority: 函数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。\n\n### 资源操作方法\n\n在 kubernetes 系统中，针对每一个资源都有一定的操作方法（即 Verbs）。\n\n* 目前支持8中操作：create, delete, deletecollection, get, list, patch, update, watch，这些操作可以分为四大类，分别属于对资源进行创建、删除、更新和查询。\n\n* 要了解一个资源对象拥有哪些可操作的方法，需要查看与存储相关联的源码包 registry。\n\n### 资源与命名空间\n\nkubernetes 系统中默认内置了4个命名空间，分别如下：\n* default: 默认的命名空间\n* kube-system: 所有由 kubernetes 系统创建的资源对象都会被分配给该命名空间\n* kube-public: 此命名空间下的资源对象可以被所有人访问\n* kube-node-lease: 此命名空间下存放来自节点的心跳记录\n* 决定资源对象属于哪个命名空间，可通过资源对象的 ObjectMeta.Namespace 描述。\n\n### 自定义资源\n\n开发者通过 CustomResourceDefinitions（CRD）可以实现自定义资源，并将之添加到 Kubernetes 系统中。\n\nkubernetes 资源可分为内置资源和自定义资源，它们都通过资源对象描述文件（Manifest File）进行定义。一个资源对象需要用5个字段来描述，这些字段定义在 YAML 或 JSON 文件中。\n\n* apiVersion: 指定创建资源对象的资源组和资源版本\n* kind: 指定创建资源对象的种类\n* metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等。\n* spec: 包含有关资源对象的核心信息，包括资源状态、副本数量、环境变量、卷等信息。\n* status: 包含有关正在运行的资源对象的信息。\n\n## runtime.Object 类型基石\n\nkubernetes 上的所有资源对象实际上就是一种 Go 语言的 Struct 类型，相当于一种数据结构，它们都有一个共同的结构叫 runtime.Object。runtime.Object 被设计为 Interface 接口类型，作为资源对象的通用资源对象。\n> 例如： Pod 资源对象可以转换为 runtime.Object 通用资源对象，runtime.Object 通用资源对象也可以转换为 Pod 资源对象。\n\n * runtime.object 提供了两个方法，分别是 GetObjectKind 和 DeepCopyObject。\n 1. GetObjectKind: 设置并返回 GroupVersionKind\n 2. DeepCopyObject: 用于深复制当前资源对象并返回\n\n* Kubernetes 的每一个资源对象都嵌入了 metav1.TypeMeta 类型，该类型实现了 GetObjectKind 方法\n\n ```\nfunc main(){\n    pod := &core.Pod{\n        TypeMeta: metav1.TypeMeta{\n            Kind: \"Pod\",\n        },\n        ObjectMeta: metav1.ObjectMeta{\n            Labels: map[string]string{\"name\": \"foo\"}\n        },\n    }\n    // 首先实例化 pod 资源\n     \n     obj := runtime.Object(pod)\n     // 通过 runtime.Object 将 Pod 资源对象转换成通用资源对象\n     \n     pod2, ok := obj.(*core.Pod)\n     // 通过断言的方式，将 obj 通用资源转换成 Pod 资源对象\n     if !ok {\n         panic(\"unexpected\")\n     }\n\n     if !reflect.DeepEqual(pod, pod2) {\n         panic(\"unexpected\")\n     }\n     // 最终通过反射来验证转换前和转换后的资源对象是否相等\n}\n ```\n","slug":"Kubernetes核心数据结构1-0","published":1,"updated":"2020-11-23T13:25:14.158Z","_id":"ckhpltrfw00004z8j9v1tf7dm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Group、Version、Resource核心数据结构\"><a href=\"#Group、Version、Resource核心数据结构\" class=\"headerlink\" title=\"Group、Version、Resource核心数据结构\"></a>Group、Version、Resource核心数据结构</h2><p>在整个 Kubernetes 体系架构中，资源是 Kubernetes 最重要的概念，它本质上是一个资源控制系统————注册、管理、调度资源并维护资源的状态。</p>\n<p>Kubernetes 将资源进行分组和版本化，形成 Group、Version、Resource。具体机构图如下：</p>\n<p><img src=\"../image/kubernetes%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg\" alt=\"kubernetes核心数据结构图\"></p>\n<ul>\n<li><p>部分资源同时会拥有自己的子资源，例如，Deployment 资源拥有 Status 子资源。</p>\n</li>\n<li><p>完整的表现形式为 <group>/<version>/<resource>/<subresource></subresource></resource></version></group></p>\n</li>\n<li><p>外部版本用于对外暴露给用户请求的接口所使用的资源对象。</p>\n</li>\n<li><p>内部版本不对外暴露，仅在 kubernetes api server 内部使用。</p>\n</li>\n<li><p>kubernetes 的每个资源可使用 metav1.APIResource 结构进行描述，它描述资源的基本信息，例如资源名称，资源所属 命名空间，资源种类，资源可操作的方法列表。</p>\n</li>\n</ul>\n<pre><code>resourceList := []*metav1.APIResourceList{\n    {\n        GroupVersion: \"v1\",\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"pods\", # 资源不存在资源组时\n                Namespaced: true,\n                Kind: \"Pod\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n            {\n                Name: \"services\",\n                Namespaced: true,\n                Kind: \"Service\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    },\n    {\n        GroupVersion: \"apps/v1\", # 同时存在资源组和版本\n        APIResources: []metav1.APIResource{\n            {\n                Name: \"deployments\",\n                Namespaced: true,\n                Kind: \"Deployment\",\n                Verbs: []string{\"get\", \"list\", \"delete\", \"deletecollection\", \"create\", \"update\", \"patch\", \"watch\"},\n            },\n        },\n    }\n}</code></pre>\n<blockquote>\n<p>可以通过 Group、Version、Resource 结构来明确标识一个资源的资源组名称，资源版本及资源名称。简称 GVR。<br>常见的资源结构如下： GVR, GV, GR, GVK, GV, GK, GVS。</p>\n</blockquote>\n<h2 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h2><pre><code>type APIGroup struct {\n    Name string\n    // 资源组名称\n    Versions []GroupVersionForDiscovery\n    // 资源组下所支持的资源组版本\n    PreferredVersion GroupVersionForDiscovery\n    // 首选版本\n}</code></pre>\n<ul>\n<li><p>拥有组名的资源组：其表现形式为 <group>/<version>/<resouce></resouce></version></group></p>\n<blockquote>\n<p>拥有组名的资源组的 HTTP PATH 以 /apis 为前缀，其表现形式为 /apis/<group>/<version>/<resource> </resource></version></group></p>\n</blockquote>\n</li>\n<li><p>没有组名的资源组：被称为 Core Groups（即核心资源组）或 Legacy Groups，也可能被称为 GroupLess （即无组），其表现形式为 <version>/<resouce></resouce></version></p>\n<blockquote>\n<p>没有组名的资源组的 HTTP PATH 以 /api 为前缀，其表现形式为 /api/<version>/<resource></resource></version></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Version\"><a href=\"#Version\" class=\"headerlink\" title=\"Version\"></a>Version</h2><p>分为三种版本，依次迭代顺序为 Alpha -&gt; Beta -&gt; Stable</p>\n<pre><code>type APIVersions struct {\n    Versions []string\n}\n// Versions: 所支持的资源版本列表</code></pre>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><p>一个资源被实例化后会表达为一个资源对象（即 Resource Object），所有资源对象都是 Entity（实体）。</p>\n<p>Kubernetes 目前支持的两种实体：</p>\n<ul>\n<li>持久性实体（Persistent Entity）:在资源对象被创建够， Kubernetes 会持久确保该资源对象存在。大部分对象属于持久性实体，例如 Deployment 资源对象。</li>\n<li>短暂性实体（Ephemeral Entity）:在资源对象被创建后，如果出现故障或调度失败，不会重新创建该资源对象，例如 Pod 资源对象。</li>\n</ul>\n<pre><code>type APIResource struct {\n    Name string\n    // 资源名称\n    SingularName string\n    // 资源的单数名称，它必须由小写字母组成，默认使用资源种类的小写形式进行命名。\n    Namespaced bool\n    // 资源是否拥有所属命名空间\n    Group string\n    Version string\n    Kind string\n    Verbs Verbs\n    ShortNames []string\n    // 资源的简称\n}</code></pre>\n<h3 id=\"资源外部版本和内部版本\"><a href=\"#资源外部版本和内部版本\" class=\"headerlink\" title=\"资源外部版本和内部版本\"></a>资源外部版本和内部版本</h3><ul>\n<li><p>External Object: 外部版本用于对外暴露给用户请求的接口所使用的资源对象，用户通过 YAML/JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象，外部版本的资源对象通过资源版本（Alpha, Beta, Stable）进行标识。</p>\n</li>\n<li><p>Internal Object: 内部版本不对外暴露，仅在 kubernetes api server 内部使用，内部版本用于多资源版本的转换。内部版本资源对象通过 runtime.APIVersionInternal (即_internal)进行标识。</p>\n<blockquote>\n<p>资源版本（如 v1beta1,v1等）与外部版本/内部版本概念不同，拥有资源版本的资源属于外部资源，拥有 runtime.APIVersionInternal 标识的资源属于内部版本</p>\n</blockquote>\n</li>\n<li><p>资源的外部版本和内部版本是需要相互转换的，而用于转换的函数需要事先初始化到资源注册表（Scheme）中，多个外部版本之间的资源进行相互转换，都需要通过内部版本进行中转。<strong>这也是 Kubernetes 能实现多资源版本转换的关键</strong></p>\n</li>\n<li><p>资源的外部版本和内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接口，所以资源代码定义了 JSON/Proto Tags，而内部版本的资源不对外暴露，所以没有任何 Tags 定义。</p>\n</li>\n</ul>\n<h3 id=\"资源代码定义\"><a href=\"#资源代码定义\" class=\"headerlink\" title=\"资源代码定义\"></a>资源代码定义</h3><p>Kubernetes 内部版本和外部版本的资源代码结构并不相同。</p>\n<ul>\n<li>资源的内部版本定义了所支持的资源类型（types.go）、资源验证方法（validation.go）、资源注册至资源注册表的方法（install/install.go）等。</li>\n<li>资源的外部版本定义了资源的转换方法（conversion.go）、资源的默认值（defaults.go）等。</li>\n<li>外部版本与内部版本资源类型相同，都通过 register.go 代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本（Alpha、Beta、Stable）标识。</li>\n</ul>\n<h3 id=\"将资源注册到资源注册表中\"><a href=\"#将资源注册到资源注册表中\" class=\"headerlink\" title=\"将资源注册到资源注册表中\"></a>将资源注册到资源注册表中</h3><p>在每一个 Kubernetes 资源组目录中，都拥有一个 install/install.go 代码文件，它负责将资源信息注册到资源注册表（Scheme）中。</p>\n<ul>\n<li><p>legancyschema.Scheme 是 kube-apiserver 组件的全局资源注册表，kubernetes 的所有资源信息都交给资源注册表统一管理。</p>\n</li>\n<li><p>core.AddToScheme: 函数注册 core 资源组内部版本的资源。</p>\n</li>\n<li><p>v1.AddToScheme: 函数注册 core 资源组外部版本的资源。</p>\n</li>\n<li><p>scheme.SetVersionPriority: 函数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。</p>\n</li>\n</ul>\n<h3 id=\"资源操作方法\"><a href=\"#资源操作方法\" class=\"headerlink\" title=\"资源操作方法\"></a>资源操作方法</h3><p>在 kubernetes 系统中，针对每一个资源都有一定的操作方法（即 Verbs）。</p>\n<ul>\n<li><p>目前支持8中操作：create, delete, deletecollection, get, list, patch, update, watch，这些操作可以分为四大类，分别属于对资源进行创建、删除、更新和查询。</p>\n</li>\n<li><p>要了解一个资源对象拥有哪些可操作的方法，需要查看与存储相关联的源码包 registry。</p>\n</li>\n</ul>\n<h3 id=\"资源与命名空间\"><a href=\"#资源与命名空间\" class=\"headerlink\" title=\"资源与命名空间\"></a>资源与命名空间</h3><p>kubernetes 系统中默认内置了4个命名空间，分别如下：</p>\n<ul>\n<li>default: 默认的命名空间</li>\n<li>kube-system: 所有由 kubernetes 系统创建的资源对象都会被分配给该命名空间</li>\n<li>kube-public: 此命名空间下的资源对象可以被所有人访问</li>\n<li>kube-node-lease: 此命名空间下存放来自节点的心跳记录</li>\n<li>决定资源对象属于哪个命名空间，可通过资源对象的 ObjectMeta.Namespace 描述。</li>\n</ul>\n<h3 id=\"自定义资源\"><a href=\"#自定义资源\" class=\"headerlink\" title=\"自定义资源\"></a>自定义资源</h3><p>开发者通过 CustomResourceDefinitions（CRD）可以实现自定义资源，并将之添加到 Kubernetes 系统中。</p>\n<p>kubernetes 资源可分为内置资源和自定义资源，它们都通过资源对象描述文件（Manifest File）进行定义。一个资源对象需要用5个字段来描述，这些字段定义在 YAML 或 JSON 文件中。</p>\n<ul>\n<li>apiVersion: 指定创建资源对象的资源组和资源版本</li>\n<li>kind: 指定创建资源对象的种类</li>\n<li>metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等。</li>\n<li>spec: 包含有关资源对象的核心信息，包括资源状态、副本数量、环境变量、卷等信息。</li>\n<li>status: 包含有关正在运行的资源对象的信息。</li>\n</ul>\n<h2 id=\"runtime-Object-类型基石\"><a href=\"#runtime-Object-类型基石\" class=\"headerlink\" title=\"runtime.Object 类型基石\"></a>runtime.Object 类型基石</h2><p>kubernetes 上的所有资源对象实际上就是一种 Go 语言的 Struct 类型，相当于一种数据结构，它们都有一个共同的结构叫 runtime.Object。runtime.Object 被设计为 Interface 接口类型，作为资源对象的通用资源对象。</p>\n<blockquote>\n<p>例如： Pod 资源对象可以转换为 runtime.Object 通用资源对象，runtime.Object 通用资源对象也可以转换为 Pod 资源对象。</p>\n</blockquote>\n<ul>\n<li>runtime.object 提供了两个方法，分别是 GetObjectKind 和 DeepCopyObject。</li>\n</ul>\n<ol>\n<li>GetObjectKind: 设置并返回 GroupVersionKind</li>\n<li>DeepCopyObject: 用于深复制当前资源对象并返回</li>\n</ol>\n<ul>\n<li><p>Kubernetes 的每一个资源对象都嵌入了 metav1.TypeMeta 类型，该类型实现了 GetObjectKind 方法</p>\n<pre><code>func main(){\n  pod := &amp;core.Pod{\n      TypeMeta: metav1.TypeMeta{\n          Kind: \"Pod\",\n      },\n      ObjectMeta: metav1.ObjectMeta{\n          Labels: map[string]string{\"name\": \"foo\"}\n      },\n  }\n  // 首先实例化 pod 资源\n\n   obj := runtime.Object(pod)\n   // 通过 runtime.Object 将 Pod 资源对象转换成通用资源对象\n\n   pod2, ok := obj.(*core.Pod)\n   // 通过断言的方式，将 obj 通用资源转换成 Pod 资源对象\n   if !ok {\n       panic(\"unexpected\")\n   }\n\n   if !reflect.DeepEqual(pod, pod2) {\n       panic(\"unexpected\")\n   }\n   // 最终通过反射来验证转换前和转换后的资源对象是否相等\n}</code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<h2 id=\"Group、Version、Resource核心数据结构\"><a href=\"#Group、Version、Resource核心数据结构\" class=\"headerlink\" title=\"Group、Version、Resource核心数据结构\"></a>Group、Version、Resource核心数据结构</h2><p>在整个 Kubernetes 体系架构中，资源是 Kubernetes 最重要的概念，它本质上是一个资源控制系统————注册、管理、调度资源并维护资源的状态。</p>\n<p>Kubernetes 将资源进行分组和版本化，形成 Group、Version、Resource。具体机构图如下：</p>\n<p><img src=\"../image/kubernetes%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg\" alt=\"kubernetes核心数据结构图\"></p>\n<ul>\n<li><p>部分资源同时会拥有自己的子资源，例如，Deployment 资源拥有 Status 子资源。</p>\n</li>\n<li><p>完整的表现形式为 <group>/<version>/<resource>/<subresource></p>\n</li>\n<li><p>外部版本用于对外暴露给用户请求的接口所使用的资源对象。</p>\n</li>\n<li><p>内部版本不对外暴露，仅在 kubernetes api server 内部使用。</p>\n</li>\n<li><p>kubernetes 的每个资源可使用 metav1.APIResource 结构进行描述，它描述资源的基本信息，例如资源名称，资源所属 命名空间，资源种类，资源可操作的方法列表。</p>\n</li>\n</ul>\n<pre><code>resourceList := []*metav1.APIResourceList&#123;\n    &#123;\n        GroupVersion: &quot;v1&quot;,\n        APIResources: []metav1.APIResource&#123;\n            &#123;\n                Name: &quot;pods&quot;, # 资源不存在资源组时\n                Namespaced: true,\n                Kind: &quot;Pod&quot;,\n                Verbs: []string&#123;&quot;get&quot;, &quot;list&quot;, &quot;delete&quot;, &quot;deletecollection&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;watch&quot;&#125;,\n            &#125;,\n            &#123;\n                Name: &quot;services&quot;,\n                Namespaced: true,\n                Kind: &quot;Service&quot;,\n                Verbs: []string&#123;&quot;get&quot;, &quot;list&quot;, &quot;delete&quot;, &quot;deletecollection&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;watch&quot;&#125;,\n            &#125;,\n        &#125;,\n    &#125;,\n    &#123;\n        GroupVersion: &quot;apps/v1&quot;, # 同时存在资源组和版本\n        APIResources: []metav1.APIResource&#123;\n            &#123;\n                Name: &quot;deployments&quot;,\n                Namespaced: true,\n                Kind: &quot;Deployment&quot;,\n                Verbs: []string&#123;&quot;get&quot;, &quot;list&quot;, &quot;delete&quot;, &quot;deletecollection&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;watch&quot;&#125;,\n            &#125;,\n        &#125;,\n    &#125;\n&#125;</code></pre>\n<blockquote>\n<p>可以通过 Group、Version、Resource 结构来明确标识一个资源的资源组名称，资源版本及资源名称。简称 GVR。<br>常见的资源结构如下： GVR, GV, GR, GVK, GV, GK, GVS。</p>\n</blockquote>\n<h2 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h2><pre><code>type APIGroup struct &#123;\n    Name string\n    // 资源组名称\n    Versions []GroupVersionForDiscovery\n    // 资源组下所支持的资源组版本\n    PreferredVersion GroupVersionForDiscovery\n    // 首选版本\n&#125;</code></pre>\n<ul>\n<li><p>拥有组名的资源组：其表现形式为 <group>/<version>/<resouce></p>\n<blockquote>\n<p>拥有组名的资源组的 HTTP PATH 以 /apis 为前缀，其表现形式为 /apis/<group>/<version>/<resource> </p>\n</blockquote>\n</li>\n<li><p>没有组名的资源组：被称为 Core Groups（即核心资源组）或 Legacy Groups，也可能被称为 GroupLess （即无组），其表现形式为 <version>/<resouce></p>\n<blockquote>\n<p>没有组名的资源组的 HTTP PATH 以 /api 为前缀，其表现形式为 /api/<version>/<resource></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Version\"><a href=\"#Version\" class=\"headerlink\" title=\"Version\"></a>Version</h2><p>分为三种版本，依次迭代顺序为 Alpha -&gt; Beta -&gt; Stable</p>\n<pre><code>type APIVersions struct &#123;\n    Versions []string\n&#125;\n// Versions: 所支持的资源版本列表</code></pre>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><p>一个资源被实例化后会表达为一个资源对象（即 Resource Object），所有资源对象都是 Entity（实体）。</p>\n<p>Kubernetes 目前支持的两种实体：</p>\n<ul>\n<li>持久性实体（Persistent Entity）:在资源对象被创建够， Kubernetes 会持久确保该资源对象存在。大部分对象属于持久性实体，例如 Deployment 资源对象。</li>\n<li>短暂性实体（Ephemeral Entity）:在资源对象被创建后，如果出现故障或调度失败，不会重新创建该资源对象，例如 Pod 资源对象。</li>\n</ul>\n<pre><code>type APIResource struct &#123;\n    Name string\n    // 资源名称\n    SingularName string\n    // 资源的单数名称，它必须由小写字母组成，默认使用资源种类的小写形式进行命名。\n    Namespaced bool\n    // 资源是否拥有所属命名空间\n    Group string\n    Version string\n    Kind string\n    Verbs Verbs\n    ShortNames []string\n    // 资源的简称\n&#125;</code></pre>\n<h3 id=\"资源外部版本和内部版本\"><a href=\"#资源外部版本和内部版本\" class=\"headerlink\" title=\"资源外部版本和内部版本\"></a>资源外部版本和内部版本</h3><ul>\n<li><p>External Object: 外部版本用于对外暴露给用户请求的接口所使用的资源对象，用户通过 YAML/JSON 格式的描述文件创建资源对象时，所使用的是外部版本的资源对象，外部版本的资源对象通过资源版本（Alpha, Beta, Stable）进行标识。</p>\n</li>\n<li><p>Internal Object: 内部版本不对外暴露，仅在 kubernetes api server 内部使用，内部版本用于多资源版本的转换。内部版本资源对象通过 runtime.APIVersionInternal (即_internal)进行标识。</p>\n<blockquote>\n<p>资源版本（如 v1beta1,v1等）与外部版本/内部版本概念不同，拥有资源版本的资源属于外部资源，拥有 runtime.APIVersionInternal 标识的资源属于内部版本</p>\n</blockquote>\n</li>\n<li><p>资源的外部版本和内部版本是需要相互转换的，而用于转换的函数需要事先初始化到资源注册表（Scheme）中，多个外部版本之间的资源进行相互转换，都需要通过内部版本进行中转。<strong>这也是 Kubernetes 能实现多资源版本转换的关键</strong></p>\n</li>\n<li><p>资源的外部版本和内部版本的代码定义也不太一样，外部版本的资源需要对外暴露给用户请求的接口，所以资源代码定义了 JSON/Proto Tags，而内部版本的资源不对外暴露，所以没有任何 Tags 定义。</p>\n</li>\n</ul>\n<h3 id=\"资源代码定义\"><a href=\"#资源代码定义\" class=\"headerlink\" title=\"资源代码定义\"></a>资源代码定义</h3><p>Kubernetes 内部版本和外部版本的资源代码结构并不相同。</p>\n<ul>\n<li>资源的内部版本定义了所支持的资源类型（types.go）、资源验证方法（validation.go）、资源注册至资源注册表的方法（install/install.go）等。</li>\n<li>资源的外部版本定义了资源的转换方法（conversion.go）、资源的默认值（defaults.go）等。</li>\n<li>外部版本与内部版本资源类型相同，都通过 register.go 代码文件定义所属的资源组和资源版本，外部版本资源对象通过资源版本（Alpha、Beta、Stable）标识。</li>\n</ul>\n<h3 id=\"将资源注册到资源注册表中\"><a href=\"#将资源注册到资源注册表中\" class=\"headerlink\" title=\"将资源注册到资源注册表中\"></a>将资源注册到资源注册表中</h3><p>在每一个 Kubernetes 资源组目录中，都拥有一个 install/install.go 代码文件，它负责将资源信息注册到资源注册表（Scheme）中。</p>\n<ul>\n<li><p>legancyschema.Scheme 是 kube-apiserver 组件的全局资源注册表，kubernetes 的所有资源信息都交给资源注册表统一管理。</p>\n</li>\n<li><p>core.AddToScheme: 函数注册 core 资源组内部版本的资源。</p>\n</li>\n<li><p>v1.AddToScheme: 函数注册 core 资源组外部版本的资源。</p>\n</li>\n<li><p>scheme.SetVersionPriority: 函数注册资源组的版本顺序，如有多个资源版本，排在最前面的为资源首选版本。</p>\n</li>\n</ul>\n<h3 id=\"资源操作方法\"><a href=\"#资源操作方法\" class=\"headerlink\" title=\"资源操作方法\"></a>资源操作方法</h3><p>在 kubernetes 系统中，针对每一个资源都有一定的操作方法（即 Verbs）。</p>\n<ul>\n<li><p>目前支持8中操作：create, delete, deletecollection, get, list, patch, update, watch，这些操作可以分为四大类，分别属于对资源进行创建、删除、更新和查询。</p>\n</li>\n<li><p>要了解一个资源对象拥有哪些可操作的方法，需要查看与存储相关联的源码包 registry。</p>\n</li>\n</ul>\n<h3 id=\"资源与命名空间\"><a href=\"#资源与命名空间\" class=\"headerlink\" title=\"资源与命名空间\"></a>资源与命名空间</h3><p>kubernetes 系统中默认内置了4个命名空间，分别如下：</p>\n<ul>\n<li>default: 默认的命名空间</li>\n<li>kube-system: 所有由 kubernetes 系统创建的资源对象都会被分配给该命名空间</li>\n<li>kube-public: 此命名空间下的资源对象可以被所有人访问</li>\n<li>kube-node-lease: 此命名空间下存放来自节点的心跳记录</li>\n<li>决定资源对象属于哪个命名空间，可通过资源对象的 ObjectMeta.Namespace 描述。</li>\n</ul>\n<h3 id=\"自定义资源\"><a href=\"#自定义资源\" class=\"headerlink\" title=\"自定义资源\"></a>自定义资源</h3><p>开发者通过 CustomResourceDefinitions（CRD）可以实现自定义资源，并将之添加到 Kubernetes 系统中。</p>\n<p>kubernetes 资源可分为内置资源和自定义资源，它们都通过资源对象描述文件（Manifest File）进行定义。一个资源对象需要用5个字段来描述，这些字段定义在 YAML 或 JSON 文件中。</p>\n<ul>\n<li>apiVersion: 指定创建资源对象的资源组和资源版本</li>\n<li>kind: 指定创建资源对象的种类</li>\n<li>metadata: 描述创建资源对象的元数据信息，例如名称、命名空间等。</li>\n<li>spec: 包含有关资源对象的核心信息，包括资源状态、副本数量、环境变量、卷等信息。</li>\n<li>status: 包含有关正在运行的资源对象的信息。</li>\n</ul>\n<h2 id=\"runtime-Object-类型基石\"><a href=\"#runtime-Object-类型基石\" class=\"headerlink\" title=\"runtime.Object 类型基石\"></a>runtime.Object 类型基石</h2><p>kubernetes 上的所有资源对象实际上就是一种 Go 语言的 Struct 类型，相当于一种数据结构，它们都有一个共同的结构叫 runtime.Object。runtime.Object 被设计为 Interface 接口类型，作为资源对象的通用资源对象。</p>\n<blockquote>\n<p>例如： Pod 资源对象可以转换为 runtime.Object 通用资源对象，runtime.Object 通用资源对象也可以转换为 Pod 资源对象。</p>\n</blockquote>\n<ul>\n<li>runtime.object 提供了两个方法，分别是 GetObjectKind 和 DeepCopyObject。</li>\n</ul>\n<ol>\n<li>GetObjectKind: 设置并返回 GroupVersionKind</li>\n<li>DeepCopyObject: 用于深复制当前资源对象并返回</li>\n</ol>\n<ul>\n<li><p>Kubernetes 的每一个资源对象都嵌入了 metav1.TypeMeta 类型，该类型实现了 GetObjectKind 方法</p>\n<pre><code>func main()&#123;\n  pod := &amp;core.Pod&#123;\n      TypeMeta: metav1.TypeMeta&#123;\n          Kind: &quot;Pod&quot;,\n      &#125;,\n      ObjectMeta: metav1.ObjectMeta&#123;\n          Labels: map[string]string&#123;&quot;name&quot;: &quot;foo&quot;&#125;\n      &#125;,\n  &#125;\n  // 首先实例化 pod 资源\n\n   obj := runtime.Object(pod)\n   // 通过 runtime.Object 将 Pod 资源对象转换成通用资源对象\n\n   pod2, ok := obj.(*core.Pod)\n   // 通过断言的方式，将 obj 通用资源转换成 Pod 资源对象\n   if !ok &#123;\n       panic(&quot;unexpected&quot;)\n   &#125;\n\n   if !reflect.DeepEqual(pod, pod2) &#123;\n       panic(&quot;unexpected&quot;)\n   &#125;\n   // 最终通过反射来验证转换前和转换后的资源对象是否相等\n&#125;</code></pre>\n</li>\n</ul>\n"},{"title":"Kubernetes核心数据结构2.0","date":"2020-11-21T12:45:48.000Z","_content":"\n## 数据\n\n### 结构化数据\n\n预先知道数据结构的数据类型是结构化数据。要使用这种数据，需要创建一个 struct 数据结构，并且可以通过 Go 语言的 json 库进行反序列化操作。\n\n### 非结构化数据\n\n无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据，其无法通过构建预定的 struct 数据结构来序列化或反序列化数据。\n\n可以通过如下结构来解决问题：\n\n```\nvar result map[string]interface{}\n```\n\n> interface {}类型对应值，可以是任何类型，使用 interface 字段时，通过 Go 语言断言的方式进行类型转换。\n\n```\nif description, ok := result[\"description\"].(string); ok {\n    fmt.Println(description)\n}\n```\n\n## Scheme 资源注册表\n\nKubernetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册、存储、查询、管理等机制。目前 Kubernetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是一个内存型的资源注册表。\n\nScheme 资源注册表支持如下两种类型：\n\n* UnversionedType: 无版本资源类型，这是早期 Kubernetes 系统中的概念，它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。\n\n* KnownType: 目前 Kubernetes 最常用的资源类型，也可称其为“拥有版本的资源类型”。\n\n### Scheme 资源注册表数据结构\n\nScheme 资源注册表数据结构主要由4个map结构组成，分别是：\n\n```\ntype Scheme struct {\n    gvkToType map[scheme.GroupVersionKind]reflect.Type\n    // 存储 GVK 与 Type 的映射关系\n    \n    typeToGVK map[reflect.Type][]scheme.GroupVersionKind\n    // 存储 Type 与 GVK 的映射关系，一个 Type 会对应一个或多个 GVK\n    \n    unversionedTypes map[reflect.Type]scheme.GroupVersionKind\n    // 存储 UnversionedType 与 GVK 的映射关系\n    \n    unversionedKinds map[string]reflect.Type\n    // 存储 Kind 名称与 UnversionedType 的映射关系 \n}\n```\n\n> 这些映射关系可以实现高效的正向和反向检索。\n\nScheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构，Scheme Example 代码示例如下：\n\n```\nfunc main() {\n    // KnownType external\n    coreGV := schema.GroupVersion{Group:\"\", Version: \"v1\"}\n    extensionsGV := schema.GroupVersion{Group: \"extensions\", Version: \"v1beta1\"}\n    \n    // KnownType internal\n    coreInternalGV := schema.GroupVersion{Group: \"\", Version: runtime.APIVersionInternal}\n\n    // UnversionedType \n    Unversioned := schema.GroupVersion{Group: \"\", Version: \"v1\"}\n\n    schema := runtime.NewScheme()\n    scheme.AddKnownTypes(coreGV, &corev1.Pod{})\n    scheme.AddKnownTypes(extensionsGV, &appsv1.DaemonSet{})\n    scheme.AddKnownTypes(coreInternalGV, &corev1.Pod{})\n    scheme.AddUnversionedTypes(Unversioned, &metav1.Status{})\n    // 注册资源类型到 Scheme 资源注册表有以上两种方式\n}\n```\n\n* GVK 在 Scheme 资源注册表中以 <group>/<version>,Kind=<kind>的形式存在，其中对于 Kind 字段，在注册时如果不指定该字段的名称，那么默认使用类型的名称，通过 reflect 机制获取资源类型的名称。\n\n* 资源类型在 Scheme 资源注册表中以 Go Type（通过 reflect 机制获取）形式存在。\n\n> 需要注意的是，UnversionecdType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在4个 map 结构中，代码示例如下：\n\n```\nfunc (s *Scheme) AddUnversionedTypes(version schema.GroupVersion, types ...Object) {\n    ...\n    s.AddKnownTypes(version, types...)\n    // 1\n    for _, obj := range types {\n        t := reflect.TypeOf(obj).Elem()\n        gvk := version.WithKind(t.Name())\n        // 2\n        s.unversionedTypes[t] = gvk\n        // 3\n        ...\n        s.unversionedKinds[gvk.Kind] = t\n        // 4\n    }\n}\n```\n\n### 资源注册表注册方法\n\n在 Scheme 资源注册表中，不同的资源类型使用的注册方法不同，分别如下：\n\n* scheme.AddUnversionedTypes: 注册 UnversionedType 资源类型\n* scheme.AddKnownTypes: 注册 KnownType 资源类型\n* scheme.AddKnownTypesWithName: 注册 KnownType 资源类型，须指定资源的 Kind 资源种类名称\n\n举例 scheme.AddKnownTypes 如下:\n\n```\nfunc (s *Scheme) AddKnownTypes(gv schema.GroupVersion,types ...object){\n    s.addObservedVersion(gv)\n    for _, obj := range types {\n        t := reflect.Typeof(obj)\n        // 通过 reflect 机制获取资源类型的名称作为资源种类名称\n        if t.Kind() != reflect.Ptr {\n            panic(\"All types must be pointers to structs.\")\n        }\n        t = t.Elem()\n        s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj)\n        // 调用这种注册方法\n    }\n}\n```\n\n## Codec 编解码器\n\n* Serializer: 序列化器，包含序列化操作与反序列化操作\n\n* Codec: 编解码器，包含编码器和解码器。\n> 编解码器指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。\n\n```\ntype Encoder interface{}\n// 编码器\ntype Decoder interface{}\n// 解码器\ntype Serializer interface{\n    Encoder\n    Decoder\n}\n// 只要实现了 Encoder 与 Decoder 方法的数据结构，就是序列化器\ntype Codec Serialier\n```\n\nCodec 编解码器包含3中序列化器：\n1. jsonSerializer: JSON 格式序列化/反序列化器。\n2. yamlSerializer: YAML 格式序列化/反序列化器。\n3. protobufSerializer: Protobuf 格式序列化/反序列化器。\n> 都使用 ContentType 作为标识。\n\n### Codec 编解码实例化\n\nCodec 编解码器通过 NewCodecFactory 函数实例化，NewCodecFactory -> newSerializersForSchem。\n分别都是通过 json.NewSerializer/json.NewYAMLSerializer/protobuf.NewSerializer 函数进行实例化。\n\n### json 和 yaml 序列化器\n\n* json 序列化器使用 Go 语言标准库 encoding/json 来实现序列化和反序列化。\n* yaml 序列化器使用第三方库 gopkg.in/yaml.v2 来实现序列化和反序列化。\n\n* json 和 yaml 序列化器共享同一个数据结构，通过 yaml 字段区分，如果该字段为 true 则使用 yaml 序列化器，否则为使用 json 序列化器。\n\n* 如果是 yaml 格式，第一步通过 caseSensitiveJsonIterator.Marshal 函数将资源对象转换为 Json 格式，第二步通过 yaml.JSONToYAML 将 JSON 格式转换为 YAML 格式并返回数据。\n\n* 如果是 JSON 格式，则通过 Go 语言标准库将资源对象转换为 JSON 格式。其中如果 pretty 参数开启的话，则通过 caseSensitiveJsonIterator.MarshalIndent 函数优化 JSON 格式。\n> caseSensitiveJsonIterator 函数实际封装了 github.com/json-iterator/go 第三方库，json-iterator 有如下几个好处。\n> 1. json-iterator 支持区分大小写。\n> 2. json-iterator 性能更优。\n> 3. json-iterator 100% 兼容 Go 语言标准库。\n\n### protobufSerializer 序列化器\n\nprotobuf 序列化器使用 proto 库来实现序列化和反序列操作。\n\n* 前缀有 magic-number 特殊标识。\n\n## Converter 资源版本转换器\n\n可以通过 kubectl convert 命令进行资源版本转换：\n\n```\n$ kubectl convert -f v1beta1Deployment.yaml --output-version=apps/v1\napiVersion: apps/v1\nkind: Deployment \n```\n\nkubernetes 系统中一个资源支持多个资源版本，每个资源版本都支持其他资源版本的转换，随着资源版本的增加，资源版本转换的定义会越来越多，这样处理起来非常麻烦。\n因此 kubernetes 通过内部版本机制实现资源版本转换。\n* 当需要在两个资源版本之间转换时，Converter 资源版本转换器先将第一个资源版本转换为 __internal 内部版本，再转换为相应的资源版本。\n* 每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换。\n\n### Converter 转换器数据结构\n\nConverter 转换器数据结构主要存放转换函数（即 Conversion Funcs）。\n\n```\ntype Converter struct {\n    conversionFuncs          ConversionFuncs\n    // 默认转换函数\n    generatedConversionFuncs ConversionFuncs\n    // 自动生成的转换函数\n    ignoredConversions       map[typePair]stuct{}\n    // 若资源对象注册到此字段，则忽略此资源对象的转换操作\n    nameFunc                 func(t reflect.Type) string\n    // 在转换过程中其用于获取资源种类的名称\n    ...\n}\n\ntype ConversionFuncs struct {\n    fns     map[typePair]reflect.Value\n    untyped map[typePair]ConversionFunc\n}\n\ntype typePair struct {\n    source reflect.Type\n    dest   reflect.Type\n}\n\ntype ConversionFunc func(a, b interface{}, scope Scope) error\n// 将资源对象 a 转换为资源对象 b，scope 定义了多次转换机制。\n```\n\n### Converter 注册转换函数\n\nConverter 转换函数需要通过注册才能在 Kubernetes 内部使用，目前支持 5 个注册转换函数。\n1. 注册忽略的资源类型。\n2. 注册多个 Conversion Func 转换函数。\n3. 注册单个 Conversion Func 转换函数。\n4. 注册自动生成的转换函数。\n5. 注册字段标签的转换函数。\n\n### Convert 资源版本转换原理\n\nConverter Example（将 Deployment 资源对象从 v1beta1 -> v1） 代码示例如下：\n\n```\nfunc main() {\n    // 第一部分：实例化一个空的 Scheme 资源注册表，将 v1beta1、v1的资源版本及内部版本的 Deployment 资源注册到 Scheme 资源注册表中。\n    scheme := runtime.NewScheme()\n    scheme.AddKnownTypes(appsv1beta1.SchemeGroupVersion, &appsv1beta1.Deployment{})\n    scheme.AddKnownTypes(appsv1.SchemeGroupVerison, &appsv1.Deployment{})\n    scheme.AddKnownTypes(apps.SchemeGroupVersion, &appsv1.Deployment{})\n    metav1.AddToGroupVersion(scheme, appsv1beta1.SchemeGroupVersion)\n    metav1.AddToGroupVersion(scheme, appsv1.SchemeGroupVersion)\n   \n    // 第二部分：实例化 v1beta1Deployment 资源对象，\n    v1beta1Deployment := &appsv1beta1.Deployment{\n        TypeMeta: metav1.TypeMeta{\n            Kind:       \"Deployment\",\n            APIVersion: \"apps/v1beta1\",\n        }\n    }\n    \n    // 通过 scheme.ConvertToVersion 将其转换为内部版本\n    // v1beta1 -> __internal\n    objInternal, err := scheme.ConvertToVersion(v1beta1Deployment, apps.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"GVK\", objinternal.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: /, Kind =\n\n    // 通过 scheme.ConvertToVersion 转换为目标资源版本，并通过断言的方式来判断是否转换成功。\n    // __internal -> v1\n    objV1, err := scheme.ConvertToVersion(objInternal, appsv1.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    v1Deployment, ok := objV1.(*appsV1.Deployment)\n    if !ok {\n        panic(\"Got wrong type\")\n    }\n    fmtPrintln(\"GVK: \", v1Deployment.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: apps/v1, Kind = Deployment \n}\n```\n\nScheme 资源注册表可以通过两种方式进行版本转换：\n1. 将传入的资源对象转换成目标资源版本之前，会将资源对象深复制一份后再执行转换操作，相当于安全的内存对象转换操作。\n2. 在资源对象转换的过程中，不会深复制资源对象，而是直接对原资源对象进行转换操作，尽可能高效地实现转换，是非安全的内存对象转换操作。\n\n下面是 Converter 转换器流程：\n\n![Convert转换器流程图](../image/Converter转换器.jpg)\n\n1. 获取传入的资源对象的反射类型\n\n因为在 Scheme 资源注册表中是以反射类型注册资源的\n\n```\nt = reflect.Typeof(in).Elem()\n```\n\n2. 从资源注册表中查找到传入的资源对象的 GVK \n\n```\nkinds, ok := s.typeToGVK[t]\nif !ok || len(kinds) == 0 {\n    return nil, NewNotRegisteredErrForType(s.schemeName, t)\n}\n```\n\n3. 从多个 GVK 中选出与目标资源对象相匹配的 GVK\n\n这里有个优缺点，转换过程是相对耗时的，大量的相同资源之间进行版本转换的耗时会比较长。因此如果目标资源对象的 GVK 在可转换的 GVK 列表中，则直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK，而无须执行转换操作，缩短部分耗时。\n\n```\ngvk, ok := target.KindForGroupVersionKinds(kinds)\n...\nfor _, kind := range kinds {\n    if gvk == kind {\n        retrurn copyAndSetTargetKind(copy, in, gvk)\n    }\n}\n```\n\n4. 判断传入的资源对象是否属于 Unversioned 类型\n\n属于该类型的资源对象并不需要进行转换操作，而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK。\n\n```\nif unversionedKind, ok := s.unversionedTypes[t]; ok {\n    ...\n    return copyAndSetTargetKind(copy, in, unversionedKind)\n}\n```\n\n5. 执行转换操作\n\n在执行转换操作之前，先判断是否需要对传入的资源对象执行深复制操作，然后通过 s.converter.Convert 转换函数执行转换操作，代码示例如下：\n\n```\nif copy {\n    in = in.DeepCopyObject()\n}\nif err := s.converter.Convert(in, out, flags, meta); err != nil {\n    return nil, err\n}\n```\n\n实际的转换函数是通过 doConversion 函数执行的：\n\n```\nfunc (c *Converter) doConversion(src, dest interface{}, flags FieldMatchingFlags, meta *Meta, f conversionFunc) error {\n    pair := typePair{reflect.TypeOf(src), reflect.TypeOf(dest)}\n    ...\n    // 若在默认转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.conversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n    // 若在自动生成的转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.generatedConversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n    \n    // 如果不在以上两个列表中，则使用 doConversion 函数传入的转换函数（即 f），调用 f 之前，需要将 src 与 dest 资源对象通过 EnforcePtr 函数取指针的值。\n    // 因为 doConversion 函数传入的转换函数接收的是非指针资源对象。\n    dv, err := EnforcePtr(dest)\n    sv, err := EnforcePtr(src)\n    ...\n    return f(sv, dv, scope)\n}\n```\n\n6. 设置转换后资源对象的 GVK \n\n前面的 Converter Example 代码示例的第二部分中，将 v1beta1 资源版本转换为内部版本，得到转换后资源对象的 GVK 为 ”/,Kind=“，原因在于 setTargetKind 函数，转换操作执行完成后，通过 setTargetKind 函数设置转换后资源对象的 GVK，判断当前资源对象是否是内部版本，是的话，设置 GVK 为 scheme.GroupVersionKind{}。\n\n```\nsetTargetKind(out, gvk)\n\nfunc setTargetKind(obj Object, kind schema.GroupVersionKind) {\n    if kind.Version == APIVersionInternal {\n        obj.GetObjectKind().SetGroupVersionKind(scheme.GroupVersionKind{})\n        return\n    }\n    obj.GetObjectKind().SetGroupVersionKind(kind)\n}\n```\n","source":"_posts/Kubernetes-data-structure-2.md","raw":"---\ntitle: Kubernetes核心数据结构2.0\ndate: 2020-11-21 20:45:48\ntags: [Kubernetes, Kubernetes数据结构]\ncategories: Kubernetes源码解析\n---\n\n## 数据\n\n### 结构化数据\n\n预先知道数据结构的数据类型是结构化数据。要使用这种数据，需要创建一个 struct 数据结构，并且可以通过 Go 语言的 json 库进行反序列化操作。\n\n### 非结构化数据\n\n无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据，其无法通过构建预定的 struct 数据结构来序列化或反序列化数据。\n\n可以通过如下结构来解决问题：\n\n```\nvar result map[string]interface{}\n```\n\n> interface {}类型对应值，可以是任何类型，使用 interface 字段时，通过 Go 语言断言的方式进行类型转换。\n\n```\nif description, ok := result[\"description\"].(string); ok {\n    fmt.Println(description)\n}\n```\n\n## Scheme 资源注册表\n\nKubernetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册、存储、查询、管理等机制。目前 Kubernetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是一个内存型的资源注册表。\n\nScheme 资源注册表支持如下两种类型：\n\n* UnversionedType: 无版本资源类型，这是早期 Kubernetes 系统中的概念，它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。\n\n* KnownType: 目前 Kubernetes 最常用的资源类型，也可称其为“拥有版本的资源类型”。\n\n### Scheme 资源注册表数据结构\n\nScheme 资源注册表数据结构主要由4个map结构组成，分别是：\n\n```\ntype Scheme struct {\n    gvkToType map[scheme.GroupVersionKind]reflect.Type\n    // 存储 GVK 与 Type 的映射关系\n    \n    typeToGVK map[reflect.Type][]scheme.GroupVersionKind\n    // 存储 Type 与 GVK 的映射关系，一个 Type 会对应一个或多个 GVK\n    \n    unversionedTypes map[reflect.Type]scheme.GroupVersionKind\n    // 存储 UnversionedType 与 GVK 的映射关系\n    \n    unversionedKinds map[string]reflect.Type\n    // 存储 Kind 名称与 UnversionedType 的映射关系 \n}\n```\n\n> 这些映射关系可以实现高效的正向和反向检索。\n\nScheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构，Scheme Example 代码示例如下：\n\n```\nfunc main() {\n    // KnownType external\n    coreGV := schema.GroupVersion{Group:\"\", Version: \"v1\"}\n    extensionsGV := schema.GroupVersion{Group: \"extensions\", Version: \"v1beta1\"}\n    \n    // KnownType internal\n    coreInternalGV := schema.GroupVersion{Group: \"\", Version: runtime.APIVersionInternal}\n\n    // UnversionedType \n    Unversioned := schema.GroupVersion{Group: \"\", Version: \"v1\"}\n\n    schema := runtime.NewScheme()\n    scheme.AddKnownTypes(coreGV, &corev1.Pod{})\n    scheme.AddKnownTypes(extensionsGV, &appsv1.DaemonSet{})\n    scheme.AddKnownTypes(coreInternalGV, &corev1.Pod{})\n    scheme.AddUnversionedTypes(Unversioned, &metav1.Status{})\n    // 注册资源类型到 Scheme 资源注册表有以上两种方式\n}\n```\n\n* GVK 在 Scheme 资源注册表中以 <group>/<version>,Kind=<kind>的形式存在，其中对于 Kind 字段，在注册时如果不指定该字段的名称，那么默认使用类型的名称，通过 reflect 机制获取资源类型的名称。\n\n* 资源类型在 Scheme 资源注册表中以 Go Type（通过 reflect 机制获取）形式存在。\n\n> 需要注意的是，UnversionecdType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在4个 map 结构中，代码示例如下：\n\n```\nfunc (s *Scheme) AddUnversionedTypes(version schema.GroupVersion, types ...Object) {\n    ...\n    s.AddKnownTypes(version, types...)\n    // 1\n    for _, obj := range types {\n        t := reflect.TypeOf(obj).Elem()\n        gvk := version.WithKind(t.Name())\n        // 2\n        s.unversionedTypes[t] = gvk\n        // 3\n        ...\n        s.unversionedKinds[gvk.Kind] = t\n        // 4\n    }\n}\n```\n\n### 资源注册表注册方法\n\n在 Scheme 资源注册表中，不同的资源类型使用的注册方法不同，分别如下：\n\n* scheme.AddUnversionedTypes: 注册 UnversionedType 资源类型\n* scheme.AddKnownTypes: 注册 KnownType 资源类型\n* scheme.AddKnownTypesWithName: 注册 KnownType 资源类型，须指定资源的 Kind 资源种类名称\n\n举例 scheme.AddKnownTypes 如下:\n\n```\nfunc (s *Scheme) AddKnownTypes(gv schema.GroupVersion,types ...object){\n    s.addObservedVersion(gv)\n    for _, obj := range types {\n        t := reflect.Typeof(obj)\n        // 通过 reflect 机制获取资源类型的名称作为资源种类名称\n        if t.Kind() != reflect.Ptr {\n            panic(\"All types must be pointers to structs.\")\n        }\n        t = t.Elem()\n        s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj)\n        // 调用这种注册方法\n    }\n}\n```\n\n## Codec 编解码器\n\n* Serializer: 序列化器，包含序列化操作与反序列化操作\n\n* Codec: 编解码器，包含编码器和解码器。\n> 编解码器指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。\n\n```\ntype Encoder interface{}\n// 编码器\ntype Decoder interface{}\n// 解码器\ntype Serializer interface{\n    Encoder\n    Decoder\n}\n// 只要实现了 Encoder 与 Decoder 方法的数据结构，就是序列化器\ntype Codec Serialier\n```\n\nCodec 编解码器包含3中序列化器：\n1. jsonSerializer: JSON 格式序列化/反序列化器。\n2. yamlSerializer: YAML 格式序列化/反序列化器。\n3. protobufSerializer: Protobuf 格式序列化/反序列化器。\n> 都使用 ContentType 作为标识。\n\n### Codec 编解码实例化\n\nCodec 编解码器通过 NewCodecFactory 函数实例化，NewCodecFactory -> newSerializersForSchem。\n分别都是通过 json.NewSerializer/json.NewYAMLSerializer/protobuf.NewSerializer 函数进行实例化。\n\n### json 和 yaml 序列化器\n\n* json 序列化器使用 Go 语言标准库 encoding/json 来实现序列化和反序列化。\n* yaml 序列化器使用第三方库 gopkg.in/yaml.v2 来实现序列化和反序列化。\n\n* json 和 yaml 序列化器共享同一个数据结构，通过 yaml 字段区分，如果该字段为 true 则使用 yaml 序列化器，否则为使用 json 序列化器。\n\n* 如果是 yaml 格式，第一步通过 caseSensitiveJsonIterator.Marshal 函数将资源对象转换为 Json 格式，第二步通过 yaml.JSONToYAML 将 JSON 格式转换为 YAML 格式并返回数据。\n\n* 如果是 JSON 格式，则通过 Go 语言标准库将资源对象转换为 JSON 格式。其中如果 pretty 参数开启的话，则通过 caseSensitiveJsonIterator.MarshalIndent 函数优化 JSON 格式。\n> caseSensitiveJsonIterator 函数实际封装了 github.com/json-iterator/go 第三方库，json-iterator 有如下几个好处。\n> 1. json-iterator 支持区分大小写。\n> 2. json-iterator 性能更优。\n> 3. json-iterator 100% 兼容 Go 语言标准库。\n\n### protobufSerializer 序列化器\n\nprotobuf 序列化器使用 proto 库来实现序列化和反序列操作。\n\n* 前缀有 magic-number 特殊标识。\n\n## Converter 资源版本转换器\n\n可以通过 kubectl convert 命令进行资源版本转换：\n\n```\n$ kubectl convert -f v1beta1Deployment.yaml --output-version=apps/v1\napiVersion: apps/v1\nkind: Deployment \n```\n\nkubernetes 系统中一个资源支持多个资源版本，每个资源版本都支持其他资源版本的转换，随着资源版本的增加，资源版本转换的定义会越来越多，这样处理起来非常麻烦。\n因此 kubernetes 通过内部版本机制实现资源版本转换。\n* 当需要在两个资源版本之间转换时，Converter 资源版本转换器先将第一个资源版本转换为 __internal 内部版本，再转换为相应的资源版本。\n* 每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换。\n\n### Converter 转换器数据结构\n\nConverter 转换器数据结构主要存放转换函数（即 Conversion Funcs）。\n\n```\ntype Converter struct {\n    conversionFuncs          ConversionFuncs\n    // 默认转换函数\n    generatedConversionFuncs ConversionFuncs\n    // 自动生成的转换函数\n    ignoredConversions       map[typePair]stuct{}\n    // 若资源对象注册到此字段，则忽略此资源对象的转换操作\n    nameFunc                 func(t reflect.Type) string\n    // 在转换过程中其用于获取资源种类的名称\n    ...\n}\n\ntype ConversionFuncs struct {\n    fns     map[typePair]reflect.Value\n    untyped map[typePair]ConversionFunc\n}\n\ntype typePair struct {\n    source reflect.Type\n    dest   reflect.Type\n}\n\ntype ConversionFunc func(a, b interface{}, scope Scope) error\n// 将资源对象 a 转换为资源对象 b，scope 定义了多次转换机制。\n```\n\n### Converter 注册转换函数\n\nConverter 转换函数需要通过注册才能在 Kubernetes 内部使用，目前支持 5 个注册转换函数。\n1. 注册忽略的资源类型。\n2. 注册多个 Conversion Func 转换函数。\n3. 注册单个 Conversion Func 转换函数。\n4. 注册自动生成的转换函数。\n5. 注册字段标签的转换函数。\n\n### Convert 资源版本转换原理\n\nConverter Example（将 Deployment 资源对象从 v1beta1 -> v1） 代码示例如下：\n\n```\nfunc main() {\n    // 第一部分：实例化一个空的 Scheme 资源注册表，将 v1beta1、v1的资源版本及内部版本的 Deployment 资源注册到 Scheme 资源注册表中。\n    scheme := runtime.NewScheme()\n    scheme.AddKnownTypes(appsv1beta1.SchemeGroupVersion, &appsv1beta1.Deployment{})\n    scheme.AddKnownTypes(appsv1.SchemeGroupVerison, &appsv1.Deployment{})\n    scheme.AddKnownTypes(apps.SchemeGroupVersion, &appsv1.Deployment{})\n    metav1.AddToGroupVersion(scheme, appsv1beta1.SchemeGroupVersion)\n    metav1.AddToGroupVersion(scheme, appsv1.SchemeGroupVersion)\n   \n    // 第二部分：实例化 v1beta1Deployment 资源对象，\n    v1beta1Deployment := &appsv1beta1.Deployment{\n        TypeMeta: metav1.TypeMeta{\n            Kind:       \"Deployment\",\n            APIVersion: \"apps/v1beta1\",\n        }\n    }\n    \n    // 通过 scheme.ConvertToVersion 将其转换为内部版本\n    // v1beta1 -> __internal\n    objInternal, err := scheme.ConvertToVersion(v1beta1Deployment, apps.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"GVK\", objinternal.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: /, Kind =\n\n    // 通过 scheme.ConvertToVersion 转换为目标资源版本，并通过断言的方式来判断是否转换成功。\n    // __internal -> v1\n    objV1, err := scheme.ConvertToVersion(objInternal, appsv1.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    v1Deployment, ok := objV1.(*appsV1.Deployment)\n    if !ok {\n        panic(\"Got wrong type\")\n    }\n    fmtPrintln(\"GVK: \", v1Deployment.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: apps/v1, Kind = Deployment \n}\n```\n\nScheme 资源注册表可以通过两种方式进行版本转换：\n1. 将传入的资源对象转换成目标资源版本之前，会将资源对象深复制一份后再执行转换操作，相当于安全的内存对象转换操作。\n2. 在资源对象转换的过程中，不会深复制资源对象，而是直接对原资源对象进行转换操作，尽可能高效地实现转换，是非安全的内存对象转换操作。\n\n下面是 Converter 转换器流程：\n\n![Convert转换器流程图](../image/Converter转换器.jpg)\n\n1. 获取传入的资源对象的反射类型\n\n因为在 Scheme 资源注册表中是以反射类型注册资源的\n\n```\nt = reflect.Typeof(in).Elem()\n```\n\n2. 从资源注册表中查找到传入的资源对象的 GVK \n\n```\nkinds, ok := s.typeToGVK[t]\nif !ok || len(kinds) == 0 {\n    return nil, NewNotRegisteredErrForType(s.schemeName, t)\n}\n```\n\n3. 从多个 GVK 中选出与目标资源对象相匹配的 GVK\n\n这里有个优缺点，转换过程是相对耗时的，大量的相同资源之间进行版本转换的耗时会比较长。因此如果目标资源对象的 GVK 在可转换的 GVK 列表中，则直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK，而无须执行转换操作，缩短部分耗时。\n\n```\ngvk, ok := target.KindForGroupVersionKinds(kinds)\n...\nfor _, kind := range kinds {\n    if gvk == kind {\n        retrurn copyAndSetTargetKind(copy, in, gvk)\n    }\n}\n```\n\n4. 判断传入的资源对象是否属于 Unversioned 类型\n\n属于该类型的资源对象并不需要进行转换操作，而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK。\n\n```\nif unversionedKind, ok := s.unversionedTypes[t]; ok {\n    ...\n    return copyAndSetTargetKind(copy, in, unversionedKind)\n}\n```\n\n5. 执行转换操作\n\n在执行转换操作之前，先判断是否需要对传入的资源对象执行深复制操作，然后通过 s.converter.Convert 转换函数执行转换操作，代码示例如下：\n\n```\nif copy {\n    in = in.DeepCopyObject()\n}\nif err := s.converter.Convert(in, out, flags, meta); err != nil {\n    return nil, err\n}\n```\n\n实际的转换函数是通过 doConversion 函数执行的：\n\n```\nfunc (c *Converter) doConversion(src, dest interface{}, flags FieldMatchingFlags, meta *Meta, f conversionFunc) error {\n    pair := typePair{reflect.TypeOf(src), reflect.TypeOf(dest)}\n    ...\n    // 若在默认转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.conversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n    // 若在自动生成的转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.generatedConversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n    \n    // 如果不在以上两个列表中，则使用 doConversion 函数传入的转换函数（即 f），调用 f 之前，需要将 src 与 dest 资源对象通过 EnforcePtr 函数取指针的值。\n    // 因为 doConversion 函数传入的转换函数接收的是非指针资源对象。\n    dv, err := EnforcePtr(dest)\n    sv, err := EnforcePtr(src)\n    ...\n    return f(sv, dv, scope)\n}\n```\n\n6. 设置转换后资源对象的 GVK \n\n前面的 Converter Example 代码示例的第二部分中，将 v1beta1 资源版本转换为内部版本，得到转换后资源对象的 GVK 为 ”/,Kind=“，原因在于 setTargetKind 函数，转换操作执行完成后，通过 setTargetKind 函数设置转换后资源对象的 GVK，判断当前资源对象是否是内部版本，是的话，设置 GVK 为 scheme.GroupVersionKind{}。\n\n```\nsetTargetKind(out, gvk)\n\nfunc setTargetKind(obj Object, kind schema.GroupVersionKind) {\n    if kind.Version == APIVersionInternal {\n        obj.GetObjectKind().SetGroupVersionKind(scheme.GroupVersionKind{})\n        return\n    }\n    obj.GetObjectKind().SetGroupVersionKind(kind)\n}\n```\n","slug":"Kubernetes-data-structure-2","published":1,"updated":"2020-11-23T13:25:24.140Z","_id":"ckhsqrbhk0000nf8jcpfy1z44","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><h3 id=\"结构化数据\"><a href=\"#结构化数据\" class=\"headerlink\" title=\"结构化数据\"></a>结构化数据</h3><p>预先知道数据结构的数据类型是结构化数据。要使用这种数据，需要创建一个 struct 数据结构，并且可以通过 Go 语言的 json 库进行反序列化操作。</p>\n<h3 id=\"非结构化数据\"><a href=\"#非结构化数据\" class=\"headerlink\" title=\"非结构化数据\"></a>非结构化数据</h3><p>无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据，其无法通过构建预定的 struct 数据结构来序列化或反序列化数据。</p>\n<p>可以通过如下结构来解决问题：</p>\n<pre><code>var result map[string]interface{}</code></pre>\n<blockquote>\n<p>interface {}类型对应值，可以是任何类型，使用 interface 字段时，通过 Go 语言断言的方式进行类型转换。</p>\n</blockquote>\n<pre><code>if description, ok := result[\"description\"].(string); ok {\n    fmt.Println(description)\n}</code></pre>\n<h2 id=\"Scheme-资源注册表\"><a href=\"#Scheme-资源注册表\" class=\"headerlink\" title=\"Scheme 资源注册表\"></a>Scheme 资源注册表</h2><p>Kubernetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册、存储、查询、管理等机制。目前 Kubernetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是一个内存型的资源注册表。</p>\n<p>Scheme 资源注册表支持如下两种类型：</p>\n<ul>\n<li><p>UnversionedType: 无版本资源类型，这是早期 Kubernetes 系统中的概念，它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。</p>\n</li>\n<li><p>KnownType: 目前 Kubernetes 最常用的资源类型，也可称其为“拥有版本的资源类型”。</p>\n</li>\n</ul>\n<h3 id=\"Scheme-资源注册表数据结构\"><a href=\"#Scheme-资源注册表数据结构\" class=\"headerlink\" title=\"Scheme 资源注册表数据结构\"></a>Scheme 资源注册表数据结构</h3><p>Scheme 资源注册表数据结构主要由4个map结构组成，分别是：</p>\n<pre><code>type Scheme struct {\n    gvkToType map[scheme.GroupVersionKind]reflect.Type\n    // 存储 GVK 与 Type 的映射关系\n\n    typeToGVK map[reflect.Type][]scheme.GroupVersionKind\n    // 存储 Type 与 GVK 的映射关系，一个 Type 会对应一个或多个 GVK\n\n    unversionedTypes map[reflect.Type]scheme.GroupVersionKind\n    // 存储 UnversionedType 与 GVK 的映射关系\n\n    unversionedKinds map[string]reflect.Type\n    // 存储 Kind 名称与 UnversionedType 的映射关系 \n}</code></pre>\n<blockquote>\n<p>这些映射关系可以实现高效的正向和反向检索。</p>\n</blockquote>\n<p>Scheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构，Scheme Example 代码示例如下：</p>\n<pre><code>func main() {\n    // KnownType external\n    coreGV := schema.GroupVersion{Group:\"\", Version: \"v1\"}\n    extensionsGV := schema.GroupVersion{Group: \"extensions\", Version: \"v1beta1\"}\n\n    // KnownType internal\n    coreInternalGV := schema.GroupVersion{Group: \"\", Version: runtime.APIVersionInternal}\n\n    // UnversionedType \n    Unversioned := schema.GroupVersion{Group: \"\", Version: \"v1\"}\n\n    schema := runtime.NewScheme()\n    scheme.AddKnownTypes(coreGV, &amp;corev1.Pod{})\n    scheme.AddKnownTypes(extensionsGV, &amp;appsv1.DaemonSet{})\n    scheme.AddKnownTypes(coreInternalGV, &amp;corev1.Pod{})\n    scheme.AddUnversionedTypes(Unversioned, &amp;metav1.Status{})\n    // 注册资源类型到 Scheme 资源注册表有以上两种方式\n}</code></pre>\n<ul>\n<li><p>GVK 在 Scheme 资源注册表中以 <group>/<version>,Kind=<kind>的形式存在，其中对于 Kind 字段，在注册时如果不指定该字段的名称，那么默认使用类型的名称，通过 reflect 机制获取资源类型的名称。</kind></version></group></p>\n</li>\n<li><p>资源类型在 Scheme 资源注册表中以 Go Type（通过 reflect 机制获取）形式存在。</p>\n</li>\n</ul>\n<blockquote>\n<p>需要注意的是，UnversionecdType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在4个 map 结构中，代码示例如下：</p>\n</blockquote>\n<pre><code>func (s *Scheme) AddUnversionedTypes(version schema.GroupVersion, types ...Object) {\n    ...\n    s.AddKnownTypes(version, types...)\n    // 1\n    for _, obj := range types {\n        t := reflect.TypeOf(obj).Elem()\n        gvk := version.WithKind(t.Name())\n        // 2\n        s.unversionedTypes[t] = gvk\n        // 3\n        ...\n        s.unversionedKinds[gvk.Kind] = t\n        // 4\n    }\n}</code></pre>\n<h3 id=\"资源注册表注册方法\"><a href=\"#资源注册表注册方法\" class=\"headerlink\" title=\"资源注册表注册方法\"></a>资源注册表注册方法</h3><p>在 Scheme 资源注册表中，不同的资源类型使用的注册方法不同，分别如下：</p>\n<ul>\n<li>scheme.AddUnversionedTypes: 注册 UnversionedType 资源类型</li>\n<li>scheme.AddKnownTypes: 注册 KnownType 资源类型</li>\n<li>scheme.AddKnownTypesWithName: 注册 KnownType 资源类型，须指定资源的 Kind 资源种类名称</li>\n</ul>\n<p>举例 scheme.AddKnownTypes 如下:</p>\n<pre><code>func (s *Scheme) AddKnownTypes(gv schema.GroupVersion,types ...object){\n    s.addObservedVersion(gv)\n    for _, obj := range types {\n        t := reflect.Typeof(obj)\n        // 通过 reflect 机制获取资源类型的名称作为资源种类名称\n        if t.Kind() != reflect.Ptr {\n            panic(\"All types must be pointers to structs.\")\n        }\n        t = t.Elem()\n        s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj)\n        // 调用这种注册方法\n    }\n}</code></pre>\n<h2 id=\"Codec-编解码器\"><a href=\"#Codec-编解码器\" class=\"headerlink\" title=\"Codec 编解码器\"></a>Codec 编解码器</h2><ul>\n<li><p>Serializer: 序列化器，包含序列化操作与反序列化操作</p>\n</li>\n<li><p>Codec: 编解码器，包含编码器和解码器。</p>\n<blockquote>\n<p>编解码器指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>type Encoder interface{}\n// 编码器\ntype Decoder interface{}\n// 解码器\ntype Serializer interface{\n    Encoder\n    Decoder\n}\n// 只要实现了 Encoder 与 Decoder 方法的数据结构，就是序列化器\ntype Codec Serialier</code></pre>\n<p>Codec 编解码器包含3中序列化器：</p>\n<ol>\n<li>jsonSerializer: JSON 格式序列化/反序列化器。</li>\n<li>yamlSerializer: YAML 格式序列化/反序列化器。</li>\n<li>protobufSerializer: Protobuf 格式序列化/反序列化器。<blockquote>\n<p>都使用 ContentType 作为标识。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Codec-编解码实例化\"><a href=\"#Codec-编解码实例化\" class=\"headerlink\" title=\"Codec 编解码实例化\"></a>Codec 编解码实例化</h3><p>Codec 编解码器通过 NewCodecFactory 函数实例化，NewCodecFactory -&gt; newSerializersForSchem。<br>分别都是通过 json.NewSerializer/json.NewYAMLSerializer/protobuf.NewSerializer 函数进行实例化。</p>\n<h3 id=\"json-和-yaml-序列化器\"><a href=\"#json-和-yaml-序列化器\" class=\"headerlink\" title=\"json 和 yaml 序列化器\"></a>json 和 yaml 序列化器</h3><ul>\n<li><p>json 序列化器使用 Go 语言标准库 encoding/json 来实现序列化和反序列化。</p>\n</li>\n<li><p>yaml 序列化器使用第三方库 gopkg.in/yaml.v2 来实现序列化和反序列化。</p>\n</li>\n<li><p>json 和 yaml 序列化器共享同一个数据结构，通过 yaml 字段区分，如果该字段为 true 则使用 yaml 序列化器，否则为使用 json 序列化器。</p>\n</li>\n<li><p>如果是 yaml 格式，第一步通过 caseSensitiveJsonIterator.Marshal 函数将资源对象转换为 Json 格式，第二步通过 yaml.JSONToYAML 将 JSON 格式转换为 YAML 格式并返回数据。</p>\n</li>\n<li><p>如果是 JSON 格式，则通过 Go 语言标准库将资源对象转换为 JSON 格式。其中如果 pretty 参数开启的话，则通过 caseSensitiveJsonIterator.MarshalIndent 函数优化 JSON 格式。</p>\n<blockquote>\n<p>caseSensitiveJsonIterator 函数实际封装了 github.com/json-iterator/go 第三方库，json-iterator 有如下几个好处。</p>\n<ol>\n<li>json-iterator 支持区分大小写。</li>\n<li>json-iterator 性能更优。</li>\n<li>json-iterator 100% 兼容 Go 语言标准库。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"protobufSerializer-序列化器\"><a href=\"#protobufSerializer-序列化器\" class=\"headerlink\" title=\"protobufSerializer 序列化器\"></a>protobufSerializer 序列化器</h3><p>protobuf 序列化器使用 proto 库来实现序列化和反序列操作。</p>\n<ul>\n<li>前缀有 magic-number 特殊标识。</li>\n</ul>\n<h2 id=\"Converter-资源版本转换器\"><a href=\"#Converter-资源版本转换器\" class=\"headerlink\" title=\"Converter 资源版本转换器\"></a>Converter 资源版本转换器</h2><p>可以通过 kubectl convert 命令进行资源版本转换：</p>\n<pre><code>$ kubectl convert -f v1beta1Deployment.yaml --output-version=apps/v1\napiVersion: apps/v1\nkind: Deployment </code></pre>\n<p>kubernetes 系统中一个资源支持多个资源版本，每个资源版本都支持其他资源版本的转换，随着资源版本的增加，资源版本转换的定义会越来越多，这样处理起来非常麻烦。<br>因此 kubernetes 通过内部版本机制实现资源版本转换。</p>\n<ul>\n<li>当需要在两个资源版本之间转换时，Converter 资源版本转换器先将第一个资源版本转换为 __internal 内部版本，再转换为相应的资源版本。</li>\n<li>每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换。</li>\n</ul>\n<h3 id=\"Converter-转换器数据结构\"><a href=\"#Converter-转换器数据结构\" class=\"headerlink\" title=\"Converter 转换器数据结构\"></a>Converter 转换器数据结构</h3><p>Converter 转换器数据结构主要存放转换函数（即 Conversion Funcs）。</p>\n<pre><code>type Converter struct {\n    conversionFuncs          ConversionFuncs\n    // 默认转换函数\n    generatedConversionFuncs ConversionFuncs\n    // 自动生成的转换函数\n    ignoredConversions       map[typePair]stuct{}\n    // 若资源对象注册到此字段，则忽略此资源对象的转换操作\n    nameFunc                 func(t reflect.Type) string\n    // 在转换过程中其用于获取资源种类的名称\n    ...\n}\n\ntype ConversionFuncs struct {\n    fns     map[typePair]reflect.Value\n    untyped map[typePair]ConversionFunc\n}\n\ntype typePair struct {\n    source reflect.Type\n    dest   reflect.Type\n}\n\ntype ConversionFunc func(a, b interface{}, scope Scope) error\n// 将资源对象 a 转换为资源对象 b，scope 定义了多次转换机制。</code></pre>\n<h3 id=\"Converter-注册转换函数\"><a href=\"#Converter-注册转换函数\" class=\"headerlink\" title=\"Converter 注册转换函数\"></a>Converter 注册转换函数</h3><p>Converter 转换函数需要通过注册才能在 Kubernetes 内部使用，目前支持 5 个注册转换函数。</p>\n<ol>\n<li>注册忽略的资源类型。</li>\n<li>注册多个 Conversion Func 转换函数。</li>\n<li>注册单个 Conversion Func 转换函数。</li>\n<li>注册自动生成的转换函数。</li>\n<li>注册字段标签的转换函数。</li>\n</ol>\n<h3 id=\"Convert-资源版本转换原理\"><a href=\"#Convert-资源版本转换原理\" class=\"headerlink\" title=\"Convert 资源版本转换原理\"></a>Convert 资源版本转换原理</h3><p>Converter Example（将 Deployment 资源对象从 v1beta1 -&gt; v1） 代码示例如下：</p>\n<pre><code>func main() {\n    // 第一部分：实例化一个空的 Scheme 资源注册表，将 v1beta1、v1的资源版本及内部版本的 Deployment 资源注册到 Scheme 资源注册表中。\n    scheme := runtime.NewScheme()\n    scheme.AddKnownTypes(appsv1beta1.SchemeGroupVersion, &amp;appsv1beta1.Deployment{})\n    scheme.AddKnownTypes(appsv1.SchemeGroupVerison, &amp;appsv1.Deployment{})\n    scheme.AddKnownTypes(apps.SchemeGroupVersion, &amp;appsv1.Deployment{})\n    metav1.AddToGroupVersion(scheme, appsv1beta1.SchemeGroupVersion)\n    metav1.AddToGroupVersion(scheme, appsv1.SchemeGroupVersion)\n\n    // 第二部分：实例化 v1beta1Deployment 资源对象，\n    v1beta1Deployment := &amp;appsv1beta1.Deployment{\n        TypeMeta: metav1.TypeMeta{\n            Kind:       \"Deployment\",\n            APIVersion: \"apps/v1beta1\",\n        }\n    }\n\n    // 通过 scheme.ConvertToVersion 将其转换为内部版本\n    // v1beta1 -&gt; __internal\n    objInternal, err := scheme.ConvertToVersion(v1beta1Deployment, apps.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"GVK\", objinternal.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: /, Kind =\n\n    // 通过 scheme.ConvertToVersion 转换为目标资源版本，并通过断言的方式来判断是否转换成功。\n    // __internal -&gt; v1\n    objV1, err := scheme.ConvertToVersion(objInternal, appsv1.SchemeGroupVersion)\n    if err != nil {\n        panic(err)\n    }\n    v1Deployment, ok := objV1.(*appsV1.Deployment)\n    if !ok {\n        panic(\"Got wrong type\")\n    }\n    fmtPrintln(\"GVK: \", v1Deployment.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: apps/v1, Kind = Deployment \n}</code></pre>\n<p>Scheme 资源注册表可以通过两种方式进行版本转换：</p>\n<ol>\n<li>将传入的资源对象转换成目标资源版本之前，会将资源对象深复制一份后再执行转换操作，相当于安全的内存对象转换操作。</li>\n<li>在资源对象转换的过程中，不会深复制资源对象，而是直接对原资源对象进行转换操作，尽可能高效地实现转换，是非安全的内存对象转换操作。</li>\n</ol>\n<p>下面是 Converter 转换器流程：</p>\n<p><img src=\"../image/Converter%E8%BD%AC%E6%8D%A2%E5%99%A8.jpg\" alt=\"Convert转换器流程图\"></p>\n<ol>\n<li>获取传入的资源对象的反射类型</li>\n</ol>\n<p>因为在 Scheme 资源注册表中是以反射类型注册资源的</p>\n<pre><code>t = reflect.Typeof(in).Elem()</code></pre>\n<ol start=\"2\">\n<li>从资源注册表中查找到传入的资源对象的 GVK </li>\n</ol>\n<pre><code>kinds, ok := s.typeToGVK[t]\nif !ok || len(kinds) == 0 {\n    return nil, NewNotRegisteredErrForType(s.schemeName, t)\n}</code></pre>\n<ol start=\"3\">\n<li>从多个 GVK 中选出与目标资源对象相匹配的 GVK</li>\n</ol>\n<p>这里有个优缺点，转换过程是相对耗时的，大量的相同资源之间进行版本转换的耗时会比较长。因此如果目标资源对象的 GVK 在可转换的 GVK 列表中，则直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK，而无须执行转换操作，缩短部分耗时。</p>\n<pre><code>gvk, ok := target.KindForGroupVersionKinds(kinds)\n...\nfor _, kind := range kinds {\n    if gvk == kind {\n        retrurn copyAndSetTargetKind(copy, in, gvk)\n    }\n}</code></pre>\n<ol start=\"4\">\n<li>判断传入的资源对象是否属于 Unversioned 类型</li>\n</ol>\n<p>属于该类型的资源对象并不需要进行转换操作，而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK。</p>\n<pre><code>if unversionedKind, ok := s.unversionedTypes[t]; ok {\n    ...\n    return copyAndSetTargetKind(copy, in, unversionedKind)\n}</code></pre>\n<ol start=\"5\">\n<li>执行转换操作</li>\n</ol>\n<p>在执行转换操作之前，先判断是否需要对传入的资源对象执行深复制操作，然后通过 s.converter.Convert 转换函数执行转换操作，代码示例如下：</p>\n<pre><code>if copy {\n    in = in.DeepCopyObject()\n}\nif err := s.converter.Convert(in, out, flags, meta); err != nil {\n    return nil, err\n}</code></pre>\n<p>实际的转换函数是通过 doConversion 函数执行的：</p>\n<pre><code>func (c *Converter) doConversion(src, dest interface{}, flags FieldMatchingFlags, meta *Meta, f conversionFunc) error {\n    pair := typePair{reflect.TypeOf(src), reflect.TypeOf(dest)}\n    ...\n    // 若在默认转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.conversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n    // 若在自动生成的转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.generatedConversionFuncs.untyped[pair]; ok {\n        return fn(src, dest, scope)\n    }\n\n    // 如果不在以上两个列表中，则使用 doConversion 函数传入的转换函数（即 f），调用 f 之前，需要将 src 与 dest 资源对象通过 EnforcePtr 函数取指针的值。\n    // 因为 doConversion 函数传入的转换函数接收的是非指针资源对象。\n    dv, err := EnforcePtr(dest)\n    sv, err := EnforcePtr(src)\n    ...\n    return f(sv, dv, scope)\n}</code></pre>\n<ol start=\"6\">\n<li>设置转换后资源对象的 GVK </li>\n</ol>\n<p>前面的 Converter Example 代码示例的第二部分中，将 v1beta1 资源版本转换为内部版本，得到转换后资源对象的 GVK 为 ”/,Kind=“，原因在于 setTargetKind 函数，转换操作执行完成后，通过 setTargetKind 函数设置转换后资源对象的 GVK，判断当前资源对象是否是内部版本，是的话，设置 GVK 为 scheme.GroupVersionKind{}。</p>\n<pre><code>setTargetKind(out, gvk)\n\nfunc setTargetKind(obj Object, kind schema.GroupVersionKind) {\n    if kind.Version == APIVersionInternal {\n        obj.GetObjectKind().SetGroupVersionKind(scheme.GroupVersionKind{})\n        return\n    }\n    obj.GetObjectKind().SetGroupVersionKind(kind)\n}</code></pre>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><h3 id=\"结构化数据\"><a href=\"#结构化数据\" class=\"headerlink\" title=\"结构化数据\"></a>结构化数据</h3><p>预先知道数据结构的数据类型是结构化数据。要使用这种数据，需要创建一个 struct 数据结构，并且可以通过 Go 语言的 json 库进行反序列化操作。</p>\n<h3 id=\"非结构化数据\"><a href=\"#非结构化数据\" class=\"headerlink\" title=\"非结构化数据\"></a>非结构化数据</h3><p>无法预知数据结构的数据类型或属性名称不确定的数据类型是非结构化数据，其无法通过构建预定的 struct 数据结构来序列化或反序列化数据。</p>\n<p>可以通过如下结构来解决问题：</p>\n<pre><code>var result map[string]interface&#123;&#125;</code></pre>\n<blockquote>\n<p>interface {}类型对应值，可以是任何类型，使用 interface 字段时，通过 Go 语言断言的方式进行类型转换。</p>\n</blockquote>\n<pre><code>if description, ok := result[&quot;description&quot;].(string); ok &#123;\n    fmt.Println(description)\n&#125;</code></pre>\n<h2 id=\"Scheme-资源注册表\"><a href=\"#Scheme-资源注册表\" class=\"headerlink\" title=\"Scheme 资源注册表\"></a>Scheme 资源注册表</h2><p>Kubernetes 系统拥有众多资源，每一种资源就是一个资源类型，这些资源类型需要有统一的注册、存储、查询、管理等机制。目前 Kubernetes 系统中的所有资源类型都已注册到 Scheme 资源注册表中，其是一个内存型的资源注册表。</p>\n<p>Scheme 资源注册表支持如下两种类型：</p>\n<ul>\n<li><p>UnversionedType: 无版本资源类型，这是早期 Kubernetes 系统中的概念，它主要应用于某些没有版本的资源类型，该类型的资源对象并不需要进行转换。</p>\n</li>\n<li><p>KnownType: 目前 Kubernetes 最常用的资源类型，也可称其为“拥有版本的资源类型”。</p>\n</li>\n</ul>\n<h3 id=\"Scheme-资源注册表数据结构\"><a href=\"#Scheme-资源注册表数据结构\" class=\"headerlink\" title=\"Scheme 资源注册表数据结构\"></a>Scheme 资源注册表数据结构</h3><p>Scheme 资源注册表数据结构主要由4个map结构组成，分别是：</p>\n<pre><code>type Scheme struct &#123;\n    gvkToType map[scheme.GroupVersionKind]reflect.Type\n    // 存储 GVK 与 Type 的映射关系\n\n    typeToGVK map[reflect.Type][]scheme.GroupVersionKind\n    // 存储 Type 与 GVK 的映射关系，一个 Type 会对应一个或多个 GVK\n\n    unversionedTypes map[reflect.Type]scheme.GroupVersionKind\n    // 存储 UnversionedType 与 GVK 的映射关系\n\n    unversionedKinds map[string]reflect.Type\n    // 存储 Kind 名称与 UnversionedType 的映射关系 \n&#125;</code></pre>\n<blockquote>\n<p>这些映射关系可以实现高效的正向和反向检索。</p>\n</blockquote>\n<p>Scheme 资源注册表在 Kubernetes 系统体系中属于非常核心的数据结构，Scheme Example 代码示例如下：</p>\n<pre><code>func main() &#123;\n    // KnownType external\n    coreGV := schema.GroupVersion&#123;Group:&quot;&quot;, Version: &quot;v1&quot;&#125;\n    extensionsGV := schema.GroupVersion&#123;Group: &quot;extensions&quot;, Version: &quot;v1beta1&quot;&#125;\n\n    // KnownType internal\n    coreInternalGV := schema.GroupVersion&#123;Group: &quot;&quot;, Version: runtime.APIVersionInternal&#125;\n\n    // UnversionedType \n    Unversioned := schema.GroupVersion&#123;Group: &quot;&quot;, Version: &quot;v1&quot;&#125;\n\n    schema := runtime.NewScheme()\n    scheme.AddKnownTypes(coreGV, &amp;corev1.Pod&#123;&#125;)\n    scheme.AddKnownTypes(extensionsGV, &amp;appsv1.DaemonSet&#123;&#125;)\n    scheme.AddKnownTypes(coreInternalGV, &amp;corev1.Pod&#123;&#125;)\n    scheme.AddUnversionedTypes(Unversioned, &amp;metav1.Status&#123;&#125;)\n    // 注册资源类型到 Scheme 资源注册表有以上两种方式\n&#125;</code></pre>\n<ul>\n<li><p>GVK 在 Scheme 资源注册表中以 <group>/<version>,Kind=<kind>的形式存在，其中对于 Kind 字段，在注册时如果不指定该字段的名称，那么默认使用类型的名称，通过 reflect 机制获取资源类型的名称。</p>\n</li>\n<li><p>资源类型在 Scheme 资源注册表中以 Go Type（通过 reflect 机制获取）形式存在。</p>\n</li>\n</ul>\n<blockquote>\n<p>需要注意的是，UnversionecdType 类型的对象在通过 scheme.AddUnversionedTypes 方法注册时，会同时存在4个 map 结构中，代码示例如下：</p>\n</blockquote>\n<pre><code>func (s *Scheme) AddUnversionedTypes(version schema.GroupVersion, types ...Object) &#123;\n    ...\n    s.AddKnownTypes(version, types...)\n    // 1\n    for _, obj := range types &#123;\n        t := reflect.TypeOf(obj).Elem()\n        gvk := version.WithKind(t.Name())\n        // 2\n        s.unversionedTypes[t] = gvk\n        // 3\n        ...\n        s.unversionedKinds[gvk.Kind] = t\n        // 4\n    &#125;\n&#125;</code></pre>\n<h3 id=\"资源注册表注册方法\"><a href=\"#资源注册表注册方法\" class=\"headerlink\" title=\"资源注册表注册方法\"></a>资源注册表注册方法</h3><p>在 Scheme 资源注册表中，不同的资源类型使用的注册方法不同，分别如下：</p>\n<ul>\n<li>scheme.AddUnversionedTypes: 注册 UnversionedType 资源类型</li>\n<li>scheme.AddKnownTypes: 注册 KnownType 资源类型</li>\n<li>scheme.AddKnownTypesWithName: 注册 KnownType 资源类型，须指定资源的 Kind 资源种类名称</li>\n</ul>\n<p>举例 scheme.AddKnownTypes 如下:</p>\n<pre><code>func (s *Scheme) AddKnownTypes(gv schema.GroupVersion,types ...object)&#123;\n    s.addObservedVersion(gv)\n    for _, obj := range types &#123;\n        t := reflect.Typeof(obj)\n        // 通过 reflect 机制获取资源类型的名称作为资源种类名称\n        if t.Kind() != reflect.Ptr &#123;\n            panic(&quot;All types must be pointers to structs.&quot;)\n        &#125;\n        t = t.Elem()\n        s.AddKnownTypeWithName(gv.WithKind(t.Name()), obj)\n        // 调用这种注册方法\n    &#125;\n&#125;</code></pre>\n<h2 id=\"Codec-编解码器\"><a href=\"#Codec-编解码器\" class=\"headerlink\" title=\"Codec 编解码器\"></a>Codec 编解码器</h2><ul>\n<li><p>Serializer: 序列化器，包含序列化操作与反序列化操作</p>\n</li>\n<li><p>Codec: 编解码器，包含编码器和解码器。</p>\n<blockquote>\n<p>编解码器指的是可以表示数据的任何格式，或者将数据转换为特定格式的过程。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>type Encoder interface&#123;&#125;\n// 编码器\ntype Decoder interface&#123;&#125;\n// 解码器\ntype Serializer interface&#123;\n    Encoder\n    Decoder\n&#125;\n// 只要实现了 Encoder 与 Decoder 方法的数据结构，就是序列化器\ntype Codec Serialier</code></pre>\n<p>Codec 编解码器包含3中序列化器：</p>\n<ol>\n<li>jsonSerializer: JSON 格式序列化/反序列化器。</li>\n<li>yamlSerializer: YAML 格式序列化/反序列化器。</li>\n<li>protobufSerializer: Protobuf 格式序列化/反序列化器。<blockquote>\n<p>都使用 ContentType 作为标识。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Codec-编解码实例化\"><a href=\"#Codec-编解码实例化\" class=\"headerlink\" title=\"Codec 编解码实例化\"></a>Codec 编解码实例化</h3><p>Codec 编解码器通过 NewCodecFactory 函数实例化，NewCodecFactory -&gt; newSerializersForSchem。<br>分别都是通过 json.NewSerializer/json.NewYAMLSerializer/protobuf.NewSerializer 函数进行实例化。</p>\n<h3 id=\"json-和-yaml-序列化器\"><a href=\"#json-和-yaml-序列化器\" class=\"headerlink\" title=\"json 和 yaml 序列化器\"></a>json 和 yaml 序列化器</h3><ul>\n<li><p>json 序列化器使用 Go 语言标准库 encoding/json 来实现序列化和反序列化。</p>\n</li>\n<li><p>yaml 序列化器使用第三方库 gopkg.in/yaml.v2 来实现序列化和反序列化。</p>\n</li>\n<li><p>json 和 yaml 序列化器共享同一个数据结构，通过 yaml 字段区分，如果该字段为 true 则使用 yaml 序列化器，否则为使用 json 序列化器。</p>\n</li>\n<li><p>如果是 yaml 格式，第一步通过 caseSensitiveJsonIterator.Marshal 函数将资源对象转换为 Json 格式，第二步通过 yaml.JSONToYAML 将 JSON 格式转换为 YAML 格式并返回数据。</p>\n</li>\n<li><p>如果是 JSON 格式，则通过 Go 语言标准库将资源对象转换为 JSON 格式。其中如果 pretty 参数开启的话，则通过 caseSensitiveJsonIterator.MarshalIndent 函数优化 JSON 格式。</p>\n<blockquote>\n<p>caseSensitiveJsonIterator 函数实际封装了 github.com/json-iterator/go 第三方库，json-iterator 有如下几个好处。</p>\n<ol>\n<li>json-iterator 支持区分大小写。</li>\n<li>json-iterator 性能更优。</li>\n<li>json-iterator 100% 兼容 Go 语言标准库。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"protobufSerializer-序列化器\"><a href=\"#protobufSerializer-序列化器\" class=\"headerlink\" title=\"protobufSerializer 序列化器\"></a>protobufSerializer 序列化器</h3><p>protobuf 序列化器使用 proto 库来实现序列化和反序列操作。</p>\n<ul>\n<li>前缀有 magic-number 特殊标识。</li>\n</ul>\n<h2 id=\"Converter-资源版本转换器\"><a href=\"#Converter-资源版本转换器\" class=\"headerlink\" title=\"Converter 资源版本转换器\"></a>Converter 资源版本转换器</h2><p>可以通过 kubectl convert 命令进行资源版本转换：</p>\n<pre><code>$ kubectl convert -f v1beta1Deployment.yaml --output-version=apps/v1\napiVersion: apps/v1\nkind: Deployment </code></pre>\n<p>kubernetes 系统中一个资源支持多个资源版本，每个资源版本都支持其他资源版本的转换，随着资源版本的增加，资源版本转换的定义会越来越多，这样处理起来非常麻烦。<br>因此 kubernetes 通过内部版本机制实现资源版本转换。</p>\n<ul>\n<li>当需要在两个资源版本之间转换时，Converter 资源版本转换器先将第一个资源版本转换为 __internal 内部版本，再转换为相应的资源版本。</li>\n<li>每个资源只要能支持内部版本，就能与其他任何资源版本进行间接的资源版本转换。</li>\n</ul>\n<h3 id=\"Converter-转换器数据结构\"><a href=\"#Converter-转换器数据结构\" class=\"headerlink\" title=\"Converter 转换器数据结构\"></a>Converter 转换器数据结构</h3><p>Converter 转换器数据结构主要存放转换函数（即 Conversion Funcs）。</p>\n<pre><code>type Converter struct &#123;\n    conversionFuncs          ConversionFuncs\n    // 默认转换函数\n    generatedConversionFuncs ConversionFuncs\n    // 自动生成的转换函数\n    ignoredConversions       map[typePair]stuct&#123;&#125;\n    // 若资源对象注册到此字段，则忽略此资源对象的转换操作\n    nameFunc                 func(t reflect.Type) string\n    // 在转换过程中其用于获取资源种类的名称\n    ...\n&#125;\n\ntype ConversionFuncs struct &#123;\n    fns     map[typePair]reflect.Value\n    untyped map[typePair]ConversionFunc\n&#125;\n\ntype typePair struct &#123;\n    source reflect.Type\n    dest   reflect.Type\n&#125;\n\ntype ConversionFunc func(a, b interface&#123;&#125;, scope Scope) error\n// 将资源对象 a 转换为资源对象 b，scope 定义了多次转换机制。</code></pre>\n<h3 id=\"Converter-注册转换函数\"><a href=\"#Converter-注册转换函数\" class=\"headerlink\" title=\"Converter 注册转换函数\"></a>Converter 注册转换函数</h3><p>Converter 转换函数需要通过注册才能在 Kubernetes 内部使用，目前支持 5 个注册转换函数。</p>\n<ol>\n<li>注册忽略的资源类型。</li>\n<li>注册多个 Conversion Func 转换函数。</li>\n<li>注册单个 Conversion Func 转换函数。</li>\n<li>注册自动生成的转换函数。</li>\n<li>注册字段标签的转换函数。</li>\n</ol>\n<h3 id=\"Convert-资源版本转换原理\"><a href=\"#Convert-资源版本转换原理\" class=\"headerlink\" title=\"Convert 资源版本转换原理\"></a>Convert 资源版本转换原理</h3><p>Converter Example（将 Deployment 资源对象从 v1beta1 -&gt; v1） 代码示例如下：</p>\n<pre><code>func main() &#123;\n    // 第一部分：实例化一个空的 Scheme 资源注册表，将 v1beta1、v1的资源版本及内部版本的 Deployment 资源注册到 Scheme 资源注册表中。\n    scheme := runtime.NewScheme()\n    scheme.AddKnownTypes(appsv1beta1.SchemeGroupVersion, &amp;appsv1beta1.Deployment&#123;&#125;)\n    scheme.AddKnownTypes(appsv1.SchemeGroupVerison, &amp;appsv1.Deployment&#123;&#125;)\n    scheme.AddKnownTypes(apps.SchemeGroupVersion, &amp;appsv1.Deployment&#123;&#125;)\n    metav1.AddToGroupVersion(scheme, appsv1beta1.SchemeGroupVersion)\n    metav1.AddToGroupVersion(scheme, appsv1.SchemeGroupVersion)\n\n    // 第二部分：实例化 v1beta1Deployment 资源对象，\n    v1beta1Deployment := &amp;appsv1beta1.Deployment&#123;\n        TypeMeta: metav1.TypeMeta&#123;\n            Kind:       &quot;Deployment&quot;,\n            APIVersion: &quot;apps/v1beta1&quot;,\n        &#125;\n    &#125;\n\n    // 通过 scheme.ConvertToVersion 将其转换为内部版本\n    // v1beta1 -&gt; __internal\n    objInternal, err := scheme.ConvertToVersion(v1beta1Deployment, apps.SchemeGroupVersion)\n    if err != nil &#123;\n        panic(err)\n    &#125;\n    fmt.Println(&quot;GVK&quot;, objinternal.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: /, Kind =\n\n    // 通过 scheme.ConvertToVersion 转换为目标资源版本，并通过断言的方式来判断是否转换成功。\n    // __internal -&gt; v1\n    objV1, err := scheme.ConvertToVersion(objInternal, appsv1.SchemeGroupVersion)\n    if err != nil &#123;\n        panic(err)\n    &#125;\n    v1Deployment, ok := objV1.(*appsV1.Deployment)\n    if !ok &#123;\n        panic(&quot;Got wrong type&quot;)\n    &#125;\n    fmtPrintln(&quot;GVK: &quot;, v1Deployment.GetObjectKind().GroupVersionKind().String())\n    // output:\n    // GVK: apps/v1, Kind = Deployment \n&#125;</code></pre>\n<p>Scheme 资源注册表可以通过两种方式进行版本转换：</p>\n<ol>\n<li>将传入的资源对象转换成目标资源版本之前，会将资源对象深复制一份后再执行转换操作，相当于安全的内存对象转换操作。</li>\n<li>在资源对象转换的过程中，不会深复制资源对象，而是直接对原资源对象进行转换操作，尽可能高效地实现转换，是非安全的内存对象转换操作。</li>\n</ol>\n<p>下面是 Converter 转换器流程：</p>\n<p><img src=\"../image/Converter%E8%BD%AC%E6%8D%A2%E5%99%A8.jpg\" alt=\"Convert转换器流程图\"></p>\n<ol>\n<li>获取传入的资源对象的反射类型</li>\n</ol>\n<p>因为在 Scheme 资源注册表中是以反射类型注册资源的</p>\n<pre><code>t = reflect.Typeof(in).Elem()</code></pre>\n<ol start=\"2\">\n<li>从资源注册表中查找到传入的资源对象的 GVK </li>\n</ol>\n<pre><code>kinds, ok := s.typeToGVK[t]\nif !ok || len(kinds) == 0 &#123;\n    return nil, NewNotRegisteredErrForType(s.schemeName, t)\n&#125;</code></pre>\n<ol start=\"3\">\n<li>从多个 GVK 中选出与目标资源对象相匹配的 GVK</li>\n</ol>\n<p>这里有个优缺点，转换过程是相对耗时的，大量的相同资源之间进行版本转换的耗时会比较长。因此如果目标资源对象的 GVK 在可转换的 GVK 列表中，则直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK，而无须执行转换操作，缩短部分耗时。</p>\n<pre><code>gvk, ok := target.KindForGroupVersionKinds(kinds)\n...\nfor _, kind := range kinds &#123;\n    if gvk == kind &#123;\n        retrurn copyAndSetTargetKind(copy, in, gvk)\n    &#125;\n&#125;</code></pre>\n<ol start=\"4\">\n<li>判断传入的资源对象是否属于 Unversioned 类型</li>\n</ol>\n<p>属于该类型的资源对象并不需要进行转换操作，而是直接将传入的资源对象的 GVK 设置为目标资源对象的 GVK。</p>\n<pre><code>if unversionedKind, ok := s.unversionedTypes[t]; ok &#123;\n    ...\n    return copyAndSetTargetKind(copy, in, unversionedKind)\n&#125;</code></pre>\n<ol start=\"5\">\n<li>执行转换操作</li>\n</ol>\n<p>在执行转换操作之前，先判断是否需要对传入的资源对象执行深复制操作，然后通过 s.converter.Convert 转换函数执行转换操作，代码示例如下：</p>\n<pre><code>if copy &#123;\n    in = in.DeepCopyObject()\n&#125;\nif err := s.converter.Convert(in, out, flags, meta); err != nil &#123;\n    return nil, err\n&#125;</code></pre>\n<p>实际的转换函数是通过 doConversion 函数执行的：</p>\n<pre><code>func (c *Converter) doConversion(src, dest interface&#123;&#125;, flags FieldMatchingFlags, meta *Meta, f conversionFunc) error &#123;\n    pair := typePair&#123;reflect.TypeOf(src), reflect.TypeOf(dest)&#125;\n    ...\n    // 若在默认转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.conversionFuncs.untyped[pair]; ok &#123;\n        return fn(src, dest, scope)\n    &#125;\n    // 若在自动生成的转换函数列表，查找出 pair 对应的转换函数执行并返回\n    if fn, ok := c.generatedConversionFuncs.untyped[pair]; ok &#123;\n        return fn(src, dest, scope)\n    &#125;\n\n    // 如果不在以上两个列表中，则使用 doConversion 函数传入的转换函数（即 f），调用 f 之前，需要将 src 与 dest 资源对象通过 EnforcePtr 函数取指针的值。\n    // 因为 doConversion 函数传入的转换函数接收的是非指针资源对象。\n    dv, err := EnforcePtr(dest)\n    sv, err := EnforcePtr(src)\n    ...\n    return f(sv, dv, scope)\n&#125;</code></pre>\n<ol start=\"6\">\n<li>设置转换后资源对象的 GVK </li>\n</ol>\n<p>前面的 Converter Example 代码示例的第二部分中，将 v1beta1 资源版本转换为内部版本，得到转换后资源对象的 GVK 为 ”/,Kind=“，原因在于 setTargetKind 函数，转换操作执行完成后，通过 setTargetKind 函数设置转换后资源对象的 GVK，判断当前资源对象是否是内部版本，是的话，设置 GVK 为 scheme.GroupVersionKind{}。</p>\n<pre><code>setTargetKind(out, gvk)\n\nfunc setTargetKind(obj Object, kind schema.GroupVersionKind) &#123;\n    if kind.Version == APIVersionInternal &#123;\n        obj.GetObjectKind().SetGroupVersionKind(scheme.GroupVersionKind&#123;&#125;)\n        return\n    &#125;\n    obj.GetObjectKind().SetGroupVersionKind(kind)\n&#125;</code></pre>\n"},{"title":"kubectl 命令行交互","date":"2020-11-24T02:04:56.000Z","_content":"\n从 Kubernetes 架构设计的角度来看，kubectl 工具是 Kubernetes API Server 的客户端。一些命令可以自行查阅。\n\n## Cobra 命令行参数解析\n\nCobra 是一个创建强大的现代化 CLI 命令行应用程序的 Go 语言库，可以用来生成应用程序的文件。\n\nCobra Example:\n\n```\nfunc main() {\n    var Version bool\n    var rootCmd = &cobra.Command{\n        Use: \"root[sub]\",\n        Short: \"root command\",\n        Run: func(cmd *cobra.Command, args []string) {\n            fmt.Printf(\"Inside rootCmd Run with args: %v\\n\", args)\n            if Version {\n                fmt.Printf(\"Version: 1.0\\n\")\n            }\n        },\n    }\n\n    flags := rootCmd.Flags()\n    flags.BoolVarP(&Version, \"version\", \"v\", false, \"Print version information and quit\")\n    _ = rootCmd.Execute()\n}\n```\n\n由此可知 Cobra 基本应用步骤分为如下 3 步：\n\n1. 创建 rootCmd 主命令，并定义 Run 执行函数，也可以通过 rootCmd.AddCommand 方法添加子命令。\n2. 为命令添加命令行参数。\n3. 执行 rootCmd 命令调用的函数，rootCmd.Execute 会在内部回调 Run 执行函数。\n\nKubernetes 核心组件都通过 Cobra 来管理 CLI 交互方式，\n下面以 kubectl 为例：\n\n```\nkubectl    get   pod  pod_name  -n kube-system\nApp Name/Command/Type/  Name  / Flag\n```\n\n* Command: 指定命令操作，命令后可以加子命令。\n* TYPE: 指定资源类型，资源类型不区分大小写。\n* NAME: 指定资源名称，可以指定多个，资源名称需要区分大小写。\n* Flag: 指定可选命令行参数\n\n同样是三步骤 1：创建 Command, 2: 为 get 命令添加命令行参数 3：执行命令\n\n### 创建 Command \n\n实例化 cobra.Command 对象，并通过 cmds.AddCommand 方法添加命令或子命令，每个 cobra.Command 对象都可设置 Run 执行函数，\n代码示例如下：\n\n```\nfunc NewKubectlCommand(in io.Reader, out, err io.Writer)  *cobra.Command {\n    ...\n    groups := templates.CommandGroups{\n        ...\n        {\n            Message: \"Basic Commands (Intermediate):\",\n            Commands: []*cobra.Command{\n                explain.NewCmdExplain(\"kubectl\", f, ioStreams),\n                get.NewCmdGet(\"kubectl\", f, isStreams),\n                edit.NewCmdEdit(f, ioStreams),\n                delete.NewCmdDelete(f, ioStreams),\n            },\n        },\n        ...\n    }\n    groups.Add(cmds)\n    ...\n    cmds.AddCommand(alpha)\n    cmds.AddCommand(cmdconfig.NewCmdConfig(f, clientcmd.NewDefaultPathOptions(), ioStreams))\n    cmds.AddCommand(plugin.NewCmdPlugin(f, ioStreams))\n    cmds.AddCommand(version.NewCmdVersion(f, ioStreams))\n    ...\n\n    return cmds\n}\n```\n\nNewKubectlCommand 函数实例化了 cobra.Command 对象，templates.CommandGroups 定义了 kubectl 的 8 种命令类别，通过 cmds.AddCommand 添加命令类别。\nget 命令的 Command 定义如下：\n\n```\nfunc NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    o := NewGetOptions(parent, streams)\n\n    cmd := &cobra.Command {\n        Use: \"get ...\",\n        DisableFlagsInUseLine: true,\n        Short: ...\n        Long: ...\n        Example: getExample,\n        Run: func(cmd *cobra.Command, args []string) {\n            cmdutil.CheckErr(o.Complete(f, cmd, args))\n            cmdutil.CheckErr(o.Validate(cmd))\n            cmdutil.CheckErr(o.Run(f, cmd, args))\n        },\n        SuggestFor: []string{\"list\", \"ps\"},\n    }\n    ...\n} \n```\n\n在 cobra.Command 对象中， Use, Short, Long 和 Example 包含描述命令的信息，最重要的是定义 Run 执行函数，\n> Cobra 中 Run 函数家族成员有很多，执行顺序有 PersistentPreRun -> PreRun -> Run -> PostRun -> PersistentPostRun。具体参考 cobra.Command 中的结构体定义。\n\n### 为 get 命令添加命令行参数\n\nget 命令行参数比较多，这里以 --all -namespaces 参数为例:\n\n```\nfunc NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    ...\n    cmd.Flags().BoolVarP(&o.AllNamespaces // 接受命令行参数的变量, \"all-namespaces\" // 指定命令行参数的名称, \"A\" // 指定命令行参数的名称简写, o.AllNamespaces // 设置命令行参数的默认值, \"If present, list the requested object(s) across all namespqaces.Namespace in current context is ignored even if specified with --namespace.\" // 设置命令行参数的提示信息)\n    ...\n}\n```\n\n### 执行命令\n\n```\nfunc main() {\n    command := cmd.NewDefaultKubectlCommand()\n    ...\n    if err := command.Execute(); err != nil {\n        fmt.Printf(os.Stderr, \"%v\\n\", err)\n        os.Exit()\n    }\n}\n```\n\nkubectl 的 main 函数中定义了执行函数 command.Execute，原理是对命令中的所有参数解析出 Command 和 Flag，把 Flag 作为参数传递给 Command 并执行。\n\n```\ncmd, flags, err = c.Find(args)\n...\nerr = cmd.execute(flags)\n```\n\nargs 数组中包含所有命令行参数，通过 c.Find 解析出 cmd 和 flags，然后通过 cmd.execute 执行命令中定义的 Run 执行函数。\n\n## 创建资源对象的过程\n\n内部运行原理是，客户端和服务端进行一次 HTTP 请求的交互。创建资源对象的流程可分为：\n1. 实例化 Factory 接口，通过 Builder 和 Visitor 将资源对象描述文件（xxx.yaml）文本格式转换成资源对象。\n2. 将资源对象以 HTTP 请求的方式发送给 kube-apiserver，并得到响应结果。\n3. 最终根据 Visitor 匿名函数集的 errors 判断是否成功创建了资源对象。\n\n### 编写资源对象描述文件\n\nKubernetes 系统的资源对象可以使用 JSON 或 YAML 文件来描述,一般使用 YAML 文件居多。\n\n```\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n```\n\n通过 kubectl create 命令与 kube-apiserver 交互并创建资源对象。（kubectl create -f XXX.yaml）\n\n### 实例化 Factory 接口\n\n在执行每一个 kubectl 命令之前，都需要实例化 cmdutil Factory 接口对象的操作，Factory 是一个通用对象，它提供了与 kube-apiserver 的交互方式，以及验证资源对象等方法。cmdutil Factory 接口代码示例如下：\n\n```\nf := cmdutil.NewFactory(matchVersionKubeConfigFlags)\n\ntype Factory interface {\n    DynamicClient()\n    // 动态客户端\n    KubernetesClientSet()\n    // ClientSet客户端\n    RESTClient()\n    // RESTClient客户端\n    NewBuilder()\n    // 实例化 Builder,Builder 用于将命令行获取的参数转换成资源对象\n    Validator(...)\n    // 验证资源对象\n    ...\n}\n```\n\n### Builder 构建资源对象\n\nBuilder 用于将命令行获取的参数转换成资源对象，它实现了一种通用的资源对象转换功能。\nBuilder 结构体保存了命令行获取的各种参数，并通过不同函数处理不同参数，将其转换成资源对象。\n\n```\nr := f.NewBuilder().\n    Unstructured().\n    Schema(schema).\n    ContinueOnError().\n    NamespaceParam(cmdNamespace).DefaultNamespace().\n    FilenameParam(enforceNamespace, &o.FilenameOptions).\n    LabelSelectorParam(o.Selector).\n    Flatten().\n    Do()\nerr = r.Err()\nif err != nil {\n    return err\n}\n```\n\n首先通过 f.NewBuilder 实例化 Builder 对象，通过函数 Unstructured 等对参数赋值和初始化，将参数保存到 Builder 对象中，最后通过 Do 函数完成对资源的创建。\n\n其中，FilenameParam 函数用于识别 kubectl create 命令行参数是通过哪种方式传入资源对象描述文件：\n1. 标准输入 stdin\n2. 本地文件\n3. 网络文件\n\nDo 函数返回 **Result 对象**，Result 对象的 **info 字段**保存了 RESTClient 与 kube-apiserver 交互产生的结果，可以通过 Result 对象的 infos 或 Object 方法来获取执行结果，而 Result 对象中的结果，是由 **Visitor 执行产生**。\n\n### Visitor 多层匿名函数嵌套\n\nResult 对象中的结果，是由 **Visitor** 执行并产生，Visitor 接口定义如下：\n\n```\ntype Visitor interface {\n    Visit(VisitorFunc) error\n}\ntype VisitorFunc func(*info, error) error\n// 该匿名函数则生成或处理 Info 结构\n```\n\n在 Kubernetes 源码中，Visitors 被设计为可以多层嵌套（即多层匿名函数嵌套，使用一个 Visitor 嵌套另一个 Visitor）。\n\nVisitor Example 代码示例如下：\n\n```\ntype Visitor interface {\n    Visit(VisitorFunc) error\n}\n\ntype VisitorFunc func() error\n\ntype VisitorList []Visitor\n\nfunc (l VisitorList) Visit(fn VisitorFunc) error {\n    for i := range l {\n        if err := l[i].Visit(func() error {\n            fmt.Println(\"In VisitorList before fn\")\n            fn()\n            fmt.Println(\"In VisitorList after fn\")\n            return nil\n        }); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n\ntype Visitor1 struct {\n}\n\nfunc (v Visitor1) Visit(fn VisitorFunc) error {\n    fmt.Println(\"In Visitor1 before fn\")\n    fn()\n    fmt.Println(\"In Visitor1 after fn\")\n    return nil\n}\n\ntype Visitor2 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor2) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor2 before fn\")\n        fn()\n        fmt.Println(\"In Visitor2 after fn\")\n        return nil\n    })\n    return nil\n}\n\ntype Visitor3 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor3) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor3 before fn\")\n        fn()\n        fmt.Println(\"In Visitor3 after fn\")\n        return nil\n    })\n    return nil\n}\n\nfunc main() {\n    var visitor Visitor\n    var visitors []Visitor\n\n    visitor = Visitor1{}\n    visitors = append(visitors, visitor)\n    visitor = Visitor2{VisitorList(visitors)}\n    visitor = Visitor3{visitor}\n    visitor.Visit(func() error {\n        fmt.Println(\"In visitFunc\")\n        return nil\n    })\n}\n```\n\n* 其中定义了 Visitor 接口，增加了 VisitorList 对象，该对象相当于多个 Visitor 匿名函数的集合，另外增加了 3 个 Visitor 的类，分别实现 Visit 方法，该方法的 VisitorFunc 函数在执行之前和执行之后分贝输出 print 信息。\n* 在 main 函数中，首先将 Visitor1 嵌入 VisitorList 中，VisitorList 是 Visitor 的集合，可存放多个 Visitor。然后将 VisitorList 嵌入 Visitor2 中，接着将 Visitor2 嵌入 Visitor3 中，最终形成 Visitor3{Visitor2{VisitorList{Visitor1}}} 的嵌套关系。\n\nKubernetes 源码中的 Visitor，代码示例如下：\n\n```\ntype EagerVisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则保留错误信息，继续遍历执行下一个 Visitor，最后一起返回所有错误。\ntype VisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则立刻返回。\n```\n\nKubernetes Visitor 中存在多种实现方法，不同实现方法的作用不同，最终通过 Visitor 的 error 信息为空判断创建资源请求执行成功。","source":"_posts/kubectl-commands.md","raw":"---\ntitle: kubectl 命令行交互\ndate: 2020-11-24 10:04:56\ntags: [Kubernetes, kubectl 命令行交互]\ncategories: Kubernetes源码解析\n---\n\n从 Kubernetes 架构设计的角度来看，kubectl 工具是 Kubernetes API Server 的客户端。一些命令可以自行查阅。\n\n## Cobra 命令行参数解析\n\nCobra 是一个创建强大的现代化 CLI 命令行应用程序的 Go 语言库，可以用来生成应用程序的文件。\n\nCobra Example:\n\n```\nfunc main() {\n    var Version bool\n    var rootCmd = &cobra.Command{\n        Use: \"root[sub]\",\n        Short: \"root command\",\n        Run: func(cmd *cobra.Command, args []string) {\n            fmt.Printf(\"Inside rootCmd Run with args: %v\\n\", args)\n            if Version {\n                fmt.Printf(\"Version: 1.0\\n\")\n            }\n        },\n    }\n\n    flags := rootCmd.Flags()\n    flags.BoolVarP(&Version, \"version\", \"v\", false, \"Print version information and quit\")\n    _ = rootCmd.Execute()\n}\n```\n\n由此可知 Cobra 基本应用步骤分为如下 3 步：\n\n1. 创建 rootCmd 主命令，并定义 Run 执行函数，也可以通过 rootCmd.AddCommand 方法添加子命令。\n2. 为命令添加命令行参数。\n3. 执行 rootCmd 命令调用的函数，rootCmd.Execute 会在内部回调 Run 执行函数。\n\nKubernetes 核心组件都通过 Cobra 来管理 CLI 交互方式，\n下面以 kubectl 为例：\n\n```\nkubectl    get   pod  pod_name  -n kube-system\nApp Name/Command/Type/  Name  / Flag\n```\n\n* Command: 指定命令操作，命令后可以加子命令。\n* TYPE: 指定资源类型，资源类型不区分大小写。\n* NAME: 指定资源名称，可以指定多个，资源名称需要区分大小写。\n* Flag: 指定可选命令行参数\n\n同样是三步骤 1：创建 Command, 2: 为 get 命令添加命令行参数 3：执行命令\n\n### 创建 Command \n\n实例化 cobra.Command 对象，并通过 cmds.AddCommand 方法添加命令或子命令，每个 cobra.Command 对象都可设置 Run 执行函数，\n代码示例如下：\n\n```\nfunc NewKubectlCommand(in io.Reader, out, err io.Writer)  *cobra.Command {\n    ...\n    groups := templates.CommandGroups{\n        ...\n        {\n            Message: \"Basic Commands (Intermediate):\",\n            Commands: []*cobra.Command{\n                explain.NewCmdExplain(\"kubectl\", f, ioStreams),\n                get.NewCmdGet(\"kubectl\", f, isStreams),\n                edit.NewCmdEdit(f, ioStreams),\n                delete.NewCmdDelete(f, ioStreams),\n            },\n        },\n        ...\n    }\n    groups.Add(cmds)\n    ...\n    cmds.AddCommand(alpha)\n    cmds.AddCommand(cmdconfig.NewCmdConfig(f, clientcmd.NewDefaultPathOptions(), ioStreams))\n    cmds.AddCommand(plugin.NewCmdPlugin(f, ioStreams))\n    cmds.AddCommand(version.NewCmdVersion(f, ioStreams))\n    ...\n\n    return cmds\n}\n```\n\nNewKubectlCommand 函数实例化了 cobra.Command 对象，templates.CommandGroups 定义了 kubectl 的 8 种命令类别，通过 cmds.AddCommand 添加命令类别。\nget 命令的 Command 定义如下：\n\n```\nfunc NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    o := NewGetOptions(parent, streams)\n\n    cmd := &cobra.Command {\n        Use: \"get ...\",\n        DisableFlagsInUseLine: true,\n        Short: ...\n        Long: ...\n        Example: getExample,\n        Run: func(cmd *cobra.Command, args []string) {\n            cmdutil.CheckErr(o.Complete(f, cmd, args))\n            cmdutil.CheckErr(o.Validate(cmd))\n            cmdutil.CheckErr(o.Run(f, cmd, args))\n        },\n        SuggestFor: []string{\"list\", \"ps\"},\n    }\n    ...\n} \n```\n\n在 cobra.Command 对象中， Use, Short, Long 和 Example 包含描述命令的信息，最重要的是定义 Run 执行函数，\n> Cobra 中 Run 函数家族成员有很多，执行顺序有 PersistentPreRun -> PreRun -> Run -> PostRun -> PersistentPostRun。具体参考 cobra.Command 中的结构体定义。\n\n### 为 get 命令添加命令行参数\n\nget 命令行参数比较多，这里以 --all -namespaces 参数为例:\n\n```\nfunc NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    ...\n    cmd.Flags().BoolVarP(&o.AllNamespaces // 接受命令行参数的变量, \"all-namespaces\" // 指定命令行参数的名称, \"A\" // 指定命令行参数的名称简写, o.AllNamespaces // 设置命令行参数的默认值, \"If present, list the requested object(s) across all namespqaces.Namespace in current context is ignored even if specified with --namespace.\" // 设置命令行参数的提示信息)\n    ...\n}\n```\n\n### 执行命令\n\n```\nfunc main() {\n    command := cmd.NewDefaultKubectlCommand()\n    ...\n    if err := command.Execute(); err != nil {\n        fmt.Printf(os.Stderr, \"%v\\n\", err)\n        os.Exit()\n    }\n}\n```\n\nkubectl 的 main 函数中定义了执行函数 command.Execute，原理是对命令中的所有参数解析出 Command 和 Flag，把 Flag 作为参数传递给 Command 并执行。\n\n```\ncmd, flags, err = c.Find(args)\n...\nerr = cmd.execute(flags)\n```\n\nargs 数组中包含所有命令行参数，通过 c.Find 解析出 cmd 和 flags，然后通过 cmd.execute 执行命令中定义的 Run 执行函数。\n\n## 创建资源对象的过程\n\n内部运行原理是，客户端和服务端进行一次 HTTP 请求的交互。创建资源对象的流程可分为：\n1. 实例化 Factory 接口，通过 Builder 和 Visitor 将资源对象描述文件（xxx.yaml）文本格式转换成资源对象。\n2. 将资源对象以 HTTP 请求的方式发送给 kube-apiserver，并得到响应结果。\n3. 最终根据 Visitor 匿名函数集的 errors 判断是否成功创建了资源对象。\n\n### 编写资源对象描述文件\n\nKubernetes 系统的资源对象可以使用 JSON 或 YAML 文件来描述,一般使用 YAML 文件居多。\n\n```\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n```\n\n通过 kubectl create 命令与 kube-apiserver 交互并创建资源对象。（kubectl create -f XXX.yaml）\n\n### 实例化 Factory 接口\n\n在执行每一个 kubectl 命令之前，都需要实例化 cmdutil Factory 接口对象的操作，Factory 是一个通用对象，它提供了与 kube-apiserver 的交互方式，以及验证资源对象等方法。cmdutil Factory 接口代码示例如下：\n\n```\nf := cmdutil.NewFactory(matchVersionKubeConfigFlags)\n\ntype Factory interface {\n    DynamicClient()\n    // 动态客户端\n    KubernetesClientSet()\n    // ClientSet客户端\n    RESTClient()\n    // RESTClient客户端\n    NewBuilder()\n    // 实例化 Builder,Builder 用于将命令行获取的参数转换成资源对象\n    Validator(...)\n    // 验证资源对象\n    ...\n}\n```\n\n### Builder 构建资源对象\n\nBuilder 用于将命令行获取的参数转换成资源对象，它实现了一种通用的资源对象转换功能。\nBuilder 结构体保存了命令行获取的各种参数，并通过不同函数处理不同参数，将其转换成资源对象。\n\n```\nr := f.NewBuilder().\n    Unstructured().\n    Schema(schema).\n    ContinueOnError().\n    NamespaceParam(cmdNamespace).DefaultNamespace().\n    FilenameParam(enforceNamespace, &o.FilenameOptions).\n    LabelSelectorParam(o.Selector).\n    Flatten().\n    Do()\nerr = r.Err()\nif err != nil {\n    return err\n}\n```\n\n首先通过 f.NewBuilder 实例化 Builder 对象，通过函数 Unstructured 等对参数赋值和初始化，将参数保存到 Builder 对象中，最后通过 Do 函数完成对资源的创建。\n\n其中，FilenameParam 函数用于识别 kubectl create 命令行参数是通过哪种方式传入资源对象描述文件：\n1. 标准输入 stdin\n2. 本地文件\n3. 网络文件\n\nDo 函数返回 **Result 对象**，Result 对象的 **info 字段**保存了 RESTClient 与 kube-apiserver 交互产生的结果，可以通过 Result 对象的 infos 或 Object 方法来获取执行结果，而 Result 对象中的结果，是由 **Visitor 执行产生**。\n\n### Visitor 多层匿名函数嵌套\n\nResult 对象中的结果，是由 **Visitor** 执行并产生，Visitor 接口定义如下：\n\n```\ntype Visitor interface {\n    Visit(VisitorFunc) error\n}\ntype VisitorFunc func(*info, error) error\n// 该匿名函数则生成或处理 Info 结构\n```\n\n在 Kubernetes 源码中，Visitors 被设计为可以多层嵌套（即多层匿名函数嵌套，使用一个 Visitor 嵌套另一个 Visitor）。\n\nVisitor Example 代码示例如下：\n\n```\ntype Visitor interface {\n    Visit(VisitorFunc) error\n}\n\ntype VisitorFunc func() error\n\ntype VisitorList []Visitor\n\nfunc (l VisitorList) Visit(fn VisitorFunc) error {\n    for i := range l {\n        if err := l[i].Visit(func() error {\n            fmt.Println(\"In VisitorList before fn\")\n            fn()\n            fmt.Println(\"In VisitorList after fn\")\n            return nil\n        }); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n\ntype Visitor1 struct {\n}\n\nfunc (v Visitor1) Visit(fn VisitorFunc) error {\n    fmt.Println(\"In Visitor1 before fn\")\n    fn()\n    fmt.Println(\"In Visitor1 after fn\")\n    return nil\n}\n\ntype Visitor2 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor2) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor2 before fn\")\n        fn()\n        fmt.Println(\"In Visitor2 after fn\")\n        return nil\n    })\n    return nil\n}\n\ntype Visitor3 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor3) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor3 before fn\")\n        fn()\n        fmt.Println(\"In Visitor3 after fn\")\n        return nil\n    })\n    return nil\n}\n\nfunc main() {\n    var visitor Visitor\n    var visitors []Visitor\n\n    visitor = Visitor1{}\n    visitors = append(visitors, visitor)\n    visitor = Visitor2{VisitorList(visitors)}\n    visitor = Visitor3{visitor}\n    visitor.Visit(func() error {\n        fmt.Println(\"In visitFunc\")\n        return nil\n    })\n}\n```\n\n* 其中定义了 Visitor 接口，增加了 VisitorList 对象，该对象相当于多个 Visitor 匿名函数的集合，另外增加了 3 个 Visitor 的类，分别实现 Visit 方法，该方法的 VisitorFunc 函数在执行之前和执行之后分贝输出 print 信息。\n* 在 main 函数中，首先将 Visitor1 嵌入 VisitorList 中，VisitorList 是 Visitor 的集合，可存放多个 Visitor。然后将 VisitorList 嵌入 Visitor2 中，接着将 Visitor2 嵌入 Visitor3 中，最终形成 Visitor3{Visitor2{VisitorList{Visitor1}}} 的嵌套关系。\n\nKubernetes 源码中的 Visitor，代码示例如下：\n\n```\ntype EagerVisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则保留错误信息，继续遍历执行下一个 Visitor，最后一起返回所有错误。\ntype VisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则立刻返回。\n```\n\nKubernetes Visitor 中存在多种实现方法，不同实现方法的作用不同，最终通过 Visitor 的 error 信息为空判断创建资源请求执行成功。","slug":"kubectl-commands","published":1,"updated":"2020-11-27T03:04:10.629Z","_id":"ckhx7l5010000g58j4ldqdjhy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从 Kubernetes 架构设计的角度来看，kubectl 工具是 Kubernetes API Server 的客户端。一些命令可以自行查阅。</p>\n<h2 id=\"Cobra-命令行参数解析\"><a href=\"#Cobra-命令行参数解析\" class=\"headerlink\" title=\"Cobra 命令行参数解析\"></a>Cobra 命令行参数解析</h2><p>Cobra 是一个创建强大的现代化 CLI 命令行应用程序的 Go 语言库，可以用来生成应用程序的文件。</p>\n<p>Cobra Example:</p>\n<pre><code>func main() {\n    var Version bool\n    var rootCmd = &amp;cobra.Command{\n        Use: \"root[sub]\",\n        Short: \"root command\",\n        Run: func(cmd *cobra.Command, args []string) {\n            fmt.Printf(\"Inside rootCmd Run with args: %v\\n\", args)\n            if Version {\n                fmt.Printf(\"Version: 1.0\\n\")\n            }\n        },\n    }\n\n    flags := rootCmd.Flags()\n    flags.BoolVarP(&amp;Version, \"version\", \"v\", false, \"Print version information and quit\")\n    _ = rootCmd.Execute()\n}</code></pre>\n<p>由此可知 Cobra 基本应用步骤分为如下 3 步：</p>\n<ol>\n<li>创建 rootCmd 主命令，并定义 Run 执行函数，也可以通过 rootCmd.AddCommand 方法添加子命令。</li>\n<li>为命令添加命令行参数。</li>\n<li>执行 rootCmd 命令调用的函数，rootCmd.Execute 会在内部回调 Run 执行函数。</li>\n</ol>\n<p>Kubernetes 核心组件都通过 Cobra 来管理 CLI 交互方式，<br>下面以 kubectl 为例：</p>\n<pre><code>kubectl    get   pod  pod_name  -n kube-system\nApp Name/Command/Type/  Name  / Flag</code></pre>\n<ul>\n<li>Command: 指定命令操作，命令后可以加子命令。</li>\n<li>TYPE: 指定资源类型，资源类型不区分大小写。</li>\n<li>NAME: 指定资源名称，可以指定多个，资源名称需要区分大小写。</li>\n<li>Flag: 指定可选命令行参数</li>\n</ul>\n<p>同样是三步骤 1：创建 Command, 2: 为 get 命令添加命令行参数 3：执行命令</p>\n<h3 id=\"创建-Command\"><a href=\"#创建-Command\" class=\"headerlink\" title=\"创建 Command\"></a>创建 Command</h3><p>实例化 cobra.Command 对象，并通过 cmds.AddCommand 方法添加命令或子命令，每个 cobra.Command 对象都可设置 Run 执行函数，<br>代码示例如下：</p>\n<pre><code>func NewKubectlCommand(in io.Reader, out, err io.Writer)  *cobra.Command {\n    ...\n    groups := templates.CommandGroups{\n        ...\n        {\n            Message: \"Basic Commands (Intermediate):\",\n            Commands: []*cobra.Command{\n                explain.NewCmdExplain(\"kubectl\", f, ioStreams),\n                get.NewCmdGet(\"kubectl\", f, isStreams),\n                edit.NewCmdEdit(f, ioStreams),\n                delete.NewCmdDelete(f, ioStreams),\n            },\n        },\n        ...\n    }\n    groups.Add(cmds)\n    ...\n    cmds.AddCommand(alpha)\n    cmds.AddCommand(cmdconfig.NewCmdConfig(f, clientcmd.NewDefaultPathOptions(), ioStreams))\n    cmds.AddCommand(plugin.NewCmdPlugin(f, ioStreams))\n    cmds.AddCommand(version.NewCmdVersion(f, ioStreams))\n    ...\n\n    return cmds\n}</code></pre>\n<p>NewKubectlCommand 函数实例化了 cobra.Command 对象，templates.CommandGroups 定义了 kubectl 的 8 种命令类别，通过 cmds.AddCommand 添加命令类别。<br>get 命令的 Command 定义如下：</p>\n<pre><code>func NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    o := NewGetOptions(parent, streams)\n\n    cmd := &amp;cobra.Command {\n        Use: \"get ...\",\n        DisableFlagsInUseLine: true,\n        Short: ...\n        Long: ...\n        Example: getExample,\n        Run: func(cmd *cobra.Command, args []string) {\n            cmdutil.CheckErr(o.Complete(f, cmd, args))\n            cmdutil.CheckErr(o.Validate(cmd))\n            cmdutil.CheckErr(o.Run(f, cmd, args))\n        },\n        SuggestFor: []string{\"list\", \"ps\"},\n    }\n    ...\n} </code></pre>\n<p>在 cobra.Command 对象中， Use, Short, Long 和 Example 包含描述命令的信息，最重要的是定义 Run 执行函数，</p>\n<blockquote>\n<p>Cobra 中 Run 函数家族成员有很多，执行顺序有 PersistentPreRun -&gt; PreRun -&gt; Run -&gt; PostRun -&gt; PersistentPostRun。具体参考 cobra.Command 中的结构体定义。</p>\n</blockquote>\n<h3 id=\"为-get-命令添加命令行参数\"><a href=\"#为-get-命令添加命令行参数\" class=\"headerlink\" title=\"为 get 命令添加命令行参数\"></a>为 get 命令添加命令行参数</h3><p>get 命令行参数比较多，这里以 –all -namespaces 参数为例:</p>\n<pre><code>func NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command {\n    ...\n    cmd.Flags().BoolVarP(&amp;o.AllNamespaces // 接受命令行参数的变量, \"all-namespaces\" // 指定命令行参数的名称, \"A\" // 指定命令行参数的名称简写, o.AllNamespaces // 设置命令行参数的默认值, \"If present, list the requested object(s) across all namespqaces.Namespace in current context is ignored even if specified with --namespace.\" // 设置命令行参数的提示信息)\n    ...\n}</code></pre>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><pre><code>func main() {\n    command := cmd.NewDefaultKubectlCommand()\n    ...\n    if err := command.Execute(); err != nil {\n        fmt.Printf(os.Stderr, \"%v\\n\", err)\n        os.Exit()\n    }\n}</code></pre>\n<p>kubectl 的 main 函数中定义了执行函数 command.Execute，原理是对命令中的所有参数解析出 Command 和 Flag，把 Flag 作为参数传递给 Command 并执行。</p>\n<pre><code>cmd, flags, err = c.Find(args)\n...\nerr = cmd.execute(flags)</code></pre>\n<p>args 数组中包含所有命令行参数，通过 c.Find 解析出 cmd 和 flags，然后通过 cmd.execute 执行命令中定义的 Run 执行函数。</p>\n<h2 id=\"创建资源对象的过程\"><a href=\"#创建资源对象的过程\" class=\"headerlink\" title=\"创建资源对象的过程\"></a>创建资源对象的过程</h2><p>内部运行原理是，客户端和服务端进行一次 HTTP 请求的交互。创建资源对象的流程可分为：</p>\n<ol>\n<li>实例化 Factory 接口，通过 Builder 和 Visitor 将资源对象描述文件（xxx.yaml）文本格式转换成资源对象。</li>\n<li>将资源对象以 HTTP 请求的方式发送给 kube-apiserver，并得到响应结果。</li>\n<li>最终根据 Visitor 匿名函数集的 errors 判断是否成功创建了资源对象。</li>\n</ol>\n<h3 id=\"编写资源对象描述文件\"><a href=\"#编写资源对象描述文件\" class=\"headerlink\" title=\"编写资源对象描述文件\"></a>编写资源对象描述文件</h3><p>Kubernetes 系统的资源对象可以使用 JSON 或 YAML 文件来描述,一般使用 YAML 文件居多。</p>\n<pre><code>apiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string</code></pre>\n<p>通过 kubectl create 命令与 kube-apiserver 交互并创建资源对象。（kubectl create -f XXX.yaml）</p>\n<h3 id=\"实例化-Factory-接口\"><a href=\"#实例化-Factory-接口\" class=\"headerlink\" title=\"实例化 Factory 接口\"></a>实例化 Factory 接口</h3><p>在执行每一个 kubectl 命令之前，都需要实例化 cmdutil Factory 接口对象的操作，Factory 是一个通用对象，它提供了与 kube-apiserver 的交互方式，以及验证资源对象等方法。cmdutil Factory 接口代码示例如下：</p>\n<pre><code>f := cmdutil.NewFactory(matchVersionKubeConfigFlags)\n\ntype Factory interface {\n    DynamicClient()\n    // 动态客户端\n    KubernetesClientSet()\n    // ClientSet客户端\n    RESTClient()\n    // RESTClient客户端\n    NewBuilder()\n    // 实例化 Builder,Builder 用于将命令行获取的参数转换成资源对象\n    Validator(...)\n    // 验证资源对象\n    ...\n}</code></pre>\n<h3 id=\"Builder-构建资源对象\"><a href=\"#Builder-构建资源对象\" class=\"headerlink\" title=\"Builder 构建资源对象\"></a>Builder 构建资源对象</h3><p>Builder 用于将命令行获取的参数转换成资源对象，它实现了一种通用的资源对象转换功能。<br>Builder 结构体保存了命令行获取的各种参数，并通过不同函数处理不同参数，将其转换成资源对象。</p>\n<pre><code>r := f.NewBuilder().\n    Unstructured().\n    Schema(schema).\n    ContinueOnError().\n    NamespaceParam(cmdNamespace).DefaultNamespace().\n    FilenameParam(enforceNamespace, &amp;o.FilenameOptions).\n    LabelSelectorParam(o.Selector).\n    Flatten().\n    Do()\nerr = r.Err()\nif err != nil {\n    return err\n}</code></pre>\n<p>首先通过 f.NewBuilder 实例化 Builder 对象，通过函数 Unstructured 等对参数赋值和初始化，将参数保存到 Builder 对象中，最后通过 Do 函数完成对资源的创建。</p>\n<p>其中，FilenameParam 函数用于识别 kubectl create 命令行参数是通过哪种方式传入资源对象描述文件：</p>\n<ol>\n<li>标准输入 stdin</li>\n<li>本地文件</li>\n<li>网络文件</li>\n</ol>\n<p>Do 函数返回 <strong>Result 对象</strong>，Result 对象的 <strong>info 字段</strong>保存了 RESTClient 与 kube-apiserver 交互产生的结果，可以通过 Result 对象的 infos 或 Object 方法来获取执行结果，而 Result 对象中的结果，是由 <strong>Visitor 执行产生</strong>。</p>\n<h3 id=\"Visitor-多层匿名函数嵌套\"><a href=\"#Visitor-多层匿名函数嵌套\" class=\"headerlink\" title=\"Visitor 多层匿名函数嵌套\"></a>Visitor 多层匿名函数嵌套</h3><p>Result 对象中的结果，是由 <strong>Visitor</strong> 执行并产生，Visitor 接口定义如下：</p>\n<pre><code>type Visitor interface {\n    Visit(VisitorFunc) error\n}\ntype VisitorFunc func(*info, error) error\n// 该匿名函数则生成或处理 Info 结构</code></pre>\n<p>在 Kubernetes 源码中，Visitors 被设计为可以多层嵌套（即多层匿名函数嵌套，使用一个 Visitor 嵌套另一个 Visitor）。</p>\n<p>Visitor Example 代码示例如下：</p>\n<pre><code>type Visitor interface {\n    Visit(VisitorFunc) error\n}\n\ntype VisitorFunc func() error\n\ntype VisitorList []Visitor\n\nfunc (l VisitorList) Visit(fn VisitorFunc) error {\n    for i := range l {\n        if err := l[i].Visit(func() error {\n            fmt.Println(\"In VisitorList before fn\")\n            fn()\n            fmt.Println(\"In VisitorList after fn\")\n            return nil\n        }); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n\ntype Visitor1 struct {\n}\n\nfunc (v Visitor1) Visit(fn VisitorFunc) error {\n    fmt.Println(\"In Visitor1 before fn\")\n    fn()\n    fmt.Println(\"In Visitor1 after fn\")\n    return nil\n}\n\ntype Visitor2 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor2) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor2 before fn\")\n        fn()\n        fmt.Println(\"In Visitor2 after fn\")\n        return nil\n    })\n    return nil\n}\n\ntype Visitor3 struct {\n    visitor Visitor\n}\n\nfunc (v Visitor3) Visit(fn VisitorFunc) error {\n    v.visitor.Visit(func() error {\n        fmt.Println(\"In Visitor3 before fn\")\n        fn()\n        fmt.Println(\"In Visitor3 after fn\")\n        return nil\n    })\n    return nil\n}\n\nfunc main() {\n    var visitor Visitor\n    var visitors []Visitor\n\n    visitor = Visitor1{}\n    visitors = append(visitors, visitor)\n    visitor = Visitor2{VisitorList(visitors)}\n    visitor = Visitor3{visitor}\n    visitor.Visit(func() error {\n        fmt.Println(\"In visitFunc\")\n        return nil\n    })\n}</code></pre>\n<ul>\n<li>其中定义了 Visitor 接口，增加了 VisitorList 对象，该对象相当于多个 Visitor 匿名函数的集合，另外增加了 3 个 Visitor 的类，分别实现 Visit 方法，该方法的 VisitorFunc 函数在执行之前和执行之后分贝输出 print 信息。</li>\n<li>在 main 函数中，首先将 Visitor1 嵌入 VisitorList 中，VisitorList 是 Visitor 的集合，可存放多个 Visitor。然后将 VisitorList 嵌入 Visitor2 中，接着将 Visitor2 嵌入 Visitor3 中，最终形成 Visitor3{Visitor2{VisitorList{Visitor1}}} 的嵌套关系。</li>\n</ul>\n<p>Kubernetes 源码中的 Visitor，代码示例如下：</p>\n<pre><code>type EagerVisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则保留错误信息，继续遍历执行下一个 Visitor，最后一起返回所有错误。\ntype VisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则立刻返回。</code></pre>\n<p>Kubernetes Visitor 中存在多种实现方法，不同实现方法的作用不同，最终通过 Visitor 的 error 信息为空判断创建资源请求执行成功。</p>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<p>从 Kubernetes 架构设计的角度来看，kubectl 工具是 Kubernetes API Server 的客户端。一些命令可以自行查阅。</p>\n<h2 id=\"Cobra-命令行参数解析\"><a href=\"#Cobra-命令行参数解析\" class=\"headerlink\" title=\"Cobra 命令行参数解析\"></a>Cobra 命令行参数解析</h2><p>Cobra 是一个创建强大的现代化 CLI 命令行应用程序的 Go 语言库，可以用来生成应用程序的文件。</p>\n<p>Cobra Example:</p>\n<pre><code>func main() &#123;\n    var Version bool\n    var rootCmd = &amp;cobra.Command&#123;\n        Use: &quot;root[sub]&quot;,\n        Short: &quot;root command&quot;,\n        Run: func(cmd *cobra.Command, args []string) &#123;\n            fmt.Printf(&quot;Inside rootCmd Run with args: %v\\n&quot;, args)\n            if Version &#123;\n                fmt.Printf(&quot;Version: 1.0\\n&quot;)\n            &#125;\n        &#125;,\n    &#125;\n\n    flags := rootCmd.Flags()\n    flags.BoolVarP(&amp;Version, &quot;version&quot;, &quot;v&quot;, false, &quot;Print version information and quit&quot;)\n    _ = rootCmd.Execute()\n&#125;</code></pre>\n<p>由此可知 Cobra 基本应用步骤分为如下 3 步：</p>\n<ol>\n<li>创建 rootCmd 主命令，并定义 Run 执行函数，也可以通过 rootCmd.AddCommand 方法添加子命令。</li>\n<li>为命令添加命令行参数。</li>\n<li>执行 rootCmd 命令调用的函数，rootCmd.Execute 会在内部回调 Run 执行函数。</li>\n</ol>\n<p>Kubernetes 核心组件都通过 Cobra 来管理 CLI 交互方式，<br>下面以 kubectl 为例：</p>\n<pre><code>kubectl    get   pod  pod_name  -n kube-system\nApp Name/Command/Type/  Name  / Flag</code></pre>\n<ul>\n<li>Command: 指定命令操作，命令后可以加子命令。</li>\n<li>TYPE: 指定资源类型，资源类型不区分大小写。</li>\n<li>NAME: 指定资源名称，可以指定多个，资源名称需要区分大小写。</li>\n<li>Flag: 指定可选命令行参数</li>\n</ul>\n<p>同样是三步骤 1：创建 Command, 2: 为 get 命令添加命令行参数 3：执行命令</p>\n<h3 id=\"创建-Command\"><a href=\"#创建-Command\" class=\"headerlink\" title=\"创建 Command\"></a>创建 Command</h3><p>实例化 cobra.Command 对象，并通过 cmds.AddCommand 方法添加命令或子命令，每个 cobra.Command 对象都可设置 Run 执行函数，<br>代码示例如下：</p>\n<pre><code>func NewKubectlCommand(in io.Reader, out, err io.Writer)  *cobra.Command &#123;\n    ...\n    groups := templates.CommandGroups&#123;\n        ...\n        &#123;\n            Message: &quot;Basic Commands (Intermediate):&quot;,\n            Commands: []*cobra.Command&#123;\n                explain.NewCmdExplain(&quot;kubectl&quot;, f, ioStreams),\n                get.NewCmdGet(&quot;kubectl&quot;, f, isStreams),\n                edit.NewCmdEdit(f, ioStreams),\n                delete.NewCmdDelete(f, ioStreams),\n            &#125;,\n        &#125;,\n        ...\n    &#125;\n    groups.Add(cmds)\n    ...\n    cmds.AddCommand(alpha)\n    cmds.AddCommand(cmdconfig.NewCmdConfig(f, clientcmd.NewDefaultPathOptions(), ioStreams))\n    cmds.AddCommand(plugin.NewCmdPlugin(f, ioStreams))\n    cmds.AddCommand(version.NewCmdVersion(f, ioStreams))\n    ...\n\n    return cmds\n&#125;</code></pre>\n<p>NewKubectlCommand 函数实例化了 cobra.Command 对象，templates.CommandGroups 定义了 kubectl 的 8 种命令类别，通过 cmds.AddCommand 添加命令类别。<br>get 命令的 Command 定义如下：</p>\n<pre><code>func NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command &#123;\n    o := NewGetOptions(parent, streams)\n\n    cmd := &amp;cobra.Command &#123;\n        Use: &quot;get ...&quot;,\n        DisableFlagsInUseLine: true,\n        Short: ...\n        Long: ...\n        Example: getExample,\n        Run: func(cmd *cobra.Command, args []string) &#123;\n            cmdutil.CheckErr(o.Complete(f, cmd, args))\n            cmdutil.CheckErr(o.Validate(cmd))\n            cmdutil.CheckErr(o.Run(f, cmd, args))\n        &#125;,\n        SuggestFor: []string&#123;&quot;list&quot;, &quot;ps&quot;&#125;,\n    &#125;\n    ...\n&#125; </code></pre>\n<p>在 cobra.Command 对象中， Use, Short, Long 和 Example 包含描述命令的信息，最重要的是定义 Run 执行函数，</p>\n<blockquote>\n<p>Cobra 中 Run 函数家族成员有很多，执行顺序有 PersistentPreRun -&gt; PreRun -&gt; Run -&gt; PostRun -&gt; PersistentPostRun。具体参考 cobra.Command 中的结构体定义。</p>\n</blockquote>\n<h3 id=\"为-get-命令添加命令行参数\"><a href=\"#为-get-命令添加命令行参数\" class=\"headerlink\" title=\"为 get 命令添加命令行参数\"></a>为 get 命令添加命令行参数</h3><p>get 命令行参数比较多，这里以 –all -namespaces 参数为例:</p>\n<pre><code>func NewCmdGet (parent string, f cmdutil.Factory, streams genericclioptions.IOStreams) *cobra.Command &#123;\n    ...\n    cmd.Flags().BoolVarP(&amp;o.AllNamespaces // 接受命令行参数的变量, &quot;all-namespaces&quot; // 指定命令行参数的名称, &quot;A&quot; // 指定命令行参数的名称简写, o.AllNamespaces // 设置命令行参数的默认值, &quot;If present, list the requested object(s) across all namespqaces.Namespace in current context is ignored even if specified with --namespace.&quot; // 设置命令行参数的提示信息)\n    ...\n&#125;</code></pre>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><pre><code>func main() &#123;\n    command := cmd.NewDefaultKubectlCommand()\n    ...\n    if err := command.Execute(); err != nil &#123;\n        fmt.Printf(os.Stderr, &quot;%v\\n&quot;, err)\n        os.Exit()\n    &#125;\n&#125;</code></pre>\n<p>kubectl 的 main 函数中定义了执行函数 command.Execute，原理是对命令中的所有参数解析出 Command 和 Flag，把 Flag 作为参数传递给 Command 并执行。</p>\n<pre><code>cmd, flags, err = c.Find(args)\n...\nerr = cmd.execute(flags)</code></pre>\n<p>args 数组中包含所有命令行参数，通过 c.Find 解析出 cmd 和 flags，然后通过 cmd.execute 执行命令中定义的 Run 执行函数。</p>\n<h2 id=\"创建资源对象的过程\"><a href=\"#创建资源对象的过程\" class=\"headerlink\" title=\"创建资源对象的过程\"></a>创建资源对象的过程</h2><p>内部运行原理是，客户端和服务端进行一次 HTTP 请求的交互。创建资源对象的流程可分为：</p>\n<ol>\n<li>实例化 Factory 接口，通过 Builder 和 Visitor 将资源对象描述文件（xxx.yaml）文本格式转换成资源对象。</li>\n<li>将资源对象以 HTTP 请求的方式发送给 kube-apiserver，并得到响应结果。</li>\n<li>最终根据 Visitor 匿名函数集的 errors 判断是否成功创建了资源对象。</li>\n</ol>\n<h3 id=\"编写资源对象描述文件\"><a href=\"#编写资源对象描述文件\" class=\"headerlink\" title=\"编写资源对象描述文件\"></a>编写资源对象描述文件</h3><p>Kubernetes 系统的资源对象可以使用 JSON 或 YAML 文件来描述,一般使用 YAML 文件居多。</p>\n<pre><code>apiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: &#123;&#125;     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string</code></pre>\n<p>通过 kubectl create 命令与 kube-apiserver 交互并创建资源对象。（kubectl create -f XXX.yaml）</p>\n<h3 id=\"实例化-Factory-接口\"><a href=\"#实例化-Factory-接口\" class=\"headerlink\" title=\"实例化 Factory 接口\"></a>实例化 Factory 接口</h3><p>在执行每一个 kubectl 命令之前，都需要实例化 cmdutil Factory 接口对象的操作，Factory 是一个通用对象，它提供了与 kube-apiserver 的交互方式，以及验证资源对象等方法。cmdutil Factory 接口代码示例如下：</p>\n<pre><code>f := cmdutil.NewFactory(matchVersionKubeConfigFlags)\n\ntype Factory interface &#123;\n    DynamicClient()\n    // 动态客户端\n    KubernetesClientSet()\n    // ClientSet客户端\n    RESTClient()\n    // RESTClient客户端\n    NewBuilder()\n    // 实例化 Builder,Builder 用于将命令行获取的参数转换成资源对象\n    Validator(...)\n    // 验证资源对象\n    ...\n&#125;</code></pre>\n<h3 id=\"Builder-构建资源对象\"><a href=\"#Builder-构建资源对象\" class=\"headerlink\" title=\"Builder 构建资源对象\"></a>Builder 构建资源对象</h3><p>Builder 用于将命令行获取的参数转换成资源对象，它实现了一种通用的资源对象转换功能。<br>Builder 结构体保存了命令行获取的各种参数，并通过不同函数处理不同参数，将其转换成资源对象。</p>\n<pre><code>r := f.NewBuilder().\n    Unstructured().\n    Schema(schema).\n    ContinueOnError().\n    NamespaceParam(cmdNamespace).DefaultNamespace().\n    FilenameParam(enforceNamespace, &amp;o.FilenameOptions).\n    LabelSelectorParam(o.Selector).\n    Flatten().\n    Do()\nerr = r.Err()\nif err != nil &#123;\n    return err\n&#125;</code></pre>\n<p>首先通过 f.NewBuilder 实例化 Builder 对象，通过函数 Unstructured 等对参数赋值和初始化，将参数保存到 Builder 对象中，最后通过 Do 函数完成对资源的创建。</p>\n<p>其中，FilenameParam 函数用于识别 kubectl create 命令行参数是通过哪种方式传入资源对象描述文件：</p>\n<ol>\n<li>标准输入 stdin</li>\n<li>本地文件</li>\n<li>网络文件</li>\n</ol>\n<p>Do 函数返回 <strong>Result 对象</strong>，Result 对象的 <strong>info 字段</strong>保存了 RESTClient 与 kube-apiserver 交互产生的结果，可以通过 Result 对象的 infos 或 Object 方法来获取执行结果，而 Result 对象中的结果，是由 <strong>Visitor 执行产生</strong>。</p>\n<h3 id=\"Visitor-多层匿名函数嵌套\"><a href=\"#Visitor-多层匿名函数嵌套\" class=\"headerlink\" title=\"Visitor 多层匿名函数嵌套\"></a>Visitor 多层匿名函数嵌套</h3><p>Result 对象中的结果，是由 <strong>Visitor</strong> 执行并产生，Visitor 接口定义如下：</p>\n<pre><code>type Visitor interface &#123;\n    Visit(VisitorFunc) error\n&#125;\ntype VisitorFunc func(*info, error) error\n// 该匿名函数则生成或处理 Info 结构</code></pre>\n<p>在 Kubernetes 源码中，Visitors 被设计为可以多层嵌套（即多层匿名函数嵌套，使用一个 Visitor 嵌套另一个 Visitor）。</p>\n<p>Visitor Example 代码示例如下：</p>\n<pre><code>type Visitor interface &#123;\n    Visit(VisitorFunc) error\n&#125;\n\ntype VisitorFunc func() error\n\ntype VisitorList []Visitor\n\nfunc (l VisitorList) Visit(fn VisitorFunc) error &#123;\n    for i := range l &#123;\n        if err := l[i].Visit(func() error &#123;\n            fmt.Println(&quot;In VisitorList before fn&quot;)\n            fn()\n            fmt.Println(&quot;In VisitorList after fn&quot;)\n            return nil\n        &#125;); err != nil &#123;\n            return err\n        &#125;\n    &#125;\n    return nil\n&#125;\n\ntype Visitor1 struct &#123;\n&#125;\n\nfunc (v Visitor1) Visit(fn VisitorFunc) error &#123;\n    fmt.Println(&quot;In Visitor1 before fn&quot;)\n    fn()\n    fmt.Println(&quot;In Visitor1 after fn&quot;)\n    return nil\n&#125;\n\ntype Visitor2 struct &#123;\n    visitor Visitor\n&#125;\n\nfunc (v Visitor2) Visit(fn VisitorFunc) error &#123;\n    v.visitor.Visit(func() error &#123;\n        fmt.Println(&quot;In Visitor2 before fn&quot;)\n        fn()\n        fmt.Println(&quot;In Visitor2 after fn&quot;)\n        return nil\n    &#125;)\n    return nil\n&#125;\n\ntype Visitor3 struct &#123;\n    visitor Visitor\n&#125;\n\nfunc (v Visitor3) Visit(fn VisitorFunc) error &#123;\n    v.visitor.Visit(func() error &#123;\n        fmt.Println(&quot;In Visitor3 before fn&quot;)\n        fn()\n        fmt.Println(&quot;In Visitor3 after fn&quot;)\n        return nil\n    &#125;)\n    return nil\n&#125;\n\nfunc main() &#123;\n    var visitor Visitor\n    var visitors []Visitor\n\n    visitor = Visitor1&#123;&#125;\n    visitors = append(visitors, visitor)\n    visitor = Visitor2&#123;VisitorList(visitors)&#125;\n    visitor = Visitor3&#123;visitor&#125;\n    visitor.Visit(func() error &#123;\n        fmt.Println(&quot;In visitFunc&quot;)\n        return nil\n    &#125;)\n&#125;</code></pre>\n<ul>\n<li>其中定义了 Visitor 接口，增加了 VisitorList 对象，该对象相当于多个 Visitor 匿名函数的集合，另外增加了 3 个 Visitor 的类，分别实现 Visit 方法，该方法的 VisitorFunc 函数在执行之前和执行之后分贝输出 print 信息。</li>\n<li>在 main 函数中，首先将 Visitor1 嵌入 VisitorList 中，VisitorList 是 Visitor 的集合，可存放多个 Visitor。然后将 VisitorList 嵌入 Visitor2 中，接着将 Visitor2 嵌入 Visitor3 中，最终形成 Visitor3{Visitor2{VisitorList{Visitor1}}} 的嵌套关系。</li>\n</ul>\n<p>Kubernetes 源码中的 Visitor，代码示例如下：</p>\n<pre><code>type EagerVisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则保留错误信息，继续遍历执行下一个 Visitor，最后一起返回所有错误。\ntype VisitorList []Visitor\n// 当遍历执行 Visitor 时，如果遇到错误，则立刻返回。</code></pre>\n<p>Kubernetes Visitor 中存在多种实现方法，不同实现方法的作用不同，最终通过 Visitor 的 error 信息为空判断创建资源请求执行成功。</p>\n"},{"title":"client-go","date":"2020-11-27T03:09:15.000Z","_content":"\nKubernetes 系统使用 client-go 作为 Go 语言的官方编程式交互客户端库，提供对 Kubernetes API Server 服务的交互访问。client-go 的源码路径为 vendor/k8s.io/client-go。\n","source":"_posts/client-go.md","raw":"---\ntitle: client-go\ndate: 2020-11-27 11:09:15\ntags: [Kubernetes, client-go]\ncategories: Kubernetes源码解析\n---\n\nKubernetes 系统使用 client-go 作为 Go 语言的官方编程式交互客户端库，提供对 Kubernetes API Server 服务的交互访问。client-go 的源码路径为 vendor/k8s.io/client-go。\n","slug":"client-go","published":1,"updated":"2020-11-27T03:12:34.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhzozvir0000ad8j9f30b8zx","content":"<p>Kubernetes 系统使用 client-go 作为 Go 语言的官方编程式交互客户端库，提供对 Kubernetes API Server 服务的交互访问。client-go 的源码路径为 vendor/k8s.io/client-go。</p>\n","site":{"data":{"friends":[{"avatar":"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png","name":"Baidu","introduction":"有啥不懂就百度！","url":"https://www.baidu.com","title":"baidu"}]}},"excerpt":"","more":"<p>Kubernetes 系统使用 client-go 作为 Go 语言的官方编程式交互客户端库，提供对 Kubernetes API Server 服务的交互访问。client-go 的源码路径为 vendor/k8s.io/client-go。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhcun9ky0001wl8j8t3j2smr","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckhd4yofj00035g8jdxtj3xxm"},{"post_id":"ckheaj9wc0000u88j48xngtfx","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckheaj9wh0002u88j7iue42ni"},{"post_id":"ckhpltrfw00004z8j9v1tf7dm","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckhpltrge00024z8jdt4w6mxz"},{"post_id":"ckhsqrbhk0000nf8jcpfy1z44","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckhsqrbhp0002nf8j1jk21iwk"},{"post_id":"ckhx7l5010000g58j4ldqdjhy","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckhx7l5080002g58j5mruem11"},{"post_id":"ckhzozvir0000ad8j9f30b8zx","category_id":"ckhd4yoff00005g8jccuw2ot0","_id":"ckhzozvix0002ad8jeyog80zm"}],"PostTag":[{"post_id":"ckheaj9wc0000u88j48xngtfx","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckheaj9wh0001u88jgiw3doa5"},{"post_id":"ckhpltrfw00004z8j9v1tf7dm","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckhpltrge00014z8j5xtr49zi"},{"post_id":"ckhsqrbhk0000nf8jcpfy1z44","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckhsqrbhp0001nf8jdh1sehkt"},{"post_id":"ckhcun9ky0001wl8j8t3j2smr","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckhukzk290003om8jdls96zj8"},{"post_id":"ckhcun9ky0001wl8j8t3j2smr","tag_id":"ckhukzk290002om8j159mh1zy","_id":"ckhukzk290004om8j8z6g0hvy"},{"post_id":"ckheaj9wc0000u88j48xngtfx","tag_id":"ckhul11ce0000qm8jfydh96xn","_id":"ckhul11cf0001qm8j8cza3ivf"},{"post_id":"ckhpltrfw00004z8j9v1tf7dm","tag_id":"ckhul1m9v0002qm8jd6z06gdh","_id":"ckhul1m9w0003qm8je2yb912v"},{"post_id":"ckhsqrbhk0000nf8jcpfy1z44","tag_id":"ckhul1m9v0002qm8jd6z06gdh","_id":"ckhul1twc0004qm8j3sej1xgw"},{"post_id":"ckhx7l5010000g58j4ldqdjhy","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckhx7l5080003g58jdsrz9n7c"},{"post_id":"ckhx7l5010000g58j4ldqdjhy","tag_id":"ckhx7l5060001g58jenc828da","_id":"ckhx7l5090004g58j3137bw43"},{"post_id":"ckhzozvir0000ad8j9f30b8zx","tag_id":"ckhd4yofi00015g8j39iv41p0","_id":"ckhzozvix0003ad8j179sc7fz"},{"post_id":"ckhzozvir0000ad8j9f30b8zx","tag_id":"ckhzozviv0001ad8j2amwbg0j","_id":"ckhzozvix0004ad8jad2nh1xu"}],"Tag":[{"name":"Hello","_id":"ckhcutdgc00024v8j03fn38qo"},{"name":"Kubernetes","_id":"ckhd4yofi00015g8j39iv41p0"},{"name":"Kubernetes, Kubernetes架构","_id":"ckhuky3sd0000om8jclpra8vt"},{"name":"Kubernetes架构","_id":"ckhukzk290002om8j159mh1zy"},{"name":"Kubernetes构建","_id":"ckhul11ce0000qm8jfydh96xn"},{"name":"Kubernetes数据结构","_id":"ckhul1m9v0002qm8jd6z06gdh"},{"name":"kubectl 命令行交互","_id":"ckhx7l5060001g58jenc828da"},{"name":"client-go","_id":"ckhzozviv0001ad8j2amwbg0j"}]}}